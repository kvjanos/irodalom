Solver snopt is a nonlinear solver based on SNOPT, a sparse SQP solver
by Philip E. Gill, Walter Murray and Michael A. Saunders.  SNOPT is
available from

	Stanford Business Software
	2680 Bayshore Parkway, Suite 304
	Mountain View, CA 94043
	Phone:	+1-415-962-8719
	Fax:	+1-415-962-1869

US Academic and Government users may obtain SNOPT from Philip Gill;
contact peg@optimal.ucsd.edu (Philip Gill) to see about getting source
for library forms of SNOPT. 

It is most convenient to invoke snopt with AMPL's solve command:

	ampl: option solver snopt;
	ampl: solve;

but snopt can also be run separately, with invocation syntax

	snopt stub [-AMPL] [keywd=[value] ...]

in which stub comes from AMPL's write command.  For example,

	> ampl -obfoo foo.mod foo.dat
	> snopt foo

demonstrates running snopt separately; the ampl invocation
writes file foo.nl (stub = "foo"), which snopt reads.

Command-line arguments to snopt either have the form
	keywd=
or
	keywd=value
where keywd is one of the key words described below.  Alternatively,
you can invoke snopt the way AMPL's solve command does, i.e.,

	snopt stub -AMPL [keywd=value ...]

where stub was specified in

	ampl -obstub ...
or
	ampl -ogstub...

Such an invocation causes snopt to read from stub.nl and to write stub.sol.

-----------------
Controlling snopt
-----------------

Snopt reads keywords and values from the environment (shell) variable
snopt_options and from the command line.  Execute

	snopt -?

or (if your shell requires ? to be quoted)

	snopt '-?'

for a summary of snopt usage and

	snopt -=

(or snopt '-=') for a summary of keywords peculiar to the AMPL/SNOPT
driver "snopt".  You can also give SNOPT keyword phrases as keywords
if you change blanks within them to underscores and follow them with
an = (equals sign).  See the "User's Guide for SNOPT 5.3"
(ftp://www.scicomp.ucsd.edu/pub/peg/reports/sndoc.ps) for a description
of SNOPT keyword phrases.  A phrase of the form nn=filename associates
Fortran unit number nn with the file named "filename"; unit 6 is the
standard output on many systems.

------------------
Sample Invocations
------------------

  If you're using AMPL, just say

	option solver snopt;
	solve;

  If you've executed, say,

	ampl -objunk junk.model junk.data

then you could say

	snopt junk iterations=200 feas_tol=1e-5

to force snopt to run for at most 200 iterations and use feasibility
tolerance 1e-5.  With the Bourne shell, either of the invocations

	snopt_options='iterations=200 feas_tol=1e-5' snopt junk
or
	snopt_options='iterations=200 feas_tol=1e-6'
	export snopt_options
	snopt junk

would have the same effect; within AMPL, specifying

	option snopt_options 'iterations=200 feas_tol=1e-5', solver snopt;
	solve;

would also have this effect.


This directory has two makefile variants:  makefile.u for Unix and
Linux systems, and makefile.u for Microsoft systems and the Visual C++
compiler.  We suggest you copy the relevant variant to "makefile",
then make any necessary changes to "makefile".  The makefiles assume
that $M/libsnopt.a or $M/snopt.lib is a library built from the SNOPT
source (as of 16 May 2001).  The makefiles and source assume f2c
calling conventions; see solvers/README.f77 for information on using
other Fortran compilers.

For possible convenience, directory src also contains two analogous
makefile variants.  See the comments in them.

-----------------------
solve_result_num values
=======================

Here is a table of solve_result_num values that "snopt" can return
to an AMPL session, along with the text that appears in the associated
solve_message.

	Value	Message

	0	Optimal solution found
	100	Primal feasible solution; could not satisfy dual feasibility
	101	The current point cannot be improved
	200	Infeasible problem (or bad starting guess)
	201	Numerical error: the general constraints
		cannot be satisfied accurately
	300	Unbounded (or badly scaled) problem
	400	Too many iterations
	501	Error evaluating nonlinear expressions
	502	Incorrect gradients from funobj
	503	Incorrect gradients from funcon
	504	Arithmetic error
	505	Surprise function evaluation error
	506	Not enough storage for the basis factors
	507	Error in basis package
	508	Singular basis after several factorization attempts
	509	Input basis had wrong dimensions
	510	System error: wrong number of basic variables
	511	Too little real storage
	512	Too little integer storage
	513	Error evaluating initial objective value
	514	Error evaluating initial constraint values
	515	BUG! unexpected return nnn
	516	Impossible problem -- no variables
	517	Bad assignments in $snopt_options or on the command line
	518	Objno out of range
	519	Objective involves division by 0 (unlikely)
	520	The superbasics limit (nnn) is too small
	521	Bug in nqpcheck

-----------------------

Questions about this stuff?  Contact dmg@bell-labs.com (David M. Gay).

Adatb´ ny´ szati algoritmusok a a
Dr. Bodon Ferenc 2007. szeptember 9.

Copyright c 2002-2007 Dr. Bodon Ferenc Ezen dokumentum a Free Software Foundation altal kiadott GNU Free Do´ cumentation license 1.2-es, vagy b´ rmely azt k¨ vet˝ verzi´ j´ nak felt´ telei alapj´ n a o o oa e a m´ solhat´ , terjeszthet˝ a o o es/vagy m´ dos´that´ . Nincs Nem V altoztathat´ ´ o ı o o Szakasz, ´ nincs C´mlap-sz¨ veg, nincs H´ tlap-sz¨ veg. A licenc magyar nyel˝ ford´t´ sa a ı o a o u ıa http ://hu.wikipedia.org/wiki/A GNU Szabad Dokument´ci´s Licenc sz¨vege a o o oldalon tal´ lhat´ . a o Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 (http://www.gnu.org/copyleft/fdl.html) or any later version published by the Free Software Foundation ; with no Invariant Sections, no FrontCover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled ”GNU Free Documentation License”.

1

K¨ sz¨ netnyilv´ n´t´ s o o a ıa
´ Ez´ ton szeretn´ k k¨ sz¨ netet mondani Ronyai Lajosnak, a Budapesti M˝ szaki es Gazu e o o u ´ das´ gtudom´ nyi Egyetem tan´ r´ nak az eg´ sz munka sor´ n ny´ jtott seg´ts´ g´ ert, hasznos otletei´ rt, a a aa e a u ı e e´ ¨ e ´ utmutat´ sai´ rt, de legf˝ k´ ppen az´ rt, mert megismertetett az adatb´ ny´ szattal. K¨ sz¨ n¨ m Moln ar´ a e o e e a a o o o S´ ska G´ bornak es Pint´ r M´ rt´ nak, az MTA-SZTAKI dolgoz´ inak val´ sz´n˝ s´ gsz´ m´t´ ssal kapa a ´ e a a o o ı u e a ıa csolatos tan´ csaikat. a K¨ sz¨ n¨ m Buza Kriszti´ nnak hasznos megjegyz´ seit, otleteit, szeml´ letes p´ ld´ it es a kidolgoo o o a e ¨ e e a ´ zott abr´ it amelyekkel hozz´ j´ rul a tanulm´ ny siker´ hez. ´ a aa a e K¨ l¨ n k¨ sz¨ net illeti Czibula Veronik´ t a tanulm´ ny t¨ bbsz¨ ri, alapos atn´ z´ s´ ert es a felfedeuo o o a a o o ´ e e e´ ´ A X, emacs, Xﬁg hat´ kony zett hib´ k kijav´t´ s´ ert. Marx D´ niel rengeteg inform´ ci´ val l´ tott el a L TE a ı a a´ a a o a e haszn´ lat´ t illet˝ en. K¨ sz¨ n¨ m neki a f´ radoz´ sait. a a o o o o a a ´ ´ Friedl Kat´ nak, ifjabb Benczur Andr´ snak, Luk´ cs Andr´ snak, Maricza Istv´ nnak es Bea a a a a reczki Tam´ snak k¨ sz¨ n¨ m az ert´ kes eszrev´ teleit, megjegyz´ seit. a o o o ´ e ´ e e ´ e Ert´ kes eszrev´ teleik es konstrukt´v javaslatai´ rt k¨ sz¨ net illeti a BME di´ kjait, t¨ bbek k¨ z¨ tt ´ e ´ ı e o o a o o o (n´ vsorrendben) Hajnacs Zolt´ nt, Schlotter Ildik´ t es Varga D´ nielt. e a o ´ a

Tartalomjegyz´ k e

El˝ sz´ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o o 1. Bevezet´ s e 1.1. Legjelent˝ sebb adatb´ ny´ szati feladatok o a a 1.2. A tud´ sfelt´ r´ s folyamata . . . . . . . . a aa 1.3. Adatb´ ny´ szat kontra statisztika . . . . a a 1.4. Sikeres alkalmaz´ sok . . . . . . . . . . a 1.5. Szabv´ nyok . . . . . . . . . . . . . . . a 1.6. Adatb´ ny´ szati rendszer architekt´ r´ ja . a a ua 1.7. Adatb´ ny´ szat es az etika . . . . . . . . a a ´ 1.8. Az adatb´ ny´ szat felt´ telei . . . . . . . a a e

8 10 11 13 16 18 20 21 22 22 24 24 26 26 27 27 27 28 28 28 29 29 29 30 30 31 31 31 34 35 35 35

2. Alapfogalmak, jel¨ l´ sek oe 2.1. Halmazok, rel´ ci´ k, f¨ ggv´ nyek, sorozatok a o u e 2.2. Line´ ris algebra . . . . . . . . . . . . . . . a 2.3. Gr´ felm´ let . . . . . . . . . . . . . . . . . a e 2.4. Matematika logika . . . . . . . . . . . . . 2.5. Val´ sz´n˝ s´ gsz´ m´t´ s . . . . . . . . . . . . o ı u e a ıa 2.5.1. Nevezetes eloszl´ sok . . . . . . . . a 2.5.2. Ferdes´ g es lapults´ g . . . . . . . . e ´ a 2.5.3. Hoeffding-korl´ t . . . . . . . . . . a 2.5.4. Entr´ pia . . . . . . . . . . . . . . . o 2.6. Statisztika . . . . . . . . . . . . . . . . . . 2.6.1. Hipot´ zisvizsg´ lat . . . . . . . . . e a 2.6.2. Az F-pr´ ba . . . . . . . . . . . . . o 2.6.3. A χ2 -pr´ ba . . . . . . . . . . . . . o 2.6.4. F¨ ggetlens´ gvizsg´ lat . . . . . . . u e a 2.7. Algoritmus-elm´ let . . . . . . . . . . . . . e 2.8. Adatstrukt´ r´ k . . . . . . . . . . . . . . . ua 2.8.1. Sz´ f´ k . . . . . . . . . . . . . . . oa 2.8.2. Piros-fekete f´ k . . . . . . . . . . . a 2.8.3. Hash-t´ bla . . . . . . . . . . . . . a 2.9. Sz´ m´t´ g´ p-architekt´ r´ k . . . . . . . . . . a ıo e ua 2.9.1. T¨ bbszint˝ mem´ ria, adatlokalit´ s . o u o a 2

´ TARTALOMJEGYZEK 2.9.2. Cs˝ vezet´ kes feldolgoz´ s, el´ gaz´ s-el˝ rejelz´ s . . . . . . . . . . . . . . . . o e a a a o e 3. El˝ feldolgoz´ s, hasonl´ s´ gi fuggv´ nyek o a oa ¨ e 3.1. El˝ feldolgoz´ s . . . . . . . . . . . . o a 3.1.1. Hi´ nyz´ ert´ kek kezel´ se . . . a o´ e e 3.1.2. Attrib´ tum transzform´ ci´ k . u a o 3.1.3. Mintav´ telez´ s . . . . . . . . e e 3.2. Hasonl´ s´ gi m´ rt´ kek . . . . . . . . . oa e e 3.2.1. Bin´ ris attrib´ tum . . . . . . a u 3.2.2. Kateg´ ria t´pus´ attrib´ tum . o ı u u 3.2.3. Sorrend t´pus´ attrib´ tum . . ı u u 3.2.4. Intervallum t´pus´ attrib´ tum ı u u 3.2.5. Vegyes attrib´ tumok . . . . . u 3.2.6. Speci´ lis esetek . . . . . . . . a 3.2.7. Dimenzi´ cs¨ kkent´ s . . . . . o o e . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3 36 37 38 38 38 38 39 40 41 41 41 42 42 43 49 49 52 53 54 56 57 57 58 60 60 62 65 66 70 73 74 74 74 74 74 74 75 76 78 78 79 79

4. Gyakori elemhalmazok 4.1. A gyakori elemhalmaz fogalma . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.2. Az APRIORI algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.2.1. Jel¨ ltek el˝ all´t´ sa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o o´ ı a 4.2.2. Jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ sa . . . . . . . . . . . . . . . . . . o a a a a a 4.2.3. Zs´ kutca nyes´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a e 4.2.4. A bemenet t´ rol´ sa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a a 4.2.5. Tranzakci´ k sz˝ r´ se . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o ue 4.2.6. Equisupport nyes´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e 4.2.7. Borgelt-f´ le t´ mogatotts´ g-meghat´ roz´ s . . . . . . . . . . . . . . . . . . . e a a a a 4.2.8. Utols´ f´ zisok gyors´t´ sa : APRIORI-TID es APRIORI-HYBRID algoritmusok o a ıa ´ 4.2.9. Fut´ si id˝ es mem´ riaig´ ny . . . . . . . . . . . . . . . . . . . . . . . . . . a o´ o e 4.2.10. K´ telem˝ jel¨ ltek sz´ m´ nak cs¨ kkent´ se : a DHP algoritmus . . . . . . . . . e u o a a o e 4.3. Az ECLAT algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.4. Az FP- GROWTH algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.4.1. Az FP-growth* algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.5. Tov´ bbi h´res algoritmusok . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a ı 4.5.1. A DF -APRIORI algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . 4.5.2. patricia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.5.3. kdci . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.5.4. lcm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.5.5. Mintav´ telez˝ algoritmus elemz´ se . . . . . . . . . . . . . . . . . . . . . . e o e 4.6. Elemhalmazok Galois lez´ rja . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a 4.6.1. A z´ rt elemhalmazok fogalma . . . . . . . . . . . . . . . . . . . . . . . . . a 4.7. K´ nyszerek kezel´ se . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e e 4.7.1. ExAnte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4.8. T¨ bbsz¨ r¨ s t´ mogatotts´ gi k¨ sz¨ b . . . . . . . . . . . . . . . . . . . . . . . . . . . o oo a a u o 4.8.1. MSApriori algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

´ TARTALOMJEGYZEK 5. Gyakori mint´ k kinyer´ se a e 5.1. A gyakori minta deﬁn´ci´ ja . . . . . . . . . . . . . . . . . . . . ı o 5.1.1. Hat´ konys´ gi k´ rd´ sek . . . . . . . . . . . . . . . . . . e a e e 5.2. Tov´ bbi feladatok . . . . . . . . . . . . . . . . . . . . . . . . . a 5.2.1. Nem b˝ v´thet˝ es z´ rt mint´ k . . . . . . . . . . . . . . o ı o´ a a 5.2.2. K´ nyszerek kezel´ se . . . . . . . . . . . . . . . . . . . e e 5.2.3. T¨ bbsz¨ r¨ s t´ mogatotts´ gi k¨ sz¨ b . . . . . . . . . . . . o oo a a u o 5.2.4. Dinamikus gyakori mintakinyer´ s . . . . . . . . . . . . e 5.3. Az algoritmusok jellemz˝ i . . . . . . . . . . . . . . . . . . . . o 5.4. Az APRIORI m´ dszer . . . . . . . . . . . . . . . . . . . . . . o 5.4.1. Jel¨ ltek el˝ all´t´ sa . . . . . . . . . . . . . . . . . . . . o o´ ı a 5.4.2. Z´ rt mint´ k kinyer´ se, az APRIORI-CLOSE algoritmus a a e 5.5. Sorozat t´pus´ bemenet . . . . . . . . . . . . . . . . . . . . . . ı u 5.5.1. APRIORI . . . . . . . . . . . . . . . . . . . . . . . . . 5.5.2. Zaki m´ dszere . . . . . . . . . . . . . . . . . . . . . . o 5.5.3. Mintan¨ vel˝ algoritmusok . . . . . . . . . . . . . . . . o o 5.5.4. K´ tl´ pcs˝ s technik´ k . . . . . . . . . . . . . . . . . . . e e o a 5.5.5. A z´ rt mint´ k t¨ r´ kenys´ ge” . . . . . . . . . . . . . . a a oe e ” 5.5.6. Dinamikus gyakori mintab´ ny´ szat . . . . . . . . . . . a a 6. Gyakori sorozatok, bool formul´ k es epiz´ dok a ´ o 6.1. Gyakori sorozatok kinyer´ se . . . . . . . . . . . . . . e 6.1.1. A Gyakori Sorozat Fogalma . . . . . . . . . . 6.1.2. APRIORI . . . . . . . . . . . . . . . . . . . . 6.1.3. Elemhalmazokat tartalmaz´ gyakori sorozatok o 6.1.4. Sorozat t´pus´ minta altal´ nos´t´ sa . . . . . . . ı u ´ a ıa 6.2. Gyakori bool formul´ k . . . . . . . . . . . . . . . . . a 6.3. Gyakori epiz´ dok . . . . . . . . . . . . . . . . . . . . o 6.3.1. A t´ mogatotts´ g deﬁn´ci´ ja . . . . . . . . . . a a ı o 6.3.2. APRIORI . . . . . . . . . . . . . . . . . . . . 7. Gyakori f´ k es fesz´tett r´ szgr´ fok a ´ ı e a 7.1. Az izomorﬁa probl´ m´ ja . . . e a 7.2. A gyakori gr´ f fogalma . . . . a 7.3. gyakori gy¨ keres f´ k . . . . . o a 7.3.1. TreeMinerH . . . . . . 7.3.2. TreeMinerV . . . . . . 7.4. Gyakori r´ szf´ k . . . . . . . . e a 7.5. A gyakori fesz´tett r´ szgr´ fok . ı e a 7.5.1. Az AcGM algoritmus . 7.6. A gyakori r´ szgr´ fok keres´ se e a e 7.6.1. Az FSG algoritmus . . 7.6.2. gSpan

4 81 82 83 84 84 85 86 86 87 87 88 90 90 91 92 94 96 99 99 102 102 103 103 104 108 108 109 109 110 113 113 115 115 117 118 120 120 120 122 122 124

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

´ TARTALOMJEGYZEK 8. Asszoci´ ci´ s szab´ lyok a o a 8.1. Az asszoci´ ci´ s szab´ ly fogalma . . . . . . . . a o a 8.2. Hierarchikus asszoci´ ci´ s szab´ lyok . . . . . . a o a 8.3. Maxim´ lis k¨ vetkezm´ ny˝ asszoci´ ci´ s szab´ ly a o e u a o a 8.3.1. Egzakt asszoci´ ci´ s szab´ lyok b´ zisa . a o a a ´ 8.4. Erdekess´ gi mutat´ k . . . . . . . . . . . . . . e o 8.5. A korrel´ ci´ nem jelent implik´ ci´ t . . . . . . a o a o

5 127 127 128 130 130 131 140

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

. . . . . .

9. Funkcion´ lis es k¨ zel´t˝ fugg˝ s´ gek a ´ o ıo ¨ oe 142 9.1. Funkcion´ lis f¨ gg˝ s´ g . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143 a u oe 9.2. K¨ zel´t˝ f¨ gg˝ s´ g . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143 o ıo u o e 9.3. TANE Algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 10. Oszt´ lyoz´ s a a 10.1. Bevezet´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e 10.2. Az oszt´ lyoz´ s feladata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a a 10.3. k-legk¨ zelebbi szomsz´ d m´ dszere . . . . . . . . . . . . . . . . . . . . . . . o e o 10.4. D¨ nt´ si szab´ lyok . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o e a 10.4.1. Szab´ ly halmazok es szab´ ly sorozatok . . . . . . . . . . . . . . . . a ´ a 10.4.2. D¨ nt´ si t´ bl´ zatok . . . . . . . . . . . . . . . . . . . . . . . . . . . o e a a 10.4.3. Az 1R algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10.4.4. A Prism m´ dszer . . . . . . . . . . . . . . . . . . . . . . . . . . . . o 10.5. D¨ nt´ si f´ k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o e a 10.5.1. D¨ nt´ si f´ k es d¨ nt´ si szab´ lyok . . . . . . . . . . . . . . . . . . . . o e a ´ o e a 10.5.2. A d¨ nt´ si fa el˝ all´t´ sa . . . . . . . . . . . . . . . . . . . . . . . . . o e o´ ı a 10.5.3. Az ID3 algoritmus . . . . . . . . . . . . . . . . . . . . . . . . . . . 10.5.4. Felt´ telek a csom´ pontokban . . . . . . . . . . . . . . . . . . . . . . e o 10.5.5. V´ g´ si f¨ ggv´ nyek . . . . . . . . . . . . . . . . . . . . . . . . . . . a a u e 10.5.6. Tov´ bbfejleszt´ sek . . . . . . . . . . . . . . . . . . . . . . . . . . . a e 10.5.7. S´ lyozott divergenciaf¨ ggv´ nyek alapj´ n deﬁni´ lt v´ g´ si f¨ ggv´ nyek u u e a a a a u e 10.5.8. D¨ nt´ si f´ k abr´ zol´ sa . . . . . . . . . . . . . . . . . . . . . . . . . o e a ´ a a 10.5.9. Hanyag d¨ nt´ si f´ k . . . . . . . . . . . . . . . . . . . . . . . . . . . o e a 10.6. Mesters´ ges neur´ lis h´ l´ zatok . . . . . . . . . . . . . . . . . . . . . . . . . e a ao 10.7. Bayesi h´ l´ zatok . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ao 10.8. Egy´ b m´ dszerek . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e o 10.9. Oszt´ lyoz´ k ki´ rt´ kel´ se . . . . . . . . . . . . . . . . . . . . . . . . . . . . a o e e e ´ 10.9.1. Ertekez´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e 10.9.2. Hiba m´ r´ se val´ sz´n˝ s´ gi d¨ nt´ si rendszerek eset´ n . . . . . . . . . ee o ı ue o e e 11. Regresszi´ o 12. Klaszterez´ s e 12.1. Egy lehetetlens´ g-elm´ let . . . . . e e 12.2. Hasonl´ s´ g m´ rt´ ke, adat´ br´ zol´ s oa e e a a a 12.3. A klaszterek jellemz˝ i . . . . . . o 12.4. A klaszterez´ s j´ s´ ga” . . . . . . e oa ”

´ TARTALOMJEGYZEK 12.4.1. Klasszikus m´ rt´ kek . . . . . . . . . . . . . . e e 12.4.2. Konduktancia alap´ m´ rt´ k . . . . . . . . . . u e e 12.5. Klaszterez˝ algoritmusok t´pusai . . . . . . . . . . . . o ı 12.6. Particion´ l´ elj´ r´ sok . . . . . . . . . . . . . . . . . . ao aa 12.6.1. Forgy k-k¨ z´ p algoritmusa . . . . . . . . . . . o e 12.6.2. A k-medoid algoritmusok . . . . . . . . . . . 12.7. Hierarchikus elj´ r´ sok . . . . . . . . . . . . . . . . . aa 12.7.1. Single-, Complete-, Avegare Linkage Elj´ r´ sok aa 12.7.2. Ward m´ dszere . . . . . . . . . . . . . . . . . o 12.7.3. A BIRCH algoritmus . . . . . . . . . . . . . . 12.7.4. A CURE algoritmus . . . . . . . . . . . . . . 12.7.5. A Chameleon algoritmus . . . . . . . . . . . . 12.8. S˝ r˝ s´ g-alap´ m´ dszerek . . . . . . . . . . . . . . . . uue u o 12.8.1. A DBSCAN algoritmus . . . . . . . . . . . . 13. Id˝ sorok elemz´ se o e 14. Sz¨ vegb´ ny´ szat (Tikk Domonkos) o a a 14.1. Dokumentumok el˝ feldolgoz´ sa . . . . . . . . . . . . . . . . . . . . . . . . . . . o a 14.1.1. A dimenzi´ sz´ m cs¨ kkent´ se . . . . . . . . . . . . . . . . . . . . . . . . o a o e 14.1.2. Hat´ konys´ g m´ r´ se . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e a ee 14.2. Oszt´ lyoz´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a a 14.2.1. Oszt´ lyoz´ s struktur´ latlan kateg´ ri´ k rendszer´ be . . . . . . . . . . . . . a a a o a e 14.2.2. Hierarchikus oszt´ lyoz´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . a a 14.3. Dokumentumok csoportos´t´ sa . . . . . . . . . . . . . . . . . . . . . . . . . . . . ıa 14.3.1. Sz¨ vegklaszterez´ s jellemz˝ feladatai es probl´ m´ i . . . . . . . . . . . . . o e o ´ e a 14.3.2. Reprezent´ ci´ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a o 14.3.3. Hat´ konys´ g m´ r´ se . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e a ee 14.3.4. Sz¨ vegklaszterez˝ elj´ r´ sok . . . . . . . . . . . . . . . . . . . . . . . . . o o aa 14.3.5. Dokumentumgy˝ jtem´ nyek . . . . . . . . . . . . . . . . . . . . . . . . . u e 14.4. Kivonatol´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a 14.4.1. Az osszegz´ sk´ sz´t˝ elj´ r´ sok feloszt´ sa . . . . . . . . . . . . . . . . . . . ¨ e e ıo aa a 14.4.2. A kivonatol´ s hat´ konys´ g´ nak m´ r´ se . . . . . . . . . . . . . . . . . . . a e a a ee 14.4.3. Mondatkiv´ laszt´ sn´ l haszn´ lt jellemz˝ k . . . . . . . . . . . . . . . . . . a a a a o 14.5. A legfontosabb kivonatol´ elj´ r´ sok . . . . . . . . . . . . . . . . . . . . . . . . . o aa 14.5.1. A klasszikus m´ dszer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . o 14.5.2. TF-IDF alap´ m´ dszer . . . . . . . . . . . . . . . . . . . . . . . . . . . . u o 14.5.3. Csoportos´t´ s alap´ m´ dszerek . . . . . . . . . . . . . . . . . . . . . . . . ıa u o 14.5.4. Gr´ felm´ leti megk¨ zel´t´ sek . . . . . . . . . . . . . . . . . . . . . . . . . a e o ıe 14.5.5. SVD haszn´ lata a kivonatol´ sban . . . . . . . . . . . . . . . . . . . . . . a a 14.5.6. Esettanulm´ ny : b¨ ng´ sz´ s t´ mogat´ sa kivonatol´ ssal k´ zi sz´ m´t´ g´ peken a o e e a a a e a ıo e 14.6. Egy´ b sz¨ vegb´ ny´ szati feladatok . . . . . . . . . . . . . . . . . . . . . . . . . . e o a a 14.6.1. Inform´ ci´ kinyer´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a o e 14.6.2. T´ mak¨ vet´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e o e 14.6.3. Fogalomt´ rs´t´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a ıa 14.6.4. Sz¨ veges inform´ ci´ k vizualiz´ l´ sa . . . . . . . . . . . . . . . . . . . . . o a o aa

6 181 183 185 186 186 187 188 189 189 190 190 192 192 192 194 195 196 198 199 200 200 207 210 210 211 211 212 214 214 215 216 217 218 218 219 219 221 221 221 224 224 224 225 225

´ TARTALOMJEGYZEK 14.6.5. K´ rd´ s-megv´ laszol´ s . . . . . . . . . . . . . . e e a a 14.7. Nyelvfeldolgoz´ s es sz¨ vegb´ ny´ szat . . . . . . . . . . a ´ o a a 14.7.1. Sz¨ vegb´ ny´ szat magyarul . . . . . . . . . . . . o a a 14.8. Linkgy˝ jtem´ ny . . . . . . . . . . . . . . . . . . . . . . u e 14.8.1. Tesztkorpuszok . . . . . . . . . . . . . . . . . . 14.8.2. Cikk- es linkgy˝ jtem´ nyek . . . . . . . . . . . . ´ u e 14.8.3. Sz¨ vegb´ ny´ szati szoftverek . . . . . . . . . . . o a a 14.8.4. N´ h´ ny magyar vonatkoz´ s´ eredm´ ny es projekt e a au e ´ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

7 225 226 227 227 227 227 228 228 230 230 231 234 234 234 238 240 241 241 243 243 243 244 245 246 247 248 249 250

15. Webes adatb´ ny´ szat a a 15.1. Oldalak rangsorol´ sa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . a 15.1.1. Az egyszer˝ Page Rank . . . . . . . . . . . . . . . . . . . . . . . . . . u 15.1.2. Az igazi Page Rank . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15.2. Webes keres´ s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e 15.2.1. Gy˝ jt˝ lapok es Tekint´ lyek – a HITS algoritmus . . . . . . . . . . . . u o ´ e 15.2.2. A SALSA m´ dszer (Jakabfy Tam´ s) . . . . . . . . . . . . . . . . . . . o a 15.2.3. Gy˝ jt˝ lapok, Tekint´ lyek es v´ letlen s´ t´ k (Jakabfy Tam´ s) . . . . . . u o e ´ e ea a 15.2.4. Automatikus forr´ s el˝ all´t´ - Gy˝ jt˝ lapok es Tekint´ lyek m´ dos´t´ sai . a o´ ı o u o ´ e o ıa 15.2.5. Gy˝ jt˝ lapok es Tekint´ lyek m´ dszer´ nek h´ tr´ nyai . . . . . . . . . . . u o ´ e o e a a 16. Adatb´ ny´ szat a gyakorlatban a a 16.1. Felhaszn´ l´ si ter¨ letek . . . . . . . . . . . . . . . . . . . . . . . . . . aa u 16.1.1. Az ugyf´ l eletciklusa . . . . . . . . . . . . . . . . . . . . . . . ¨ e ´ 16.1.2. Kereskedelem . . . . . . . . . . . . . . . . . . . . . . . . . . . 16.1.3. P´ nz¨ gy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . e u 16.1.4. Biol´ gia es Orvostudom´ ny . . . . . . . . . . . . . . . . . . . o ´ a 16.2. Az adatb´ ny´ szat b¨ lcs˝ je : az elektronikus kereskedelem (e-commerce) a a o o 16.3. Adatb´ ny´ sz szoftverek . . . . . . . . . . . . . . . . . . . . . . . . . . a a 16.3.1. Adatb´ ny´ szati rendszerek tulajdons´ gai . . . . . . . . . . . . a a a 16.3.2. Esettanulm´ nyok r¨ viden . . . . . . . . . . . . . . . . . . . . . a o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

¨ Fuggel´ k e 254 F¨ ggel´ k A . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254 u e

El˝ sz´ o o

A 90-es evekben a t´ rol´ kapacit´ sok m´ ret´ nek igen er˝ teljes n¨ veked´ se, valamint az arak ´ a o a e e o o e ´ 1 miatt az elektronikus eszk¨ z¨ k es adatb´ zisok a h´ tk¨ znapi eletben is mind nagym´ rt´ k˝ cs¨ kken´ se e e u o e o o ´ a e o ´ ink´ bb elterjedtek. Az egyszer˝ es olcs´ t´ rol´ si lehet˝ s´ gek a nyers, feldolgozatlan adatok t¨ meges a u´ o a a oe o m´ ret˝ felhalmoz´ s´ t eredm´ nyezt´ k, ezek azonban a k¨ zvetlen visszakeres´ sen es ellen˝ rz´ sen k´v¨ l e u aa e e o e ´ o e ı u nem sok egy´ b haszonnal j´ rtak. A ritk´ n l´ togatott adatokb´ l adat temet˝ k” (data tombs) alakule a a a o o ” tak ki [74], amelyek t´ rol´ sa haszon helyett k¨ lts´ get jelentett. Ekkor m´ g nem alltak rendelkez´ sre a a o e e ´ e olyan eszk¨ z¨ k, amivel az adatokba agyazott ert´ kes inform´ ci´ t ki tudtak nyerni. K¨ vetkez´ sk´ ppen o o ´ ´ e a o o e e a fontos d¨ nt´ sek a d¨ nt´ shoz´ k meg´ rz´ sein alapultak, nem pedig az inform´ ci´ -gazdag adatokon. o e o e o e e a o J´ l jellemzi ezt a helyzetet John Naisbitt h´res mond´ sa, miszerint We are drowning in information, o ı a ” but starving for knowledge” (Megfulladunk az inform´ ci´ t´ l, mik¨ zben tud´ sra ehez¨ nk). a oo o a ´ u Egyre t¨ bb ter¨ leten mer¨ lt fel az ig´ ny, hogy az adathalmazokb´ l a hagyom´ nyosn´ l arnyaltabb o u u e o a a ´ szerkezet˝ inform´ ci´ kat nyerjenek ki. A hagyom´ nyos adatb´ zis-kezel˝ rendszerek – a k¨ zvetlen u a o a a o o keres˝ k´ rd´ seken k´v¨ l, illetve az alapvet˝ statisztikai funkci´ kon t´ l (´ tlag, sz´ r´ s, maxim´ lis es mio e e ı u o o u a oa a ´ nim´ lis ert´ kek meghat´ roz´ sa) – komplexebb feladatokat egy´ ltal´ n nem tudtak megoldani, vagy az a ´ e a a a a eredm´ ny kisz´ m´t´ sa elfogadhatatlanul hossz´ id˝ be telt. A sz¨ ks´ g egy uj tudom´ nyter¨ letet keltett e a ıa u o u e ´ a u eletre, az adatb´ ny´ szatot, amelynek c´ lja : hasznos, l´ tens inform´ ci´ kinyer´ se az adatokb´ l”. Az ´ a a e a a o e o ” adatb´ ny´ szati algoritmusokat imm´ r arra tervezt´ k, hogy k´ pesek legyenek az arnyaltabb inform´ ci´ a a a e e ´ a o kinyer´ s´ re ak´ r ori´ si m´ ret˝ adatb´ zisok eset´ n is. ee a ´ a e u a e Az adatb´ ny´ szat, mint on´ ll´ tudom´ nyter¨ let l´ tez´ s´ r˝ l az 1980-as evek v´ g´ t˝ l besz´ lhet¨ nk. a a ¨ a o a u e eeo ´ e eo e u Kezdetben a k¨ l¨ nb¨ z˝ heurisztik´ k, a matematikailag nem elemzett algoritmusok domin´ ltak. A 90uo o o a a es evekben megjelent cikkek t¨ bbs´ g´ t legfeljebb elhinni lehetett, de semmik´ ppen sem k´ tely n´ lk¨ l ´ o e e e e e u meggy˝ z˝ dni az egyes ´r´ sok helyt´ ll´ s´ g´ r´ l. Az algoritmusok fut´ si idej´ r˝ l es mem´ riaig´ ny´ r˝ l o o ıa a oa ao a eo ´ o e eo altal´ ban felsz´nes elemz´ seket es tesztel´ si eredm´ nyeket olvashattunk. Az ig´ nyes olvas´ ban min´ a ı e ´ e e e o dig maradt egy-k´ t k´ rd´ s, amire eml´t´ s szintj´ n sem tal´ lt v´ laszt. Bizonyos k´ osz uralkodott, amie e e ıe e a a a ben l´ tsz´ lag mindenre volt megold´ s, am ezek a megold´ sok t¨ bbnyire r´ szlegesek voltak, tele a a o a ´ a o e legk¨ l¨ nb¨ z˝ bb hib´ kkal. uo o o a A XXI. sz´ zadba val´ bel´ p´ ssel a kutat´ k k¨ r´ ben egyre nagyobb n´ pszer˝ s´ gnek kezdett a o e e o oe e ue orvendeni az adatb´ ny´ szat. Ennek k´ t oka van. Egyr´ szt a n¨ vekv˝ versenyhelyzet miatt a piaci ¨ a a e e o o elet szerepl˝ inek ori´ si az ig´ nye az adatb´ zisokban megb´ j´ hasznos inform´ ci´ kra. A n¨ vekv˝ ´ o ´ a e a uo a o o o ig´ ny n¨ vekv˝ kutat´ i beruh´ z´ sokat induk´ lt. M´ sr´ szt, az adatb´ ny´ szat a maga neh´ zs´ g´ vel, e o o o a a a a e a a e e e multi-diszciplin´ ris volt´ val a kutatni, gondolkodni es ujszer˝ probl´ m´ kat megoldani v´ gy´ ig´ ny´ t a a ´ ´ u e a a o e e
t´ rol´ kapacit´ s n¨ veked´ se m´ g Moore j´ slat´ t is j´ csk´ n fel¨ lm´ lja. Az ut´ bbi 15 ev alapj´ n ugyanis a a o a o e e o a o a u u o ´ a t´ rol´ kapacit´ s 9 h´ naponk´ nt dupl´ z´ dik meg [135] a o a o e a o
1A

8

´ TARTALOMJEGYZEK

9

t¨ k´ letesen kiel´ g´ti. o e e ı Sorra sz¨ lettek meg a sz´nvonalas munk´ k, elemz´ sek, osszehasonl´t´ sok, mint tiszta ir´ nyvonalak u ı a e ¨ ıa a rajzol´ dtak ki a k´ oszban. A megoldatlan, nyitott probl´ m´ kra m´ g mindig keress¨ k a v´ laszt, ´gy o a e a e u a ı val´ sz´n˝ leg az adatb´ ny´ szat diadalmenete m´ g sok´ ig t¨ retlen marad. o ı u a a e a o Ez a jegyzet a jelenlegi adatb´ ny´ szati probl´ m´ kr´ l es az azokat megold´ algoritmusokr´ l sz´ l. a a e a o ´ o o o A ter¨ letek attekint´ se mellett az algoritmusok m´ lyebb szint˝ megismer´ se is a c´ l. Az ´r´ s inu ´ e e u e e ıa formatikus be´ ll´totts´ g´ olvas´ knak k´ sz¨ lt. Felt´ telezz¨ k, hogy az olvas´ tiszt´ ban van algoritmusa ı a u o e u e u o a [101] es adatb´ zis-elm´ leti alapokkal, tov´ bb´ nem ismeretlen ter¨ let sz´ m´ ra a val´ sz´n˝ s´ gsz´ m´t´ s ´ a e a a u a a o ı u e a ıa [9, 57] es a line´ ris algebra [141] sem. ´ a A jegyzet c´ lja az, hogy az adatb´ ny´ szati appar´ tus olyan megismer´ s´ t ny´ jtsa, melynek e a a a ee u seg´ts´ g´ vel az olvas´ sikerrel oldja meg az egyre t¨ bb ter¨ leten felbukkan´ ujabb es ujabb ı e e o o u o ´ ´ ´ adatb´ ny´ szati probl´ m´ kat. Algoritmikus adatb´ ny´ szatr´ l ´runk, ez´ rt azon mesters´ ges intelligena a e a a a o ı e e cia ter¨ let´ hez tartoz´ eszk¨ z¨ k (mesters´ ges neur´ lis h´ l´ zatok, genetikus algoritmusok es fuzzy u e o o o e a ao ´ rendszerek), amelyekr˝ l azt tartj´ k, hogy az adatb´ ny´ szatban is haszn´ lhat´ k, kev´ s hangs´ lyt kapo a a a a o e u nak. A jegyzet legfrissebb v´ ltozata let¨ lthet˝ a a o o http://www.cs.bme.hu/~bodon/magyar/adatbanyaszat c´men tal´ lhat´ oldalr´ l. ı a o o A jegyzet nem v´ gleges ! Folyamatosan b˝ v¨ l, v´ ltozik. Egyes r´ szek kisebb s´ lyt kapnak, m´ sok e o u a e u a ¨ ommel fogadok b´ rmilyen eszrev´ telt, javaslatot ak´ r helyes´r´ si, viszont jobban r´ szletezettek. Or¨ e a ´ e a ıa stilisztikai vagy tipogr´ ﬁai hib´ ra vonatkoz´ an. Ezeket k´ rn´ m, hogy a a a o e e bodon@cs.bme.hu c´mre k¨ ldj´ k. ı u e Az ´r´ s L TEX-ben k´ sz¨ lt, eleinte a kile, k´ s˝ bbiekben az emacs sz¨ vegszerkeszt˝ seg´ts´ g´ vel. ıa A e u eo o o ı e e Egyes abr´ k Xﬁg-el, m´ sok a pst-node csomaggal lettek rajzolva. Az eg´ sz munk´ hoz az UHU-linux ´ a a e a oper´ ci´ s rendszer (http://www.uhulinux.hu) ny´ jtotta a stabil es biztons´ gos h´ tteret. a o u ´ a a

1. fejezet Bevezet´ s e
A sz´ m´t´ g´ p, korunk legdics˝ bb tal´ lm´ nya, rohaml´ ptekkel h´ d´t teret mag´ nak az elet minden a ıo e o a a e o ı a ´ ter¨ let´ n. Egy gener´ ci´ alatt n´ lk¨ l¨ zhetetlenn´ v´ lt, amit sz¨ leink m´ g el sem tudtak k´ pzelni, u e a o e uo e a u e e sz´ munkra m´ r elv´ laszthatatlann´ v´ lt munk´ nkt´ l es sz´ rakoz´ sunkt´ l egyar´ nt. a a a a a a o ´ o a o a Az Internet elterjed´ s´ vel m´ g intenz´vebben erz´ kelhet˝ a sz´ m´t´ g´ p t´ rh´ d´t´ sa. A vil´ gon az ee e ı ´ e o a ıo e e o ıa a egyik legnagyobb probl´ m´ t, a t´ vols´ got hidalta at. Uzleti es mag´ nc´ l´ erintkez´ sek v´ ltak lehet˝ v´ e a a a ´ ¨ ´ a eu´ e a o e r¨ videbb id˝ alatt es hat´ konyabban, mint valaha. Adatok milli´ it kezelik es sz´ ll´tj´ k a sz´ m´t´ g´ pes o o ´ e o ´ a ı a a ıo e rendszerek. Az inform´ ci´ kon alapul´ d¨ nt´ shozatal ideje ler¨ vid¨ lt, hiszen a hozz´ f´ r´ s k¨ nnyebb´ a o o o e o u aee o e es gyorsabb´ v´ lt. Az uzleti elet szerepl˝ inek elete is felgyorsult. ´ a a ¨ ´ o ´ Ma a v´ llalatok l´ te m´ lhat az inform´ ci´ k gyors es pontos begy˝ jt´ s´ n, elemz´ s´ n, a rugalmas a e u a o ´ u ee ee fejl˝ d´ sen, valamint az innov´ ci´ n. Egyre t¨ bb fels˝ vezet˝ ismeri fel, hogy az Internet, az adatok o e a o o o o elektronikus t´ rol´ sa a v´ llalat szolg´ lat´ ba all´that´ . Az adatok azonban onmagukban nem hasznoa a a a a ´ ı o ¨ sak, hanem a bel˝ l¨ k kinyerhet˝ , a v´ llalat ig´ nyeihez igazod´ , azt kiel´ g´t˝ inform´ ci´ kra lenne ou o a e o e ıo a o sz¨ ks´ g. Ez egy ujabb sz¨ ks´ gletet teremt : egy olyan eszk¨ z ir´ nti ig´ nyt, ami k´ pes arra, hogy inu e ´ u e o a e e ´ a form´ ci´ szerz´ s c´ lj´ b´ l elemezze a nyers adatokat. Ez az uj eszk¨ z az adatb any´ szat. a o e e a o ´ o Adatb´ ny´ szati (data mining) algoritmusokat az adatb´ zisb´ l t¨ rt´ n˝ tud´ sfelt´ r´ s (knowledge a a a o o e o a aa discovery in databases) sor´ n alkalmaznak. A tud´ skinyer´ s adatb´ zisokb´ l egy olyan folyamat, a a e a o melynek sor´ n erv´ nyes, ujszer˝ , lehet˝ leg hasznos es v´ gs˝ soron erthet˝ mint´ kat fedez¨ nk fel az a ´ e ´ u o ´ e o ´ o a u adatokban. Ezt gyakran megtehetj¨ k k¨ l¨ nb¨ z˝ lek´ rdez´ sek eredm´ nyeinek vizsg´ lat´ val, azonban u uo o o e e e a a ez a megold´ s lass´ , dr´ ga es nem el´ g atfog´ . Nem is besz´ lve arr´ l, hogy az emberi szubjektivit´ s a u a ´ e ´ o e o a sokszor hib´ s, tov´ bb´ az adatb´ zisok olyan nagyok lehetnek, hogy egyes lek´ rdez´ sek elfogadhaa a a a e e tatlanul lassan futnak le. Jogos teh´ t az ig´ ny, hogy a legismertebb, leggyakoribb elemz´ st´pusokhoz a e e ı speci´ lis m´ dszereket, algoritmusokat fejlesszenek ki, amelyek gyorsan es pontosan szolg´ ltatnak a o ´ a egy objekt´v k´ pet az adatb´ zisokban tal´ lhat´ kincsr˝ l”. ı e a a o o ” Sokf´ lek´ ppen deﬁni´ lt´ k az adatb´ ny´ szatot. Felsorolunk n´ h´ nyat a legismertebbek k¨ z¨ l kie e a a a a e a o u emelve a kulszavakat : – The nontrivial extraction of implicit, previously unknown, and potentially useful information ” from data” (Piatetsky Shapiro) – . . . the automated or convenient extraction of patterns representing knowledge implicitly stored ” or captured in large databases, data warehouses, the Web, . . . or data streams.” (Han [74], xxi oldal) – . . . the process of discovering patterns in data. The process must be automatic or (more usually) ” 10

´ 1. FEJEZET. BEVEZETES Heurisztika Statisztika Algoritmus elm. Adatb´ zis elm. a Gr´ felm´ let a e Line´ ris alg. a
? -6 -

11

G´ pi tanul´ s  e a

Mesters´ ges Intelligencia e
? 6

?

Matematika

-

Alkalmaz´ s  a

¨ Uzlet Marketing Biol´ gia o Telekommunik´ ci´ a o Csillag´ szat a

Vizualiz´ ci´ a o

Adatb´ ny´ szat a a 1.1. abra. Az adatb´ ny´ szat kialakul´ sa ´ a a a semiautomatic. The patterns discovered must be meaningful. . . ” (Witten [180], 5. oldal) – . . . ﬁnding hidden information in a database.” (Dunham [48], 3. oldal) ” – . . . the process of employing one or more computer learning techniques to automatically analy” ze and extract knowledge from data contained within a database.” (Roiger, 4. oldal) Egyesek szerint az adatb´ ny´ szat, mint megnevez´ s n´ mik´ pp szerencs´ tlen [73] . Ha a a e e e e sz´ nb´ ny´ szatr´ l besz´ l¨ nk, a sz´ n b´ ny´ sz´ s´ ra gondolunk. Ezzel ellent´ tben adatb´ ny´ szat eset´ n e a a o eu e a a aa e a a e nem adatot b´ ny´ szunk, hanem — amint a p´ ld´ kban is l´ ttuk — a rejtett es sz´ munkra hasznos tud ast a a e a a ´ a ´ (inform´ ci´ t), osszef¨ gg´ seket keress¨ k egy nagy adathalmazban ( adathegyben”). a o ¨ u e u ” Az adatb´ ny´ szatot az uzleti elet es a marketing keltette eletre. M´ g ma is ezek az adatb´ ny´ szat f˝ a a ¨ ´ ´ ´ e a a o mozgat´ rug´ i. Szerencs´ re az adatb´ ny´ szat lehet˝ s´ geit egyre t¨ bb ter¨ leten ismerik fel, melynek o o e a a oe o u eredm´ nyek´ nt az alapkutat´ soknak is egy fontos eszk¨ ze lett. Alkalmazz´ k az orvosbiol´ gi´ ban, e e a o a o a genetik´ ban, t´ vk¨ zl´ sben, csillag´ szatban, . . . a a o e a Az adatb´ ny´ szat egy multi-diszciplin´ ris ter¨ let. Az 1.1 abr´ n l´ that´ , hogy mely tua a a u ´ a a o dom´ nyter¨ letek eszk¨ zeit haszn´ lja az adatb´ ny´ szat. Az adatb´ ny´ szat t¨ bb hangs´ lyt fektet az a u o a a a a a o u algoritmusokra, mint a statisztika, es t¨ bbet a modellekre, mint a g´ pi tanul´ s eszk¨ zei (pl. neur´ lis ´ o e a o a h´ l´ zatok). M´ ra az adatb´ ny´ szat akkora ter¨ lett´ n˝ tte ki mag´ t, hogy szinte lehetetlen atl´ tni maao a a a u e o a ´ a gas sz´nvonalon az eg´ szet. ı e

?

1.1. Legjelent˝ sebb adatb´ ny´ szati feladatok o a a
Feltehetj¨ k, hogy az adatb´ zis valamilyen objektumok (¨ gyfelek, betegs´ gek, v´ s´ rl´ k, teleu a u e aa o kommunik´ ci´ s esem´ nyek, . . . ) k¨ l¨ nb¨ z˝ tulajdons´ gait ´rja le. A tulajdons´ g helyett gyakran a o e uo o o a ı a 1 . Az adatb´ ny´ szat feladata a rejtett osszef¨ gg´ sek, kapcsohaszn´ ljuk majd az attrib´ tum sz´ t a u o a a ¨ u e latok felder´t´ se. Az osszef¨ gg´ sek t´pusa szerint a k¨ vetkez˝ adatb´ ny´ szati alapprobl´ m´ kr´ l ıe ¨ u e ı o o a a e a o besz´ lhet¨ nk : e u
danak.
1A

k¨ zgazd´ szok a tulajdons´ g helyett ism´ rvet, valamely tulajdons´ g konkr´ t ert´ ke helyett ism´ rv v´ ltozatot mono a a e a e ´ e e a

´ 1. FEJEZET. BEVEZETES

12

1.2. abra. Klaszterez´ s (bal oldali abra) es k¨ l¨ nc pontok keres´ se (jobb oldali abra) ´ e ´ ´ uo e ´ Gyakori mint´ k kinyer´ se : Adott objektumok egy sorozata. C´ lunk megtal´ lni a gyakran a e e a el˝ fordul´ (r´ sz-) objektumokat. Az objektumok lehetnek elemhalmazok vagy sorozatok, eseto o e leg epiz´ dok (r´ szben rendez´ sek), gr´ fok stb. o e e a ´ Attributumok k¨ z¨ tti kapcsolatok : Gyakran hasznos, ha az objektumokra ugy tekint¨ nk, mint o o ´ u az attrib´ tumok megval´ sul´ saira es keress¨ k az osszef¨ gg´ seket az attrib´ tumok k¨ z¨ tt. u o a ´ u ¨ u e u o o T¨ bbf´ le osszef¨ gg´ s l´ tezik. Ilyenek p´ ld´ ul az asszoci´ ci´ s-, korrel´ ci´ s szab´ lyok, a funko e ¨ u e e e a a o a o a cion´ lis f¨ gg˝ s´ gek es hasonl´ s´ gok. Az osztalyoz´ s is attrib´ tumok k¨ z¨ tti osszef¨ gg´ sek a u oe ´ oa a u o o ¨ u e ´ felfedez´ s´ re szolg´ l. Az oszt´ lyoz´ sn´ l egy kit¨ ntetett attrib´ tum ert´ k´ t kell megj´ solnunk ee a a a a u u ´ e e o a t¨ bbi attrib´ tum ert´ ke alapj´ n. Ezt egy modell fel´ p´t´ s´ vel teszi. Leggyakrabban a modell o u ´ e a e ıe e egy d¨ nt´ si fa, de lehet if-then szab´ lyok sorozata, valamilyen matematikai formula, vagy ak´ r o e a a egy neur´ lis h´ l´ zat stb. is. a ao Klaszterez´ s : Objektumokat el˝ re nem deﬁni´ lt csoportokba (klaszterekbe) kell sorolnunk ugy, e o a ´ hogy az egy csoportba tartoz´ objektumok hasonl´ ak legyenek, m´g a k¨ l¨ nb¨ z˝ csoportba o o ı uo o o ker¨ ltek k¨ l¨ nb¨ zzenek egym´ st´ l. K´ t pont hasonl´ s´ g´ t egy el˝ re megadott (t´ vols´ gszer˝ ) u uo o a o e oa a o a a u f¨ ggv´ ny seg´ts´ g´ vel szok´ s ertelmezni. u e ı e e a ´ Sorozatelemz´ s : A sorozatelemz´ sbe t¨ bbf´ le adatb´ ny´ szati feladat tartozik. Kereshet¨ nk e e o e a a u egym´ shoz hasonl´t´ (ak´ r r´ sz-) sorozatokat. Ezen k´v¨ l elemezhetj¨ k a sorozat alakul´ s´ t, a ıo a e ı u u aa es k¨ l¨ nb¨ z˝ regresszi´ s m´ dszerekkel pr´ b´ lhatjuk megj´ solni a j¨ v˝ beli val´ sz´n˝ leg ´ uo o o o o o a o o o o ı u el˝ fordul´ esem´ nyeket. o o e Elt´ r´ selemz´ s : Azokat az elemeket, amelyek nem felelnek meg az adatb´ zis altal´ nos jele e e a ´ a lemz˝ inek, tulajdons´ gaik nagy m´ rt´ kben elt´ r az altal´ nost´ l k ul¨ nc pontoknak nevezz¨ k. A o a e e e ´ a o ¨o u legt¨ bb adatb´ ny´ szati algoritmus az ilyen k¨ l¨ nc pontoknak nem tulajdon´t nagy jelent˝ s´ get, o a a uo ı oe legt¨ bbsz¨ r zajnak vagy kiv´ telnek kezeli oket. Azonban az elet egyre t¨ bb ter¨ let´ n mer¨ l o o e ˝ ´ o u e u fel az ig´ ny, hogy eppen az ilyen k¨ l¨ nc pontokat tal´ ljuk meg. Elt´ r´ selemz´ s f˝ bb alkale ´ uo a ee e o maz´ si ter¨ lete a m´ sol´ s-, koppint´ skeres´ s tov´ bb´ a csal´ sok, vissza´ l´ sek, v´rusok, haca u a a a e a a a ee ı kert´ mad´ sok kisz˝ r´ se. a a ue Webes adatb´ ny´ szat : Az Interneten ori´ si adatt¨ meg tal´ lhat´ , ´gy az Interneten alapul´ ina a ´ a o a o ı o form´ ci´ -kinyer˝ algoritmusok is az adatb´ ny´ szat ter¨ let´ hez tartoznak. A jegyzetben sz´ a o o a a u e o lesz intelligensebb keres´ sr˝ l, oldalak rangsorol´ s´ r´ l, illetve hasonl´ tartalm´ oldalak mege o aao o u tal´ l´ s´ r´ l. aa ao

´ 1. FEJEZET. BEVEZETES

13

El˝ fordulhat, hogy az adatb´ ny´ szati rendszer, m´ g megfelel˝ en megv´ lasztott param´ terek melo a a e o a e lett is, t´ l sok szab´ lyt, osszef¨ gg´ st t´ r fel. Az egyik legnehezebb k´ rd´ s az, hogy ezek k¨ z¨ l meu a ¨ u e a e e o u ´ lyek az erdekesek. Erdekess´ gi mutat´ kr´ l altal´ noss´ gban nem sok mondhat´ el, mert a k¨ l¨ nb¨ z˝ ´ e o o ´ a a o uo o o felhaszn´ l´ si ter¨ leteken m´ s-m´ s minta lehet hasznos. Megk¨ l¨ nb¨ ztet¨ nk szubjekt´v es objekt´v aa u a a uo o u ı ´ ı erdekess´ gi mutat´ kat. Egy minta mindenk´ ppen erdekes, ha meglep˝ , azaz eddigi tud´ sunknak el´ e o e ´ o a lentmond, vagy ujszer˝ , azaz tud´ sunkat kieg´ sz´ti. Ugyanakkor egy inform´ ci´ csak akkor erdekes, ´ u a e ı a o ´ ha felhaszn´ lhat´ , azaz tudunk valamit kezdeni vele [158]. Azt, hogy egy szab´ ly mennyire meglep˝ a o a o – t¨ bb-kevesebb sikerrel – tudjuk formaliz´ lni. Az ujszer˝ s´ gr˝ l es a felhaszn´ lhat´ s´ gr´ l azonban o a ´ ue o ´ a oa o csak a ter¨ let szak´ rt˝ je tud nyilatkozni. u e o Annak ellen´ re, hogy az adatb´ ny´ szat egy uj ter¨ let, a fentiekb˝ l l´ that´ , hogy r´ gi, m´ r ise a a ´ u o a o e a mert probl´ m´ kat is mag´ ba foglal. Gondoljunk itt arra, hogy klaszterez˝ algoritmusokat m´ r a 60-as e a a o a evekben is javasoltak, vagy arra, hogy az oszt´ lyoz´ s feladat´ t f¨ ggv´ ny approxim´ ci´ k´ nt is felfog´ a a a u e a o e hatjuk, aminek irodalm´ val t¨ bb k¨ nyvespolcot is meg lehetne t¨ lteni 2 . Teh´ t az adatb´ ny´ szatban a o o o a a a gyakran nem maga a probl´ ma uj, hanem az adatok m´ rete, tov´ bb´ az a k¨ vetelm´ ny, hogy az egyes e ´ e a a o e algoritmusok fut´ si ideje olyan r¨ vid legyen, hogy az eredm´ nyek a gyakorlatban elfogadhat´ id˝ n a o e o o bel¨ l erkezzenek. Az alkalmaz´ sokban nem ritk´ k a giga- s˝ t terab´ jt nagys´ g´ adathalmazok. A u ´ a a o a a u [49] ´r´ sban p´ ld´ ul egy besz´ mol´ t olvashatunk egy bank adatb´ zis´ nak elemz´ s´ r˝ l adatb´ ny´ szati ıa e a a o a a eeo a a eszk¨ z¨ kkel, ahol az ugyfelek sz´ ma el´ rte a 190 milli´ t az adatok m´ rete pedig a 4 TB-ot. Ilyen o o ¨ a e o e m´ retek mellett m´ r kvadratikus l´ p´ sig´ ny˝ algoritmusokat sem engedhet¨ nk meg. L´ tni fogjuk, e a e e e u u a hogy a legt¨ bb adatb´ ny´ szati algoritmus a teljes adatb´ zist kev´ s alkalommal olvassa v´ gig. o a a a e e Sk´ l´ zhat´ (scalable) es hat´ kony (efﬁcient) algoritmusokat keres¨ nk, amelyek megbirk´ znak aa o ´ e u o nagy m´ ret˝ adatb´ zisokkal. Elv´ rjuk, hogy az adatb´ zis fontosabb param´ tereinek ismeret´ ben az e u a a a e e algoritmusok fut´ si ideje megj´ solhat´ legyen. Az ori´ si mem´ riam´ retek miatt a legt¨ bb elema o o ´ a o e o zend˝ adatb´ zis – megfelel˝ atalak´t´ sokkal – val´ sz´n˝ leg elf´ r a mem´ ri´ ban, de m´ gis sokszor o a o ´ ıa o ı u e o a e azt felt´ telezz¨ k, hogy az adat a h´ tt´ rt´ ron tal´ lhat´ . e u a e a a o Az adatb´ zisok m´ ret´ nek n¨ veked´ se miatt egyre fontosabbak a p´ rhuzamos´that´ algoritmusok a e e o e a ı o (l´ sd p´ ld´ ul part´ci´ s algoritmus r´ sz). Ezek az adatb´ zist r´ szekre osztj´ k, majd az egyes r´ szeket a e a ı o e a e a e k¨ l¨ n mem´ ri´ val es h´ tt´ rt´ rral rendelkez˝ egys´ gek dolgozz´ k fel, es v´ g¨ l egy kit¨ ntetett egys´ g uo o a ´ a e a o e a ´ e u u e egyes´ti a r´ szeredm´ nyeket. Szint´ n a m´ retn¨ veked´ s az oka azon algoritmusok n´ pszer˝ s´ g´ nek, ı e e e e o e e ue e amelyek fut´ si ideje nagy m´ rt´ kben cs¨ kkenthet˝ valamilyen el˝ zetes inform´ ci´ k (p´ ld´ ul kor´ bbi a e e o o o a o e a a fut´ si eredm´ nyek) ismeret´ ben (l´ sd asszoci´ ci´ s szab´ lyok karbantart´ sa r´ sz). a e e a a o a a e

1.2. A tud´ sfelt´ r´ s folyamata a a a
A tud´ skinyer´ s folyamata sor´ n 6-10 f´ zist szok´ s elk¨ l¨ n´teni [56, 74] att´ l f¨ gg˝ en, hogy mely a e a a a uo ı o u o l´ p´ seket vonjuk ossze (tekinthetj¨ k p´ ld´ ul az 1.3 abr´ t) : e e ¨ u e a ´ a I. Az alkalmaz´ si ter¨ let felt´ r´ sa es meg´ rt´ se, fontosabb el˝ zetes ismeretek begy˝ jt´ se, es a a u aa ´ e e o u e ´ felhaszn´ l´ si c´ lok meghat´ roz´ sa. aa e a a II. C´ ladatb´ zis l´ trehoz´ sa : kiv´ lasztani a haszn´ lni k´v´ nt adatb´ zist, (vagy annak csak egy e a e a a a ı a a r´ sz´ t), amib˝ l a tud´ st ki akarjuk nyerni. e e o a
2 Vannak olyan eredm´ nyek is, amelyeket egym´ st´ l f¨ ggetlen¨ l megkaptak az adatb´ ny´ szat es a statisztika kutat´ i is. e a o u u a a ´ o P´ ld´ ul d¨ nt´ si f´ k el˝ all´t´ s´ r´ l ´rt n´ gy statisztikus egy k¨ zismert k¨ nyvet [25]. Ek¨ zben egy jeles adatb´ ny´ sz kutat´ e a o e a o´ ı a a o ı e o o o a a o J. Ross Quinlan d¨ nt´ si fa el˝ all´t´ szoftvert k´ sz´tett. A k´ t kutat´ sban sok k¨ z¨ s m´ dszer lelhet´ fel. o e o´ ı o e ı e a o o o o

´ 1. FEJEZET. BEVEZETES
értelmezés és értékelés adatbányászat

14

tudás

csökkentés és transzformáció minták tisztítás

kiválasztás tisztított adat

transzformált adat

forrás adat

adat

1.3. abra. A tud´ sfelt´ r´ s folyamata ´ a aa III. Adattiszt´t´ s : itt olyan alapvet˝ oper´ ci´ kat ert¨ nk, mint a t´ ves bejegyz´ sek elt´ vol´t´ sa, ıa o a o ´ u e e a ıa hi´ nyos mez˝ k p´ tl´ sa, zajok sz˝ r´ se stb. Zajon az adatba ep¨ lt v´ letlen hib´ t ert¨ nk. Vannak a o o a ue ´ u e a ´ u zajok, amelyeket egysz˝ felfedezni es jav´tani. P´ ld´ ul sztring ert´ k ott, ahol sz´ mot v´ runk, u ´ ı e a ´ e a a vagy felsorol´ s t´pus´ attrib´ tumn´ l erv´ nytelen ert´ k tal´ lhat´ . Sajnos sok esetben a hiba a ı u u a ´ e ´ e a o eszrev´ tlen marad (p´ ld´ ul 0.53 helyett 0.35 ert´ k g´ pel´ se). ´ e e a ´ e e e IV. Adatintegr´ ci´ : a feldolgoz´ s sz´ m´ ra fontos, esetleg elosztott adatb´ zisok egyes´t´ se. a o a a a a ıe Az harmadik es negyedik egy¨ tt gyakran nevezik az adatok el˝ feldolgoz´ s´ nak. A ´ u o aa k¨ l¨ nb¨ z˝ forr´ sb´ l vett adatok integr´ ci´ ja sor´ n sok probl´ m´ ba utk¨ zhet¨ nk. A k¨ l¨ nb¨ z˝ uo o o a o a o a e a ¨ o u uo o o oszt´ lyok k¨ l¨ nb¨ z˝ m´ don t´ rolj´ k adataikat, k¨ l¨ nb¨ z˝ konvenci´ kat k¨ vetnek, k¨ l¨ nb¨ z˝ a uo o o o a a uo o o o o uo o o m´ rt´ kegys´ geket, els˝ dleges kulcsokat es elnevez´ st haszn´ lhatnak es k¨ l¨ nf´ le hib´ k lehete e e o ´ e a ´ uo e a nek jelen. Az eg´ sz c´ get atfog´ adatintegr´ ci´ t adatt´ rh´ zban t´ rolj´ k, mely egy speci´ lis, az e e ´ o a o a a a a a 3 elemz´ st t´ mogat´ adatb´ zis. e a o a
h´ tk¨ znapi” m˝ k¨ d´ st t´ mogat´ operat´v adatb´ zis, es az adatt´ rh´ zak k¨ z¨ tti k¨ l¨ nbs´ gre egy szeml´ letes p´ lda e o u o e a o ı a ´ a a o o uo e e e ” az al´ bbi [30]: Ha tudni szeretn´ nk Kis J´ nos aktu´ lis sz´ mlaegyenleg´ t, akkor ezt egy operat´v adatb´ zis alapj´ n pontosan a e a a a e ı a a es gyorsan meg tudjuk hat´ rozni. Egy atfog´ bb” k´ rd´ s — p´ ld´ ul: Hogyan alakultak az ugyfelek bankban elhelyezett ´ a ´ o e e e a ¨ ” ” megtakar´t´ sai az elm´ lt 12 h´ napban?” — megv´ laszol´ sa egy operat´v adatb´ zis eset´ n bonyolult lehet, es sok ideig ıa u o a a ı a e ´ tarthat. Egy adatt´ rh´ z az ut´ bbi k´ rd´ sre gyors v´ laszt tud adni, t´ mogatva ez´ ltal a d¨ nt´ shoz´ kat. A v´ lasz azonban a a o e e a a a o e o a nem teljesen pontos: ha d´ lut´ n 4-kor k´ rdezz¨ k le az ut´ bbi 12 h´ napbeli megtakar´t´ sokat, abban m´ g nem biztos, hogy e a e u o o ıa e benne lesz Kis J´ nos aznap d´ lel˝ tt lek¨ t¨ tt bet´ tje. Az adatt´ rh´ z adatai teh´ t nem felt´ tlen¨ l abszol´ t frissek, nyilv´ n a e o oo e a a a e u u a sz¨ ks´ ges azonban a periodikus friss´t´ s¨ k. Adatt´ rh´ zak alkalmaz´ sakor a trendek, folyamatok elemz´ se a c´ l. Az, hogy u e ıe u a a a e e nem az aktu´ lisan legfrisebb adatokkal dolgozunk, altal´ ban nem okoz gondot, felt´ ve, hogy a legut´ bbi friss´t´ s ota nem a ´ a e o ıe ´ k¨ vetkezett be radik´ lis v´ ltoz´ s. Ugyanakkor Kis J´ nos nyilv´ n nem or¨ lne, ha a bet´ t elhelyez´ se ut´ n este lek´ rdezve o a a a a a ¨ u e e a e
3A

´ 1. FEJEZET. BEVEZETES V. Adatt´ r cs¨ kkent´ s : az adatb´ zisb´ l a c´ l szempontj´ b´ l fontos attrib´ tumok kiemel´ se. e o e a o e a o u e

15

VI. Adatb´ ny´ szati algoritmus t´pus´ nak kiv´ laszt´ sa : eld¨ nteni, hogy a megoldand´ feladat klasza a ı a a a o o terez´ s, vagy szab´ ly-, illetve mintakeres´ s, esetleg oszt´ lyoz´ s. e a e a a VII. A megfelel˝ adatb´ ny´ szati algoritmus meghat´ roz´ sa. El˝ nyeinek, h´ tr´ nyainak, pao a a a a o a a ram´ tereinek vizsg´ lata, fut´ si id˝ - es mem´ riaig´ ny elemz´ se. e a a o ´ o e e VIII. Az algoritmus alkalmaz´ sa. a IX. A kinyert inform´ ci´ ertelmez´ se, esetleg visszat´ r´ s az el˝ z˝ l´ p´ sekhez tov´ bbi ﬁnom´t´ sok a o´ e ee o o e e a ıa c´ lj´ b´ l. e a o X. A megszerzett tud´ s meger˝ s´t´ se : osszevet´ s elv´ r´ sokkal, el˝ zetes ismeretekkel. Eredm´ nyek a o ıe ¨ e aa o e dokument´ l´ sa es atad´ sa a felhaszn´ l´ nak. Egy adatb´ ny´ szati elemz´ s eredm´ nye akkor nem aa ´ ´ a ao a a e e ” felel meg az elv´ r´ sainknak”, ha nem siker¨ l semmilyen uj, hasznos es term´ szetesen val´ s aa u ´ ´ e o osszef¨ gg´ st felt´ rni. Ennek nyilv´ n t¨ bb oka is lehet, a k¨ vetkez˝ kben k´ t p´ ld´ t mutatunk ¨ u e a a o o o e e a [30]. 1. El˝ fordulhat, hogy rosszul v´ lasztottuk meg az elemz´ shez (adatb´ ny´ szathoz) haszn´ lt o a e a a a algoritmust vagy ennek param´ tereit, es egy m´ sik elj´ r´ ssal (vagy m´ s param´ terekkel) e ´ a aa a e tal´ lni fogunk valamilyen erdekes osszef¨ gg´ st. Szeml´ letesen sz´ lva : m´ s oldalr´ l a ´ ¨ u e e o a o r´ n´ zve az adathegyre, lehet, hogy l´ tunk rajta valami erdekeset. a e a ´ 2. Term´ szetesen az is lehets´ ges, hogy az adatok egy´ ltal´ n nem rejtenek semmif´ le uj, a e e a a e ´ gyakorlatban hasznos´that´ osszef¨ gg´ st. Ekkor — sajnos — teljesen el˝ r˝ l kell kezdeni ı o¨ u e oo a folyamatot, uj adatok gy˝ jt´ s´ vel. ´ u ee A sikeres adatb´ ny´ szati projektekben az els˝ 5 l´ p´ s teszi ki az id˝ - es p´ nzr´ ford´t´ sok legal´ bb a a o e e o ´ e a ıa a 80%-´ t. Ha a c´ lok nem kell˝ k´ ppen atgondoltak es a b´ ny´ szand´ adatok nem el´ g min˝ s´ giek, a e o e ´ ´ a a o e oe akkor k¨ nnyen el˝ fordulhat, hogy az adatb´ ny´ sz csak vakt´ ban dolgozik es a kinyert inform´ ci´ nak o o a a a ´ a o tulajdonk´ ppen semmi haszna sincs. A tud´ sfelt´ r´ s sor´ n elengedhetetlen, hogy az adatb´ ny´ sz es e a aa a a a ´ az alkalmaz´ si ter¨ let szak´ rt˝ je szorosan egy¨ ttm˝ k¨ dj¨ n, a projekt minden f´ zis´ ban ellen˝ rizz´ k a u e o u u o o a a o e a betartand´ ir´ nyvonalakat. N´ zz¨ nk erre egy p´ ld´ t : ha adatb´ ny´ szati eszk¨ z¨ kkel siker¨ l kimuo a e u e a a a o o u tatni, hogy X betegs´ ggel gyakran egy¨ ttj´ r Y betegs´ g is, a kutat´ orvos k´ pes eld¨ nteni azt, hogy ez e u a e o e o val´ ban ´gy van-e : megvizsg´ lhatja, hogy ugyanezen osszef¨ gg´ s m´ s adathalmaz eset´ n is fenn´ ll-e o ı a ¨ u e a e a (esetleg direkt ebb˝ l a c´ lb´ l gy˝ jt adatot). Ha igen, akkor kider´theti azt, hogy az egyik betegs´ g o e o u ı e sor´ n keletkezik-e olyan k´ miai anyag, vagy elszaporodott-e olyan k´ rokoz´ , mely hozz´ j´ rul a a e o o aa m´ sik betegs´ g kialakul´ s´ hoz. Ezek alapj´ n azt mondhatjuk, hogy az adatb´ ny´ sz tippeket” ad a a e aa a a a ” kutat´ orvosoknak. Ezen tippek” jelent˝ ss´ g´ t nem szabad al´ becs¨ ln¨ nk : ezek ovhatj´ k meg a kuo o e e a u u ´ a ” tat´ orvost att´ l, hogy — szeml´ letesen fogalmaza — rossz helyen tapogat´ zzon”. Az adatb´ ny´ szat o o e o a a ” teh´ t els˝ sorban uj, ´g´ retes hipot´ zisekkel j´ rulhat hozz´ a k¨ zeg´ szs´ g¨ gyi kutat´ sokhoz. a o ´ ı e e a a o e e u a A k¨ vetkez˝ val´ s p´ lda is az adatb´ ny´ sz es a kutat´ orvos szerep´ t szeml´ lteti. Egy adatb´ ny´ sz o o o e a a ´ o e e a a az eletm´ dra es a megbeteged´ sekre vonatkoz´ adatokat elemezve juthat arra a k¨ vetkeztet´ sre, ´ o ´ e o o e hogy a prosztatar´ k osszef¨ gg a szenesed´ sig s¨ t¨ tt h´ s fogyaszt´ s´ val. Ezzel ir´ nyt mutat” a kua ¨ u e uo u aa a ” tat´ orvosnak, aki a h´ tt´ rben rejl˝ k´ miai reakci´ kat es azok biol´ giai k¨ vetkezm´ nyeit t´ rja fel. Ez o a e o e o ´ o o e a
sz´ ml´ j´ t nem l´ tn´ ” a p´ nz´ t, mert a periodikus friss´t´ s csak hetene egyszer esed´ kes: az o ig´ nyeinek nyilv´ n az a aa a a e e ıe e ˝ e a ” operat´v adatb´ zis felel meg. ı a

´ 1. FEJEZET. BEVEZETES

16

a konkr´ t esetben l´ nyeg´ ben ´gy is t¨ rt´ nt : el˝ bb t´ rt´ k fel a j´ l ats¨ tott h´ s fogyaszt´ sa es a prosze e e ı o e o a a o ´ u u a ´ tatar´ k gyakoris´ ga k¨ z¨ tti osszef¨ gg´ st, majd megtal´ lt´ k a h´ s s¨ t´ skor keletkez˝ PhIP vegy¨ letet a a o o ¨ u e a a u ue o u es kimutatt´ k, hogy hat´ s´ ra prosztatar´ k alakulhat ki [82]. ´ a aa a Ez a jegyzet az 6. es 7. l´ p´ seket veszi szem¨ gyre : rendelkez´ s¨ nkre all egy adatb´ zis, tudjuk, ´ e e u eu ´ a milyen jelleg˝ inform´ ci´ ra van sz¨ ks´ g¨ nk, es az adatb´ ny´ sz feladata, hogy ennek megold´ s´ ra u a o u e u ´ a a aa min´ l gyorsabb es pontosabb algoritmust adjon. e ´ ´ anosabban k´ tf´ le adatb´ ny´ szati tev´ kenys´ get k¨ l¨ n´t¨ nk el : Altal´ e e a a e e uo ıu Felt´ r´ s : A felt´ r´ s sor´ n az adatb´ zisban tal´ lhat´ mint´ kat keress¨ k meg. A mint´ k legt¨ bbsz˝ r az a a aa a a a o a u a o o altal´ nos trendeket/szok´ sokat/jellemz˝ ket ´rj´ k le, de vannak olyan alkalmaz´ sok is (p´ ld´ ul ´ a a o ı a a e a csal´ sfelder´t´ s), ahol eppen az altal´ nost´ l elt´ r˝ /nem v´ rt mint´ kat keress¨ k. a ıe ´ ´ a o eo a a u El˝ rejelz´ s : Az el˝ rejelz´ sn´ l a felt´ rt mint´ k alapj´ n pr´ b´ lunk k¨ vetkeztetni a j¨ v˝ re. P´ ld´ ul egy o e o e e a a a o a o o o e a elem ismeretlen ert´ keit pr´ b´ ljuk el˝ rejelezni az ismert ert´ kek es a felt´ rt tud´ s alapj´ n. ´ e o a o ´ e ´ a a a N´ gy fontos elv´ r´ sunk van a megszerzett tud´ ssal kapcsolatban : (1) legyen k¨ nnyen erthet˝ , e aa a o ´ o (2) erv´ nyes, (3) hasznos es (4) ujszer˝ . Az erv´ nyess´ g eld¨ nt´ se a ter¨ let szak´ rt˝ je mellett az ´ e ´ ´ u ´ e e o e u e o adatb´ ny´ sz (esetleg statisztikus) feladata is. El˝ fordulhat, hogy helyes modellt adtunk, az algorita a o mus is j´ l m˝ k¨ d¨ tt, m´ gis a kinyert szab´ ly nem fedi a val´ s´ got. Bonferroni t´ tele arra ﬁgyelmezo u o o e a oa e tet benn¨ nket, hogy amennyiben a lehets´ ges k¨ vetkeztet´ sek sz´ ma t´ l nagy, akkor egyes k¨ vetu e o e a u o keztet´ sek t´ nyleges val´ s´ gtartalom n´ lk¨ l igaznak mutatkoznak, tiszt´ n statisztikai megfontol´ sok e e oa e u a a alapj´ n. Az egyik legjobb p´ lda a val´ s´ gtartalom n´ lk¨ li szab´ ly kinyer´ s´ re az al´ bbi megt¨ rt´ nt a e oa e u a ee a o e eset. Amerik´ ban a Dow Jones atlag becsl´ s´ hez keresni kezdt´ k azt a term´ ket, amely ar´ nak alaa ´ ee e e ´a kul´ sa legink´ bb hasonl´tott a Dow Jones atlag alakul´ s´ hoz. A kapott term´ k a bangladesi gyapot a a ı ´ aa e volt. Az adatok illetve a kinyert inform´ ci´ k megjelen´t´ s´ nek m´ dja legal´ bb annyira fontos, mint a o ıe e o a az osszef¨ gg´ sek meghat´ roz´ sa. A v´ gfelhaszn´ l´ kat (akik altal´ ban vezet˝ k) jobban megragad¨ u e a a e ao ´ a o ja egy j´ l elk´ sz´tett abra, mint k¨ l¨ nb¨ z˝ matematikai strukt´ r´ k nyers t´ lal´ sa. A megjelen´t´ s o e ı ´ uo o o ua a a ıe teh´ t fontos r´ sze az adatb´ ny´ szatnak. Ezt j´ l igazolja, hogy nagy sikert k¨ nyvelnek el az olyan a e a a o o adatb´ ny´ szati szoftverek, amelyek adatb´ ny´ szati algoritmusokat nem is futtatnak, puszt´ n az adaa a a a a tokat jelen´tik meg intelligens m´ don (h´ romdimenzi´ s, sz´nes, forgathat´ abr´ k). Ezekn´ l a rendı o a o ı o´ a e szerekn´ l az osszef¨ gg´ seket, mint´ zatokat, k¨ z¨ s tulajdons´ ggal rendelkez˝ csoportokat maguk a e ¨ u e a o o a o felhaszn´ l´ k veszik eszre. Az adatb´ ny´ szati szoftverekr˝ l r´ szletesebben a 16. fejezetben olvashaao ´ a a o e tunk.

1.3. Adatb´ ny´ szat kontra statisztika a a
Neh´ z deﬁni´ lni, hogy egy feladat es annak megold´ sa mikor tartozik a statisztika es mikor az e a ´ a ´ adatb´ ny´ szat fels´ gter¨ lete al´ . A statisztika t¨ bb hangs´ lyt fektet hipot´ zisek vizsg´ lat´ ra, m´g a a e u a o u e a a ı az adatb´ ny´ szatban a hipot´ zisek megtal´ l´ s´ nak m´ dja all a k¨ z´ ppontban. Az adatb´ ny´ szat egy a a e aa a o ´ o e a a gyakorlatorient´ lt ter¨ let, kevesebb s´ lyt kapnak (sajnos) az elm´ leti elemz´ sek. Viszont k¨ zponti a u u e e o k´ rd´ s egy algoritmus fut´ si ideje es mem´ riaig´ nye. Az adatb´ ny´ szati algoritmusok bemutat´ sa e e a ´ o e a a a sor´ n kit´ r¨ nk az adatstrukt´ r´ lis es ak´ r implement´ ci´ s k´ rd´ sekre is. a eu ua ´ a a o e e Sok kutat´ az adatb´ ny´ szatot nem k¨ l¨ nb¨ zteti meg a g´ pi tanul´ st´ l. Elv´ gre a g´ pi tanul´ sn´ l o a a uo o e a o e e a a is adatok alapj´ n tanul meg egy koncepti´ t a g´ p. Cinikusok szerint az adatb´ ny´ szat nem m´ s, mint a o e a a a statisztika plusz egy kis marketing. Val´ ban, nincs eles hat´ r k¨ zt¨ k. Ugy altal´ ban besz´ lhet¨ nk adat o ´ a o u ´ ´ a e u

´ 1. FEJEZET. BEVEZETES

17

1.4. abra. Egy jellegzetes adatb´ ny´ szati feladat : DNS-szekvenci´ k elemz´ se ´ a a a e

elemz˝ tehnik´ kr´ l. Egyes adat elemz˝ technik´ kat ink´ bb adatb´ ny´ szati m´ dszernek mondunk, o a o o a a a a o m´ sokat pedig a statisztik´ hoz vagy a g´ pi tanul´ shoz sorolunk. a a e a A 20 sz´ zad m´ sodik fel´ t˝ l egyre jellemz˝ bb a tudom´ nyra, hogy bizonyos klasszikus elm´ let a a eo o a e kiragad es uj kutat´ si ter¨ letnek ki´ ltj´ k ki. Ugyanigy van ezzel a marketing ; ugyanazt a term´ ket ´ ´ a u a a e egyszer csak uj, hangzatosabb n´ vvel kezdik el ert´ kes´teni. A tudom´ nyban is a kutat´ si feladatokat ´ e ´ e ı a a el kell adni a p´ ly´ zatokat b´r´ l´ zs˝ riknek es az uj n´ vvel ell´ tot tudom´ nyter¨ let uj ir´ nyokat sugall ; a a ıao u ´ ´ e a a u ´ a az uj ir´ nyzatok es elbeli kutat´ sok pedig nagy t´ mogat´ st kapnak. Ez a t´ ny jelent˝ sen hozz´ j´ rult ´ a ´ ´ a a a e o aa az adatb´ ny´ szat elterjed´ s´ hez es az egyes adatelemz˝ feladatok ”adatb´ ny´ szati” c´mk´ vel val´ a a ee ´ o a a ı e o ell´ t´ s´ hoz. aa a Adatb´ ny´ szathoz soroljuk a klaszterz´ s, oszt´ lyoz´ s, asszoci´ ci´ s szab´ lykinyer´ s es az a a e a a a o a e ´ id˝ sorelemz´ s nem klasszikus (pl. regresszi´ sz´ m´t´ s, sim´t´ s) feladatait. A k¨ vetkez˝ kben n´ h´ ny o e o a ıa ıa o o e a p´ ld´ n kereszt¨ l szeml´ ltj¨ k az adatb´ ny´ szat es a statisztika k¨ z¨ tti k¨ l¨ nbs´ get es egyben a k´ t e a u e u a a ´ o o uo e ´ e ter¨ let rokons´ g´ t is [30]. u a a I. Tegy¨ k fel, hogy egy adatb´ zisban sokmilli´ ember DNS-szekvenci´ it es tulajdons´ gait u a o a ´ a t´ roljuk. Egy jellegzetes statisztikai k´ rd´ s lehet az, hogy p´ ld´ ul a k´ k szem˝ emberek a e e e a e u mekkora r´ sz´ re jellemz˝ egy adott DNS-szekvencia. Term´ szetesen olyan k´ rd´ st is feltee e o e e e het¨ nk, melynek megv´ laszol´ sa enn´ l kiﬁnomultabb eszk¨ z¨ tt´ rat ig´ nyel : ha azt szeretn´ nk u a a e o o a e e tudni, van-e szigniﬁk´ ns f¨ gg´ s egy adott DNS-szekvencia megl´ te es a k´ k szem” tulaja u e e ´ e ” dons´ g k¨ z¨ tt, statisztikai pr´ b´ t alkalmazhatunk ennek eld¨ nt´ s´ re. Egy adatb´ ny´ sz nem a o o o a o ee a a k´ rdezne r´ egy konkr´ t szekvencia es egy konkr´ t tulajdons´ g k¨ z¨ tti osszef¨ gg´ sre, hanem e a e ´ e a o o ¨ u e egy altal´ nosabb k´ rd´ st tenne fel, p´ ld´ ul azt, hogy milyen osszef¨ gg´ s van a tulajdons´ gok ´ a e e e a ¨ u e a es szekvenci´ k k¨ z¨ tt, melyik tulajdons´ g´ rt melyik szekvencia felel˝ s ? ´ a o o a e o II. Egy m´ sik p´ lda az adatb´ ny´ szat es statisztika k¨ z¨ tti k¨ l¨ nbs´ gre az al´ bbi : egy statisza e a a ´ o o uo e a tikai elemz´ s sor´ n megvizsg´ lhatjuk, hogy a n˝ k illetve f´ rﬁak h´ ny sz´ zal´ ka doh´ nyzik, e a a o e a a e a

´ 1. FEJEZET. BEVEZETES

18

fogyaszt rendszeresen nagy mennyis´ gben alkoholt, van-e szigniﬁk´ ns elt´ r´ s a k´ t csoport e a ee e k¨ z¨ tt. Egy adatb´ ny´ szati elemz´ s sor´ n itt is altal´ nosabb k´ rd´ st tenn´ nk fel, p´ ld´ ul azt, o o a a e a ´ a e e e e a hogy milyen jellegzetes csoportok vannak az alkoholfogyaszt´ sra es doh´ nyz´ sra n´ zve ? Teh´ t a ´ a a e a azt nem mondjuk meg el˝ re, hogy az egyik csoportba a n˝ k, a m´ sikba pedig a f´ rﬁak tartoznak. o o a e Az adatb´ ny´ sz feladata, hogy ugy csoportos´tsa az embereket (rekordokat), hogy a hasonl´ k a a ´ ı o egy csoportba, a k¨ l¨ nb¨ z˝ k pedig k¨ l¨ nb¨ z˝ csoportba ker¨ ljenek. (Ez egy klaszterez´ si feluo o o uo o o u e adat.) Az adatb´ ny´ szatban az ilyen feladatokat nem hosszas emberi munka es intu´ci´ ar´ n a a ´ ı o´a oldjuk meg, hanem t¨ reksz¨ nk a min´ l nagyobb fok´ automatiz´ l´ sra kiﬁnomult szoftverek alo u e u aa kalmaz´ s´ val. Eredm´ nyk´ nt k¨ nnyen lehet, hogy nem a nemek szerinti csoportos´t´ st kapjuk, aa e e o ıa hanem egy olyat, melyben ugyanazon csoportokba f´ rﬁak es n˝ k is ker¨ ltek, akik — egy´ b e ´ o u e 4 tulajdons´ gaik alapj´ n — hasonl´ ak. a a o III. Az el˝ bbi p´ ld´ ban term´ szetesen m´ s ir´ nyba is altal´ nos´thatjuk” a statisztikai elemz´ s sor´ n o e a e a a ´ a ı e a ” feltett k´ rd´ s¨ nket : lehet, hogy arra vagyunk k´v´ ncsiak, hogy mi a k¨ l¨ nbs´ g a f´ rﬁak es a e eu ı a uo e e ´ n˝ k k¨ z¨ tt. Ismerj¨ k teh´ t a k´ t csoportot, de nem tudjuk, hogy mely tulajdons´ gok vagy tuo o o u a e a lajdons´ gkombin´ ci´ k jellemz˝ ek egy-egy csoportra. Ekkor egy oszt´ lyoz´ si feladattal allunk a a o o a a ´ szemben, a csoportokat oszt´ lyoknak nevezz¨ k. Ezt a k´ rd´ st egy´ bk´ nt fel is tett¨ k a Semmela u e e e e u weis Egyetem hallgat´ inak k¨ r´ ben v´ gzett egyik felm´ r´ s adatb´ zis´ n. Az eredm´ ny az 1.5. o oe e ee a a e abr´ n l´ that´ . Ez egy d¨ nt´ si fa. A levelek az oszt´ lyoknak (n˝ k illetve f´ rﬁak) felelnek meg. A ´ a a o o e a o e fa k¨ zb¨ ls˝ csom´ pontjaiban egy-egy attrib´ tum (adatt´ blabeli oszlop) neve l´ that´ . A fa egy o u o o u a a o csom´ pontj´ b´ l kiindul´ agak az adott csom´ ponthoz tartoz´ attrib´ tum egy-egy lehets´ ges o a o o ´ o o u e ert´ k´ nek felelnek meg. Egy d¨ nt´ si fa azt mutatja meg, hogy ha nem ismern´ nk, hogy egy ´ e e o e e rekord melyik oszt´ lyba tartozik, akkor hogyan d¨ nthetn´ nk ezt el. P´ ld´ ul a fogamz´ sg´ tl´ t a o e e a a a o szed˝ hallgat´ k n˝ k (pontosabban : azon rekordok, amelyek FOGAMZASGA attrib´ tuma 1” o o o u ” ert´ k˝ , a n˝ i hallgat´ k oszt´ ly´ ba tartoznak).5 ´ e u o o a a

1.4. Sikeres alkalmaz´ sok a
Az adat b´ ny´ szata” eredetileg statisztikusok altal haszn´ lt kifejez´ s, az adatok nem kell˝ k´ ppen a a ´ a e o e ” megalapozott felhaszn´ l´ s´ ra, amely sor´ n valaki helytelen k¨ vetkeztet´ st von le. Igaz ugyanis, aa a a o e hogy tetsz˝ leges adathalmazban felfedezhet¨ nk valamilyen strukt´ r´ t, ha el´ g sok´ ig n´ zz¨ k az adao u ua e a e u tot. Ism´ t utalunk a lehets´ ges k¨ vetkeztet´ sek nagy sz´ m´ b´ l ered˝ vesz´ lyre. A helytelen k¨ vete e o e a a o o e o keztet´ sre az egyik legh´resebb p´ lda az al´ bbi : Az 50-es evekben David Rhine parapszichol´ gus e ı e a ´ o di´ kokat vizsg´ lt meg azzal a c´ llal, hogy parapszichol´ giai k´ pess´ ggel rendelkez˝ ket tal´ ljon. a a e o e e o a Minden egyes di´ knak 10 lefedett k´ rtya sz´n´ t kellett megtippelne (piros vagy fekete). A k´s´ rlet a a ı e ıe eredm´ nyek´ nt bejelentette, hogy a di´ kok 0,1%-a parapszichol´ giai k´ pess´ ggel rendelkezik (a teljee e a o e e sen v´ letlenszer˝ en tippel˝ k k¨ z¨ tt a helyesen tippel˝ k v´ rhat´ sz´ ma statisztikailag nagyj´ b´ l ennyi, e u o o o o a o a a o
hogy egy ilyen elemz´ s sikeres legyen, nagyon fontos a hasonl´ s´ gi m´ rt´ k megfelel˝ megv´ laszt´ sa, valae oa e e o a a mint az elemz´ sbe bevont attrib´ tumok (adatt´ bla-oszlopok) ugyes” kiv´ laszt´ sa. Ha p´ ld´ ul az alkoholfogyaszt´ sra es e u a ¨ a a e a a ´ ” doh´ nyz´ sra vonatkoz´ adatok mellett t´ l sok” tov´ bbi attrib´ tumot vonunk be a vizsg´ latba, akkor lehet, hogy a csoa a o u a u a ” portos´t´ s nem az alkoholfogyaszt´ sra es doh´ nyz´ sra vonatkoz´ jellegzetes csoportokat tartalmazza, hanem altal´ nos” ıa a ´ a a o ´ a ” csoportokat kapunk. 5 A d¨ nt´ si fa ep´t´ sekor altal´ ban nem k¨ vetelm´ ny, hogy egy lev´ lbeli osszes rekord ugyanazon oszt´ lyba tartozzon, o e ´ ıe ´ a o e e ¨ a el´ g, ha nagy r´ sz¨ k” azonos oszt´ lyba tartozik. Ebben a konkr´ t p´ ld´ ban az osszes fogamz´ sg´ tl´ t szed˝ hallgat´ n˝ e e u a e e a ¨ a a o o o o ” volt.
4 Ahhoz,

´ 1. FEJEZET. BEVEZETES

19

1.5. abra. D¨ nt´ si fa : n˝ k es f´ rﬁak k¨ z¨ tti k¨ l¨ nbs´ gek a Semmelweis Egyetem hallgat´ inak ´ o e o ´ e o o uo e o k¨ r´ ben v´ gzett felm´ r´ s alapj´ n. oe e ee a
1 hiszen annak val´ sz´n˝ s´ ge, hogy valaki mind a t´z k´ rty´ t eltal´ lja 21 = 1024 ). Ezekkel a di´ kokkal o ı ue ı a a a a 10 ujra elv´ gezte a k´s´ rletet, am ez´ ttal a di´ kok eredm´ nye teljesen atlagos volt. Rhine k¨ vetkeztet´ se ´ e ıe ´ u a e ´ o e szerint az, aki parapszichol´ giai k´ pess´ ggel rendelkezik es err˝ l nem tud, elveszti eme a k´ pess´ g´ t o e e ´ o e e e miut´ n tudom´ st szerez r´ la. a a o A fenti p´ lda ellen´ re m´ ra az adatb´ ny´ szat sz´ elvesztette jelent´ s´ nek negat´v tartalm´ t, a e e a a a o ee ı a sz´ mos sikeres alkalmaz´ snak k¨ sz¨ nhet˝ en. A teljess´ g ig´ nye n´ lk¨ l felsorolunk bel˝ l¨ k n´ h´ nyat. a a o o o e e e u ou e a

– A bankok egyre gyakrabban alkalmaznak olyan automatikusan el˝ all´tott d¨ nt´ si f´ kat, ameo´ ı o e a lyek alapj´ n egy program javaslatot tesz egy hitel meg´t´ l´ s´ r˝ l. Ezt a k´ relmez˝ k szem´ lyes, a ıee eo e o e tov´ bb´ el˝ zetes hitelfelv´ teli es t¨ rleszt´ si adatai alapj´ n teszi (oszt´ lyoz´ s) [164]. Tesztek a a o e ´ o e a a a p´ ld´ ul igazolt´ k, hogy a hitelb´r´ lat min˝ s´ ge javult az USA-ban, amikor a bankok att´ rtek a e a a ıa oe ´ e k¨ telez˝ en alkalmazott, ´r´ sban r¨ gz´tett szab´ lyok alkalmaz´ s´ ra [164]. Ezeket a szab´ lyokat o o ıa o ı a aa a pedig az adatb´ ny´ szat seg´ts´ g´ vel all´tott´ k ossze. a a ı e e ´ ı a ¨ – A v´ s´ rl´ i szok´ sok felder´t´ se szupermarketekben, illetve nagy vev˝ k¨ rrel rendelkez˝ aa o a ıe o o o aruh´ zakban hasznos lehet az aruh´ z term´ kt´ rk´ p´ nek kialak´t´ s´ n´ l, akci´ k, elad´ shelyi ´ a ´ a e e e e ıa a a o a rekl´ mok (Point of Sales, Point of Purchase), le´ raz´ sok szervez´ s´ n´ l. . . (asszoci´ ci´ s a a a ee e a o szab´ lyok). a – Az ember genot´pus´ nak elemz´ s´ hez a g´ nek nagy sz´ ma miatt szint´ n adatb´ ny´ szati algoritı a ee e a e a a musok sz¨ ks´ gesek. Az eddigi sikeres k´s´ rletek c´ lja olyan g´ ncsoportok felt´ r´ sa volt, ameu e ıe e e aa lyek a cukorbetegs´ g bizonyos v´ ltozatai´ rt felel˝ sek. A teljes emberi g´ nrendszer felt´ r´ s´ val e a e o e aaa ez a ter¨ let egyre fontosabb lesz. u

´ 1. FEJEZET. BEVEZETES

20

– Az on-line aruh´ zak a j¨ v˝ ben egyre elfogadottabbak es elterjedtebbek lesznek. Mivel az on´ a o o ´ line kereskedelemben nem haszn´ lhat´ ak a megszokott szem´ lyes marketing eszk¨ z¨ k a fora o e o o galom (´ s a proﬁt) szem´ lyre szabott v´ s´ rl´ si aj´ nlatokkal n¨ velhet˝ . Az aj´ nlatokat az eddie e aa a a o o a gi v´ s´ rl´ si adatok es a rendelkez´ sre all´ demogr´ ﬁai adatok elemz´ se alapj´ n tehetj¨ k meg aa a ´ e ´ o a e a u (epiz´ dkutat´ s, asszoci´ ci´ s szab´ lyok). o a a o a – A csillag´ szatban az egitestek ori´ si sz´ ma miatt a hagyom´ nyos klaszterez˝ algoritmusok m´ g a ´ ´ a a a o e a mai sz´ m´t´ si kapacit´ sok mellett sem k´ pesek racion´ lis id˝ n bel¨ l k¨ l¨ nbs´ get tenni galaa ıa a e a o u uo e xisok, k¨ zeli csillagok es m´ s egi objektumok k¨ z¨ tt. Az ujabb, kiﬁnomultabb algoritmusok o ´ a ´ o o ´ fut´ si ideje j´ val kevesebb, ami lehet˝ v´ teszi a klaszterez´ st (klaszterez´ s). a o o e e e – Utaz´ s szervez´ ssel kapcsolatos mint´ k kinyer´ s´ vel hat´ konyabban (´ s ennek k¨ vetkezt´ ben a e a ee e e o e nagyobb nyeres´ ggel) megszervezhet˝ k a nagy k¨ lts´ gfaktor´ t´ nyez˝ k, pl. sz´ llodai szob´ k, e o o e u e o a a rep¨ l˝ jegyek le´ raz´ sa, vagy aremel´ se (epiz´ dkutat´ s, gyakori minta). uo a a ´ e o a – A v´rus¨ l˝ programok az ismert v´rusokat lenyomataik alapj´ n detekt´ lj´ k, az ismeretleneket ı oo ı a a a pedig t¨ bbnyire valamilyen heurisztikus m´ don pr´ b´ lj´ k kisz˝ rni. Oszt´ lyoz´ algoritmusok o o o a a u a o felhaszn´ l´ s´ val az ismert v´rusok tulajdons´ gai alapj´ n olyan modellt lehet fel´ ll´tani, ami j´ l aa a ı a a a ı o le´rja a v´rusok tulajdons´ gait [149, 150]. A modellt sikeresen alkalmazt´ k uj ismeretlen v´rusok ı ı a a ´ ı kisz˝ r´ s´ re (oszt´ lyoz´ s). uee a a N´ h´ ny sikeres esettanulm´ nyr´ l a 16.3.2 r´ szben olvashatunk. e a a o e

1.5. Szabv´ nyok a
Kezdetben sok adatb´ ny´ szati projektre jellemz˝ volt, hogy az adatb´ ny´ szok megkapt´ k az adaa a o a a a tokat es n´ mi inform´ ci´ t az alkalmaz´ si ter¨ letr˝ l es cser´ be v´ rt´ k t˝ l¨ k a kincset er˝ inform´ ci´ kat. ´ e a o a u o ´ e a a ou ´o a o A szoros egy¨ ttm˝ k¨ d´ s hi´ nya azonban csak olyan inform´ ci´ khoz vezetett amelyekkel az alu u o e a a o kalmaz´ si ter¨ let embererei nem sok mindent tudtak kezdeni. Az adatb´ ny´ szat elterjed´ s´ vel (´ s a u a a ee e a min˝ s´ gbiztos´t´ si elv´ r´ sokkal) fell´ pett az ig´ ny, hogy legyen egy szabv´ ny, egy utmutat´ az oe ıa aa e e a ´ o ´ sz¨ letett meg a CRISP-DM (CRoss Industry Standard adatb´ ny´ szati projektek lebonyol´t´ s´ r´ l. Igy u a a ıa ao Process for Data Mining) [34], amely adatb´ ny´ szati eszk¨ zt˝ l es felhaszn´ l´ si ter¨ lett˝ l f¨ ggetlen¨ l a a o o ´ aa u o u u le´rja, hogy mik´ nt kellene kin´ znie egy adatb´ ny´ szati projektnek, illetve ismerteti a kulcsfontoss´ g´ ı e e a a a u l´ p´ seket, es a potenci´ lis vesz´ lyeket. A CRISP-DM szerint a tud´ skinyer´ s az 1.6 abra szerinti e e ´ a e a e ´ m´ don j¨ n l´ tre. o o e Az adatb´ ny´ szati folyamat szabv´ nyos´t´ sa mellett egyre nagyobb az ig´ ny a folyamat egyes a a a ıa e l´ p´ seiben felmer¨ l˝ megold´ sok, probl´ m´ k, eszk¨ z¨ k szabv´ nyos´t´ s´ ra. Ezek k¨ z¨ l a legismere e uo a e a o o a ıa a o u tebbek : – az XML alap´ PMML (Predictive Modeling Markup Language), amely az adatb´ ny´ szati u a a eredm´ nyek szabv´ nyos le´r´ s´ t szolg´ lja, e a ıaa a – a Microsoft analysis szerver adatb´ ny´ szati funkci´ kkal kib˝ v´tett szabv´ nya (OLE DB for data a a o o ı a mining), – az ISO t¨ rekv´ sei multim´ dia es alkalmaz´ s speciﬁkus SQL t´pusok es a hozz´ tartoz´ elj´ r´ sok o e e ´ a ı ´ a o aa deﬁni´ l´ s´ ra (SQL/MM) aa a – java adat b´ ny´ szati API (JDMAPI) a a

´ 1. FEJEZET. BEVEZETES

21

1.6. abra. A tud´ sfelt´ r´ s folyamata a CRISP-DM szerint ´ a aa

´ a 1.6. Adatb´ ny´ szati rendszer architektur´ ja a a
Egy adatb´ ny´ szati rendszernek kapcsolatban kell lennie az adatb´ zissal, a felhaszn´ l´ val es eseta a a ao ´ leg valami tud´ salap´ rendszerrel. Ezek alapj´ n egy tipikus adatb´ ny´ szati architekt´ ra az 1.7. abr´ n a u a a a u ´ a l´ that´ . a o Adatb´ zis, adatt´ rh´ z vagy m´ s inform´ ci´ rakt´ r : Itt tal´ lhat´ k a t´ nyleges adatok, ami lehet a a a a a o a a o e egy adatb´ zis, vagy adatt´ rh´ z, ak´ r egy munkalap vagy b´ rmilyen t´ rolt inform´ ci´ . Az adata a a a a a a o tiszt´t´ s es integr´ ci´ k¨ zvetlen¨ l az adatokon is elv´ gezhet˝ . ıa ´ a o o u e o Adatb´ zis vagy adatt´ rh´ z szerver : A szerver felel˝ s a felhaszn´ l´ altal k´ rt adat k´ zbes´t´ s´ ert. a a a o ao´ e e ı e e´ Tud´ s b´ zis : A ter¨ letre jellemz˝ , valamilyen szinten formaliz´ lhat´ tud´ s tal´ lhat´ itt. Fontos szea a u o a o a a o repe lehet ennek a keres´ si t´ r sz˝ k´t´ s´ n´ l, a kinyert mint´ k erdekess´ g´ nek meghat´ roz´ s´ n´ l, e e u ıe e e a ´ e e a aa a k¨ l¨ nb¨ z˝ param´ terek es k¨ sz¨ bsz´ mok meghat´ roz´ s´ n´ l. uo o o e ´ u o a a aa a Adatb´ ny´ sz motor : Az adatb´ ny´ sz motorban futnak a k¨ l¨ nb¨ z˝ adatb´ ny´ szati algoritmusok. a a a a uo o o a a Minta ki´ rt´ kel˝ modul : Ez a modul felel˝ s a kinyert minta vagy osszef¨ gg´ sek ki´ rt´ kel´ s´ ert a e e o o ¨ u e e e e e´ ter¨ letre jellemz˝ erdekess´ gi mutat´ k alapj´ n. Sokszor l´ tni fogjuk, hogy min´ l jobban egybe u o´ e o a a e tudjuk ep´teni az adatb´ ny´ szatot a minta ki´ rt´ kel´ s´ vel, ann´ l hat´ konyabb es gyorsabb lehet ´ ı a a e e ee a e ´ a tud´ sfelt´ r´ s. a aa

´ 1. FEJEZET. BEVEZETES

22

grafikus felhasználói felület

minta kiértékelés

adatbányász motor

tudás bázis

Adatbázis vagy adattárház szerver adattisztítás adatintegráció " szurés

adatbázis

adat− tárház

1.7. abra. Tipikus adatb´ ny´ szati rendszer architekt´ r´ ja ´ a a ua ¨ Graﬁkus felhaszn´ l´ i felulet : Itt zajlik a kommunik´ ci´ a felhaszn´ l´ es az adatb´ ny´ szati rendszer ao a o ao´ a a k¨ z¨ tt. A felhaszn´ l´ itt adhatja meg, hogy melyik adatb´ zisban milyen jelleg˝ osszef¨ gg´ seket o o ao a u¨ u e keres es ezen a r´ tegen kereszt¨ l l´ thatja a v´ geredm´ nyt. Az osszef¨ gg´ sek atl´ that´ , ertelmes ´ e u a e e ¨ u e ´ a o ´ t´ lal´ sa rendk´v¨ l fontos, hiszen ennek hi´ nya elriaszthatja a felhaszn´ l´ t az adatb´ ny´ szatt´ l. a a ı u a ao a a o

´ 1.7. Adatb´ ny´ szat es az etika a a 1.8. Az adatb´ ny´ szat felt´ telei a a e
Tagadhatatlan, hogy a sikertelen adatb´ ny´ szati projektek sz´ ma nagy, es az adatb´ ny´ szat naa a a ´ a a gyon sok esetben nem v´ ltotta be a hozz´ f˝ z¨ tt rem´ nyeket. Ennek oka egyr´ szr˝ l az adatb´ ny´ szati a a u o e e o a a szakemberhi´ ny (a j´ adatb´ ny´ szati szakember ritka, mint a feh´ r holl´ ), m´ sr´ szr˝ l az, hogy alapa o a a e o a e o vet˝ felt´ telek nem teljes¨ ltek a projektek sor´ n. A sikeres adatb´ ny´ szati projekt egyik legfontosabb o e u a a a felt´ tele az adatb´ ny´ sz es a ter¨ let szak´ rt˝ j´ nek szoros egy¨ ttm˝ k¨ d´ se. A tov´ bbi felt´ telek az e a a ´ u e oe u u o e a e al´ bbiak : a Nagy mennyis´ gu adat : A nagy mennyis´ g˝ adat a kinyert szab´ lyok statisztikai jelent˝ s´ g´ t n¨ vee ˝ e u a oe e o li. Min´ l nagyobb az adatmennyis´ g, ann´ l biztosabban tudjuk kiz´ rni bizonyos osszef¨ gg´ sek e e a a ¨ u e esetis´ g´ t, azaz ann´ l kisebb az es´ lye, hogy a tal´ lt osszef¨ gg´ s csak a v´ letlen eredm´ nye. e e a e a ¨ u e e e Sajnos sok adatot sok´ ig tart feldolgozni, s˝ t az algoritmusok egy jelent˝ s r´ sze erz´ keny arra, a o o e ´ e hogy az adatb´ zis elf´ r-e a mem´ ri´ ban. a e o a ´ Sok attributum : Ha az objektumokat le´r´ attrib´ tumok sz´ ma kicsi, akkor hagyom´ nyos ıo u a a

´ 1. FEJEZET. BEVEZETES

23

eszk¨ z¨ kkel (graﬁkonok, egyszer˝ t´ bl´ zatok, kis dimenzi´ s, forgathat´ , sz´nes abr´ k, . . . ) is o o u a a o o ı ´ a fel tudjuk t´ rni a tud´ st. Kev´ s attrib´ tum eset´ n a kinyerhet˝ tud´ s sem lehet t´ l sokf´ le. Az a a e u e o a u e adatb´ ny´ szat ereje akkor mutatkozik meg, amikor az attrib´ tumsz´ m olyan nagy, hogy a haa a u a gyom´ nyos m´ dszereknek nincs es´ ly¨ k. a o e u Tiszta adat : Az adatok j´ min˝ s´ ge az adatb´ ny´ szat egyik alapfelt´ tele. A zajok, a hib´ s beo oe a a e a jegyz´ sek j´ esetben csak nehez´tik az adatb´ ny´ szatot (p´ ld´ ul amikor ismerj¨ k az adatokban e o ı a a e a u tal´ lhat´ zaj, ill. bizonytalans´ g fok´ t), rosszabb esetben azonban hamis eredm´ nyekhez vezeta o a a e nek. Az ilyen rossz min˝ s´ g˝ adatokra remek p´ lda haz´ nk orvosi adatb´ zisa (rengeteg hib´ s oe u e a a a bejegyz´ s, kit¨ ltetlen mez˝ , elt´ r˝ m´ rt´ kegys´ g alap´ bejegyz´ sek, sz¨ veges bejegyz´ sek), pee o o eo e e e u e o e dig az ezekb˝ l kinyert inform´ ci´ k ert´ kesek lenn´ nek. A ”szem´ thalmazban” val´ kutakod´ st o a o ´ e e e o a tr´ f´ san GIGO-nak (garbage in, garbage out6 ) nevezik. ea Torz´tatlan adat : Az adatb´ ny´ szat sikeress´ ge m´ lhat az adatok nem megfelel˝ kiv´ laszt´ s´ n. ı a a e u o a aa Ide tartoz´ fogalom az un. BIBO (bias in, bias out7 ), amely arra h´vja fel a ﬁgyelm¨ nket, o ´ ı u hogy ha egy r´ szsokas´ g alapj´ n akarunk k¨ vetkeztetni az alapsokas´ gra, akkor ﬁgyelembe e a a o a kell venn¨ nk a r´ szsokas´ g kiv´ laszt´ s´ nak szempontjait, illetve az abb´ l ad´ d´ (esetleges) u e a a aa o o o torz´t´ sokat. P´ ld´ ul, ha a lakoss´ got az anyagi helyzet szerint akarjuk csoportokba sorolni, ıa e a a de csak nyugat-magyarorsz´ gi adatok allnak rendelkez´ s¨ nkre, akkor tudnunk kell, hogy a kaa ´ eu pott eredm´ ny (a csoportok le´r´ sa) torz lesz, hiszen a r´ szsokas´ g atlag eletsz´nvonala jobb az e ıa e a ´ ´ ı alapsokas´ g´ n´ l. a e a ¨ Alkalmaz´ si terulet akci´ k´ pess´ ge : Gyakran el˝ fordul, hogy a tud´ st csak kinyerik, de a fela o e e o a haszn´ l´ sa elmarad. Gyakran a felhaszn´ l´ si ter¨ letek t´ l merevek, vagy a v´ ltoztat´ s aa aa u u a a t´ ls´ gosan magas k¨ lts´ gekkel j´ rna. A legt¨ bb adatb´ ny´ szati esettanulm´ nyban a tud´ s kiu a o e a o a a a a nyer´ s´ nek m´ dj´ r´ l esik sz´ , a tud´ s felhaszn´ l´ s´ r´ l pedig ritk´ n hallunk. ee o ao o a aa ao a A befektet´ s megt´ rul´ s´ nek (Return On Investment) m´ rhet˝ s´ ge : Egy adatb´ ny´ szati proe e ¨ee e oe a a jektr˝ l akkor all´thatjuk biztosan, hogy sikeres, ha a befektet´ s hat´ s´ t m´ rni, vagy viszonylag o ´ ı e aa e pontosan becs¨ lni tudjuk. u A jegyzet fejezeteiben a legkev´ sb´ ismert, de napjainkban egyre nagyobb teret nyer˝ ter¨ leteket e e o u j´ rjuk k¨ r¨ l : a gyakori mint´ k kinyer´ s´ t, az attrib´ tumok k¨ z¨ tti osszef¨ gg´ sek meghat´ roz´ s´ t, a a ou a ee u o o ¨ u e a aa sorozatelemz´ st, a klaszterez´ st es a webes adatb´ ny´ szatot. Minden esetben az algoritmusok gyae e ´ a a korlati felhaszn´ l´ s´ t p´ ld´ kon kereszt¨ l szeml´ ltetj¨ k ; emellett megadjuk a probl´ m´ k form´ lis deaa a e a u e u e a a ﬁn´ci´ it, es bemutatjuk a legismertebb, leghat´ konyabb algoritmusokat is. A jegyzet tov´ bbi c´ lja, ı o ´ e a e hogy osszefoglalja az eddig nem, vagy csak kis hat´ konys´ ggal megoldott probl´ m´ kat, tov´ bb´ a ¨ e a e a a a jelenlegi kutat´ si ter¨ leteket. a u

7 torz´t´ s ıa

6 szem´ t e

be, szem´ t ki e be, torz´t´ s ki ıa

2. fejezet Alapfogalmak, jel¨ l´ sek oe
Ebben a r´ szben tiszt´ zzuk a jegyzet sor´ n haszn´ lt fogalmak jelent´ s´ t. C´ lszer˝ akkor atn´ zn¨ nk e a a a ee e u ´ e u e fejezet egyes r´ szeit, amikor az olvas´ s sor´ n olyan r´ szbe utk¨ z¨ nk, ami nem teljesen tiszta. e a a e ¨ o u

2.1. Halmazok, rel´ ci´ k, fuggv´ nyek, sorozatok a o ¨ e
A halmaz k¨ l¨ nb¨ z˝ objektumok egy¨ ttese, amelyeket a halmaz elemeinek h´vunk. Ha x eleme uo o o u ı a H halmaznak, akkor azt ´gy jel¨ lj¨ k : x ∈ H, a halmaz elemeinek sz´ m´ t (r¨ videbben elemsz am´ t) ı o u a a o ´ a pedig |H|-val. A jegyzetben a term´ szetes sz´ mok halmaz´ t ({0,1,. . . }) N-el jel¨ lj¨ k, a val´ s sz´ mok e a a o u o a halmaz´ t R-el, az eg´ sz sz´ mok halmaz´ t Z-vel, az ures halmazt (egyetlen elemet sem tartalmaz´ a e a a ¨ o / halmaz) 0-val. K´ t halmaz akkor egyezik meg, ha ugyanazok az elemeik. X r´ szhalmaza Y -nak (X ⊆ e e ⊆ Y ), ha X minden eleme Y -nak is eleme. Ha X ⊆ Y , de X = Y , akkor X val odi r´ szhalmaza Y -nak. e ´ A val´ di jelz˝ t gyakran fogjuk haszn´ lni, es a val´ di r´ szhalmaz anal´ gi´ j´ ra azt ertj¨ k rajta, hogy o o a ´ o e o aa ´ u az egyenl˝ s´ get kiz´ rjuk. Sajnos a superset angol sz´ nak nincsen altal´ nosan elfogadott ford´t´ sa, oe a o ´ a ıa pedig sokszor szeretn´ nk haszn´ lni. Azt fogjuk mondani, hogy Y b ovebb X -n´ l, ha (X ⊆ Y ). A hale a e ˝ mazm˝ veletek jel¨ l´ se es pontos jelent´ s¨ k : metszet : X ∩Y = {z : z ∈ X es z ∈ Y }, uni´ : X ∪Y = {z : u oe ´ eu ´ o : z ∈ X vagy z ∈ Y }, k¨ l¨ nbs´ g : X \Y = {z : z ∈ X es z ∈ Y }. uo e ´ K´ t halmaz (X , Y ) Descartes-szorzata (X ×Y ) az osszes olyan rendezett p´ rb´ l all´ halmaz, amelye ¨ a o ´ o nek az els˝ komponense (tagja) X -ben, a m´ sodik Y -ban van. Az X , Y halmazokon ertelmezett bin aris o a ´ ´ rel´ ci´ az X ×Y r´ szhalmaza. Ha (x, y) eleme a φ rel´ ci´ nak, akkor azt ´gy is jel¨ lhetj¨ k : xφy. A a o e a o ı o u rel´ ci´ r´ szben rendez´ s (vagy parci´ lis rendez´ s), ha reﬂex´v (x x), antiszimmetrikus (x y es y x a o e e a e ı ´ felt´ telekb˝ l k¨ vetkezik, hogy x = y), tranzit´v (x y es y z felt´ telekb˝ l k¨ vetkezik, hogy x z). e o o ı ´ e o o Ha az el˝ z˝ 3 felt´ telben az antiszimmetrikus helyett szimmetrikusat (x y-b˝ l k¨ vetkezik, hogy o o e o o y x) mondunk, akkor ekvivalencia-relaci´ r´ l besz´ l¨ nk. A tov´ bbiakban, tetsz˝ leges rendez´ s eu a o e ´ oo eset´ n, ha x = y es x y, akkor azt ´gy jel¨ lj¨ k x y. Legyen X r´ szhalmaza X . A X halmaznak e ´ ı o u e y ∈ X egy als´ korl´ tja, ha y x minden x ∈ X -re. Az y legnagyobb als´ korl´ t, ha minden y als´ o a o a o korl´ tra y a y. Az y maxim´ lis als´ korl´ tja X -nak, ha nem l´ tezik olyan y-t´ l k¨ l¨ nb¨ z˝ y als´ a o a e o uo o o o korl´ t, amire y y . Hasonl´ an ertelmezhet˝ a fels˝ , legkisebb fels˝ , minim´ lis fels˝ korl´ t fogalmak a o ´ o o o a o a is. A rendez´ s teljes rendez´ s, ha minden x = y elemre x y, y x k¨ z¨ l az egyik fenn´ ll. Az e e o u a (X , ) p´ rost h´ l´ nak nevezz¨ k, ha az X -en ertelmezett parci´ lis rendez´ s, es tetsz˝ leges x, y ∈ X a ao u ´ a e ´ o elemeknek l´ tezik legnagyobb als´ (jel¨ l´ sben : x ∧ y) es legkisebb fels˝ korl´ tjuk (x ∨ y). e o oe ´ o a K¨ zponti fogalom lesz a lexikograﬁkus rendez´ s. N´ zz¨ k el˝ sz¨ r ennek a matematikai deo e e u o o ﬁn´ci´ j´ t. Legyen X es Y k´ t halmaz, amelyeken ertelmezve van egy-egy parci´ lis rendez´ s ( X , Y ). ı oa ´ e ´ a e 24

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

25

Azt mondjuk, hogy a (x1 , y1 ) ∈ X ×Y lexikograﬁkusan megel˝ zi (x2 , y2 ) ∈ X ×Y p´ rt, ha x1 X x2 , o a vagy x1 = x2 es y1 Y y2 . A lexikograﬁkus rendez´ st tetsz˝ leges sz´ m´ halmaz Descartes-szorzat´ ra is ´ e o a u a kiterjeszthetj¨ k rekurz´v m´ don az al´ bbiak alapj´ n : X ×Y ×Z = X ×(Y ×Z). L´ that´ , hogy a lexikou ı o a a a o graﬁkus rendez´ st Descartes szorzatokon ertelmezz¨ k, vagy m´ s sz´ val olyan osszetett strukt´ r´ kon, e ´ u a o ¨ ua amelyeknek ugyanannyi tagjuk van (n-eseknek is h´vj´ k ezeket). Mi ezt szeretn´ nk altal´ nos´tani, ı a e ´ a ı hiszen p´ ld´ ul szavak sorba rendez´ s´ n´ l is el˝ fordulnak elt´ r˝ hossz´ s´ g´ szavak. Ha a r¨ videbb e a ee e o eo ua u o sz´ megegyezik a hosszabb sz´ els˝ fel´ vel (p´ ld´ ul komp es kompenz´ l szavak), akkor megegyez´ s o o o e e a ´ a e alapj´ n a r¨ videbb sz´ el˝ zi meg lexikograﬁkusan a hosszabbikat. Ezek alapj´ n mindenki tudja dea o o o a ﬁni´ lni a lexikograﬁkus rendez´ st elt´ r˝ sz´ m´ halmazok Descartes szorzat´ ra. A legt¨ bb esetben a e eo a u a o a Descartes szorzat tagjainak halmaza es a rajtuk deﬁni´ lt rendez´ sek megegyeznek (pl. : X = Y es ´ a e ´ e e e X = Y ). Ilyenre, adott rendez´ s szerinti lexikograﬁkus rendez´ sk´ nt hivatkozunk. Az X , Y halmazokon ertelmezett f bin´ ris rel´ ci´ fuggv´ ny, ha b´ rmely x ∈ X eset´ n pontosan ´ a a o ¨ e a e egy olyan y ∈ Y l´ tezik, hogy (x, y) ∈ f . Ez jel¨ l´ sben f : X → Y , es, ha (x, y) ∈ f , akkor y = f (x). e oe ´ Az X halmazt a f ertelmez´ si tartom´ ny´ nak h´vjuk (vagy m´ shogy : f az X -en ertelmezett), Y -t az e a a ı a ´ ´ f k´ phalmaz´ nak, az f (X ) halmazt pedig az f ert´ kk´ szlet´ nek. Azt a f¨ ggv´ nyt, amely ugy kapunk, e a e u e ´ ´ e e hogy el˝ sz¨ r a f , majd az g f¨ ggv´ nyt alkalmazzuk g ◦ f -el jel¨ lj¨ k. Predik atum egy f¨ ggv´ ny, ha o o u e o u u e ´ az ert´ kk´ szlete az {igaz, hamis} halmaz. Szurjekt´v egy f¨ ggv´ ny, ha a k´ phalmaza megegyezik az ´ e e ı u e e ¨ ert´ kk´ szlet´ vel, injekt´v (vagy m´ s n´ ven egy-egy ertelm˝ lek´ pz´ s), ha az ertelmez´ si tartom´ ny ´ e e e ı a e ´ u e e ´ e a b´ rmely k´ t k¨ l¨ nb¨ z˝ elem´ hez k¨ l¨ nb¨ z˝ ert´ ket rendel es bijekt´v (m´ sk´ ppen a f¨ ggv´ ny egy a e uo o o e uo o o ´ e ´ ı a e u e bijekci´ ), ha sz¨ rjekt´v es injekt´v is egyben. o u ı ´ ı
n

u e a o u u Legyen H tetsz˝ leges halmaz. Az f : H × · · ·× H → H f¨ ggv´ nyt n v´ ltoz´ s m˝ veletnek nevezz¨ k. o A H halmazon ertelmezett k´ tv´ ltoz´ s m˝ veletet asszociat´vnak nevezz¨ k, ha tetsz˝ leges a, b, c ∈ ´ e a o u ı u o ∈ H eset´ n (a b) c = a (b c). A (H, ) p´ rt f´ lcsoportnak nevezz¨ k, ha a H-n ertelmezett e a e u ´ asszociat´v m˝ velet. A (H, ) f´ lcsoport elemein a H elemeit ertj¨ k. Ha a (H, ) f´ lcsoport elemei ı u e ´ u e k¨ z¨ tt l´ tezik olyan e elem, amelyre e a = a e = a minden a ∈ H elemre, akkor e-t egys´ gelemnek o o e e h´vjuk es egys´ gelemes f´ lcsoport´ l besz´ l¨ nk. Ha egy egys´ gelemes f´ lcsoportban minden elemnek ı ´ e e o eu e e l´ tezik inverze, akkor csoportr´ l besz´ l¨ nk. Az a inverz´ re (a−1 ) teljes¨ lj¨ n, hogy a a−1 = a−1 e o eu e u o ´ a = e. A csoport Abel-csoport, ha a m˝ velet kommutat´v (a b = b a) is. A (H, , +) h´ rmas u ı a ´ egy gy˝ r˝ , amennyiben (H, ) Abel csoport, (H, +) f´ lcsoport es a , + m˝ veletek disztribut´vek uu e ´ u ı egym´ sra n´ zve, azaz (a + b) c = a c + b c. A es a + m˝ veletek egys´ gelemeit az 1 es a 0 a e ´ u e ´ szimb´ lumok jel¨ lik. Testnek h´vjuk az olyan kommutat´v gy˝ r˝ t, ahol az 1 = 0 es a 0-´ n k´v¨ l a H o o ı ı uu ´ a ı u minden elem´ nek van inverze. e A H halmaz felett ertelmezett multihalmaznak vagy zsaknak nevezz¨ k azt a halmazt, amelynek ´ u ´ elemei olyan p´ rok, amelyek els˝ tagja H egy eleme, m´ sodik tagja pedig egy pozit´v eg´ sz sz´ m. a o a ı e a Egy multihalmazt szok´ s ugy abr´ zolni mintha olyan halmaz lenne, amely egy elemet t¨ bbsz˝ r is a ´ ´ a o o tartalmazhat. Ilyenkor a p´ r els˝ tagj´ t annyiszor ´rjuk le, amennyi a p´ r m´ sodik tagja. P´ ld´ ul a o a ı a a e a a {(A,1), (C,3)}-at {A, C, C, C}-vel abr´ zoljuk. A multihalmaz m´ ret´ n a p´ rok m´ sodik tagjainak ´ a e e a a osszeg´ t, elemsz´ m´ n pedig a p´ rok sz´ m´ t ertj¨ k. ¨ e a a a a a ´ u Sokat fogjuk haszn´ lni a sorozat fogalm´ t. Legyen S egy halmaz. Az f : N → S f¨ ggv´ nyt az S a a u e felett ertelmezett sorozatnak h´vjuk. Le´r´ s´ ra az f (0), f (1), . . . helyett a s 0 , s1 , . . . jel¨ l´ st fogjuk ´ ı ıaa oe haszn´ lni. V´ ges sorozatok eset´ ben az f ertelmez´ si tartom´ nya (´ ltal´ ban az {1,2,. . . ,n}) v´ ges a e e ´ e a a a e halmaz. V´ ges sorozat hossza az ertelmez´ si tartom´ ny´ nak elemsz´ ma. Az S = s 1 , s2 , . . . sn , S = e ´ e a a a a oa ´ u ´ = s1 , s2 , . . . sn sorozat konkaten´ ci´ j´ n az s1 , s2 , . . . sn , s1 , s2 , . . . sn sorozatot ertj¨ k, es S, S -el jel¨ lj¨ k. o u

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

26

2.2. Line´ ris algebra a
Legyen H egy test, amelynek elemeit skalaroknak h´vjuk. A H felett ertelmezett vektort´ r egy ı ´ e ´ V halmaz (amelynek elemei a vektorok) es k´ t bin´ ris oper´ tor (vektor osszead´ s : + es skal´ rral ´ e a a ¨ a ´ a val´ szorz´ s : ·), amelyekre teljes¨ l n´ h´ ny axi´ ma (1. u, v, w ∈ V -re u + (v + w) = (u + v)+, 2. u + o a u e a o + v = v + u, stb.). A W ⊆ V halmazt alt´ rnek nevezz¨ k, ha z´ rt a vektor¨ sszead´ s es skal´ rszorz´ s e u a o a ´ a a m˝ veletekre. Adott vektorhalmazt tartalmaz´ alterek metszet´ t a vektorhalmaz altal fesz´tett alt´ rnek u o e ı e ´ nevezz¨ k. Ha a halmazb´ l nem t´ vol´thatunk el elemet a fesz´tett alt´ r megv´ ltoztat´ sa n´ lk¨ l, akkor u o a ı ı e a a e u a vektorhalmazt line´ risan f¨ ggetlennek h´vjuk. A V alt´ r egy b´ zisa egy olyan line´ risan f¨ ggetlen a u ı e a a u vektorhalmaz, amelynek fesz´tett altere V . ı A hagyom´ nyoknak megfelel˝ en az A m´ trix i-edik sor´ b´ l k´ pzett vektort A i -vel jel¨ lj¨ k, ||v||a o a a o e o u vel a v vektor euklideszi norm´ j´ t ( aa a a ∑i v2 ) es vT w-vel a vT , w vektorok skal´ ris szorzat´ t (∑i vT wi ). i i ´

2.3. Gr´ felm´ let a e
Ir´ ny´tott gr´ f egy G = (V, E) p´ r, ahol V cs´ csok (vagy pontok) v´ ges halmaza, E pedig egy a ı a a u e bin´ ris rel´ ci´ V -n. E elemeit eleknek nevezz¨ k. Ha (u, v) ∈ E, akkor az u, v cs´ csok egym´ s szoma a o u u a ´ sz´ dai. Ir´ ny´tatlan gr´ fr´ l besz´ l¨ nk, ha az E rel´ ci´ szimmetrikus. A c´mk´ zett (vagy s´ lyozott) e a ı a o eu a o ı e u gr´ fn´ l a cs´ csokhoz, c´mk´ zett el˝ (vagy els´ lyozott) gr´ fn´ l pedig az elekhez rendel¨ nk c´mk´ ket. a a u ı e a a ´ u ı e ´u ´ u A c´mk´ zett el˝ gr´ fot s´ lyozott gr´ fnak h´vjuk, ha a c´mk´ k sz´ mokkal kifejezhet˝ s´ lyokat jelenı e ´u a u a ı ı e a o u tenek. A gr´ f m´ ret´ n (|G|) a cs´ csok sz´ m´ t ertj¨ k. Egy cs´ cs fok an a cs´ csot tartalmaz´ eleket a e e u a a ´ u u u o ´ ´ ertj¨ k. Ir´ ny´tott gr´ fokn´ l megk¨ l¨ nb¨ ztet¨ nk kifokot es befokot. A G ir´ ny´tatlan gr´ f k-regul aris, ´ u a ı a a uo o u ´ a ı a ´ ha minden cs´ cs foka pontosan k. u A G = (V , E ) gr´ f a G = (V, E) r´ szgr´ fja, ha V ⊆ V es E ⊆ E. A G = (V, E) gr´ f V ⊆ V altal a e a ´ a ´ fesz´tett r´ szgr´ fja (induced subgraph) az a G = (V , E ) gr´ f, ahol E = {(u, v) ∈ E : u, v ∈ V }. A ı e a a G1 (V1 , E1 ) izomorf a G2 (V2 , E2 ) gr´ ffal, jel¨ l´ sben G1 ∼ G2 , ha l´ tezik φ : V1 → V2 bijekci´ , amelyre a oe e o = (u, v) ∈ E1 eset´ n (φ(u), φ(v)) ∈ E2 is fenn´ ll. C´mk´ zett gr´ fokn´ l emellett megk¨ vetelj¨ k, hogy az u e a ı e a a o u cs´ cs c´mk´ je megegyezz´ k a φ(u) c´mk´ j´ vel minden u ∈ V1 -re, c´mk´ zett el˝ gr´ fn´ l pedig az (u, v) u ı e e ı ee ı e ´u a a c´mk´ je egyezzen meg a (φ(u), φ(v)) el c´mk´ j´ vel. Ha G ∼ G, akkor automorﬁzmusr´ l besz´ l¨ nk. ı e ´ ı ee o eu = A gr´ fok abr´ zol´ s´ nak elterjedt m´ dja a szomsz´ doss´ gi m´ trix (adjacency matrix) es a szoma ´ a aa o e a a ´ sz´ doss´ g lista. Az |G| × |G| m´ ret˝ A szomsz´ doss´ gi m´ trix ai j eleme 1 (´ lc´mk´ zett esetben az e a e u e a a e ı e el c´mk´ je), ha a G gr´ f i-edik cs´ cs´ b´ l indul el a j-edik cs´ csba, k¨ l¨ nben 0. Term´ szetesen a ´ ı e a u a o ´ u uo e szomsz´ doss´ gi m´ trixot a gr´ fon k´v¨ l az hat´ rozza meg, hogy melyik cs´ csot h´vjuk az els˝ nek, e a a a ı u a u ı o m´ sodiknak, ... A szomsz´ doss´ gi m´ trixot teh´ t a gr´ f es az f : V → {1, . . . , |V |} bijekci´ adja meg. a e a a a a ´ o Hurok´ l n´ lk¨ li, c´mk´ zett gr´ fban a szomsz´ doss´ gi m´ trix a ii eleme az i cs´ cs c´mk´ j´ t t´ rolja. A e e u ı e a e a a u ı ee a szomsz´ doss´ gi lista |G| darab lista, ahol az i-edik lista t´ rolja az i-edik cs´ cs szomsz´ dait. e a a u e Az u cs´ csot az u cs´ ccsal osszek¨ t˝ k-hossz´ uton cs´ csoknak egy olyan (v´ ges) v0 , v1 , . . . , vk u u ¨ oo u´ u e sorozat´ t ertj¨ k, amelyre u = v0 , u = vk , es (vi−1 , vi ) ∈ E (i = 1,2, . . . , k). Egy ut egyszer˝ , ha a benne a ´ u ´ ´ u szerepl˝ cs´ csok p´ ronk´ nt k¨ l¨ nb¨ z˝ k. A v0 , v1 , . . . , vk ut k¨ r, ha v0 = vk , es az ut legal´ bb egy elt o u a e uo o o ´ o ´ ´ a ´ tartalmaz. Egy gr´ fot osszef¨ gg˝ nek h´vunk, ha b´ rmely k´ t cs´ csa osszek¨ thet˝ uttal. A k¨ rmenetes, a ¨ u o ı a e u ¨ o o´ o ir´ ny´t´ s n´ lk¨ li gr´ fot erd˝ nek h´vjuk. Ha az erd˝ osszef¨ gg˝ , akkor pedig fanak. Az olyan f´ t, amely a ıa e u a o ı o¨ u o a ´ tartalmazza egy G gr´ f minden cs´ cs´ t, a G fesz´t˝ f´ j´ nak h´vjuk. a u a ıoaa ı A gy¨ keres f´ ban az egyik cs´ csnak kit¨ ntetett szerepe van. Ezt a cs´ csot gy ok´ rnek nevezz¨ k. o a u u u u ¨ e A gy¨ k´ rb˝ l egy tetsz˝ leges x cs´ csba vezet˝ (egy´ rtelm˝ en meghat´ rozott) ut altal tartalmazott o e o o u o e u a ´ ´ b´ rmely y cs´ csot az x os´ nek nevez¨ nk. Azt is mondjuk ekkor, hogy x az y leszarmazottja. Ha x = y, a u u ˝ e ´

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

27

akkor val´ di osr˝ l es val´ di lesz´ rmazottr´ l besz´ l¨ nk. Ha az uton x 1 elen kereszt¨ l erhet˝ el y-b´ l, o ˝ o ´ o a o eu ´ ´ u ´ o o akkor x az y gyereke es y az x sz¨ l˝ je. Ha k´ t cs´ csnak ugyanaz a sz¨ l˝ je, akkor testv´ reknek mondjuk ´ uo e u uo e oket. ˝ A G=(V, E) gr´ f S, V \S v´ g´ s´ n a V halmaz k´ tr´ szes part´ci´ j´ t ertj¨ k. Az (u, v)∈E el keresztezi a a aa e e ı oa ´ u ´ az S, V \S v´ g´ st, ha annak egyik v´ gpontja S-ben a m´ sik V \S-ben van. Egy v´ g´ s s ulya – s´ lyozott a a e a a a ´ u gr´ fok eset´ ben – megegyezik a v´ g´ st keresztez˝ elek osszs´ ly´ val. a e a a o´ ¨ u a

2.4. Matematika logika 2.5. Val´ sz´nus´ gsz´ m´t´ s o ı ˝ e a ıa
Felt´ telezz¨ k, hogy az olvas´ tiszt´ ban van a valosz´n˝ s´ gi v´ ltoz´ , val´ sz´n˝ s´ gi v´ ltoz´ ele u o a a o o ı ue a o ´ ı ue oszl´ s´ nak, s˝ r˝ s´ gf¨ ggv´ ny´ nek, eloszl´ sf¨ ggv´ ny´ nek a val´ sz´n˝ s´ gi v´ ltoz´ v´ rhat´ ert´ k´ nek aa uue u e e a u e e o ı ue a o a o ´ e e 2 [X ] = σ2 = E[(X −µ)2 ]) vagy altal´ nosan az n-edik centr´ lis (E[X ] = µ = ∑ x· p(x)) es sz´ r´ s´ nak (D ´ oaa ´ a a X momentumok fogalm´ val (Dn [X ] = E[(X − µ)n ]), tov´ bb´ ismeri k´ t val´ sz´n˝ s´ gi v´ ltoz´ k¨ z¨ tti a a a e o ı ue a o o o Cov(X,Y ) kovarianci´ t (Cov(X , Y ) = E[(X − µ)(Y − ν)) es korrel´ ci´ t (Corr(X , Y ) = σX σY ). a ´ a o

2.5.1. Nevezetes eloszl´ sok a
A k¨ vetkez˝ nevezetes eloszl´ sokkal fogunk tal´ lkozni tanulm´ nyaink sor´ n. o o a a a a Binomi´ lis eloszl´ s a a Hipergeometrikus eloszl´ s a Tegy¨ k fel, hogy van N k¨ l¨ nb¨ z˝ elem¨ nk, amelyb˝ l R darab rossz. A hipergeometrikus eloszl´ s u uo o o u o a adja meg annak az es´ ly´ t, hogy X darab rossz elem lesz, ha az N elemb˝ l n darabot kivesz¨ nk e e o u v´ letlenszer˝ en. Elemi kombinatorikus uton a val´ sz´n˝ s´ g kisz´ m´that´ (0 ≤ X ≤ n) : e u ´ o ı ue a ı o P(X , N, R, n) =
R X N−R n−X N n

A fenti s˝ r˝ s´ gf¨ ggv´ nnyel rendelkez˝ diszkr´ t val´ sz´n˝ s´ gi eloszl´ st h´vjuk hipergeometrikus eluue u e o e o ı ue a ı oszl´ snak. a Amennyiben n N, akkor a hipergeometrikus eloszl´ st k¨ zel´thetj¨ k az n, R/N param´ ter˝ binoa o ı u e u mi´ lis eloszl´ ssal. a a Norm´ lis eloszl´ s a a χ2 eloszl´ s a Legyenek ξ1 , ξ2 , . . . , ξn egym´ st´ l f¨ ggetlen, standard norm´ lis eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ k. a o u a au o ı ue a o n 2 val´ sz´n˝ s´ gi v´ ltoz´ eloszl´ s´ t n param´ ter˝ χ 2 eloszl´ snak (χ2 ) nevezz¨ k. o ı ue a o aa e u a u Ekkor az ∑i=1 ξi n

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

28

2.5.2. Ferdes´ g es lapults´ g e ´ a
A ferdes´ g egy eloszl´ s szimmetri´ j´ t pr´ b´ lja megadni. Ha a ferdes´ g nulla, akkor az eloszl´ s e a aa o a e a szimmetrikus (p´ ld´ ul norm´ lis eloszl´ sokn´ l), ellenkez˝ esetben a v´ rhat´ ert´ kt˝ l balra (negat´v e a a a a o a o ´ e o ı ferdes´ g eset´ ben) vagy jobbra ny´ lik el”. A ferdes´ gnek t¨ bb mutat´ j´ t deﬁni´ lt´ k ; ezek k¨ z¨ l a e e u e o oa a a o u ” √ D3 [X] legelterjedtebb a γ1 = (D2 [X])3/2 ), de szok´ s m´ g a β1 = γ1 -et is hasz´ lni. a e a Szint´ n nem az alapfogalmak k¨ z´ tartozik a lapultsag fogalma, ami egy eloszl´ s cs´ csoss´ g´ t e o e a u a a ´ D4 [X] adja meg. A lapults´ gnak is t¨ bb elfogadott deﬁn´ci´ ja l´ tezik. Legelterjedtebb a β 2 = (D2 [X])2 (kurtosis a o ı o e proper), es a γ2 = β2 − 3 (kurtosis excess) ert´ kek. A norm´ lis eloszl´ s β2 lapults´ gi ert´ ke h´ rom, a ´ ´ e a a a ´ e a norm´ lisn´ l laposabbak´ h´ romn´ l kisebb. A ferdes´ get es a lapults´ got annak eld¨ nt´ s´ n´ l szokt´ k a a e a a e ´ a o ee e a haszn´ lni, hogy egy adott minta sz´ rmazhat-e norm´ lis eloszl´ sb´ l. a a a a o

2.5.3. Hoeffding-korl´ t a
A Hoeffding-korl´ t a mintav´ telz´ ssel kapcsolatos all´t´ sok alapja. a e e ´ ıa 2.1. lemma. Legyen Xi , 1 ≤ i ≤ n µ v´ rhat´ ert´ k˝ , f¨ ggetlen, azonos eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ k a o´ e u u au o ı ue a o es a ≤ Xi ≤ b minden i-re. Ekkor tetsz˝ leges λ > 0-ra fenn´ ll a k¨ vetkez˝ egyenl˝ tlens´ g : o a o o o e ´ P
2 2 1 ∑ Xi − µ ≥ λ ≤ 2e−2λ n/(b−a) . n i=1

2.5.4. Entr´ pia o
Legyen X egy diszkr´ t val´ sz´n˝ s´ gi v´ ltoz´ , amely ert´ keit egy X halmazb´ l veheti fel. Az l X = e o ı ue a o ´ e o = − log2 p(X ) val´ sz´n˝ s´ gi v´ ltoz´ t az X entr´ pias˝ r˝ s´ g´ nek nevezz¨ k. X entr´ pi´ j´ t – H(X )-et – o ı ue a o o uue e u o aa ezen v´ ltoz´ v´ rhat´ ert´ k´ vel deﬁni´ ljuk : a o a o´ e e a H(X ) = −
x∈X

∑ p(x) log2 p(x).

Az entr´ pia valamik´ ppen a v´ ltoz´ bizonytalansag´ t fejezi ki. Ha X elemsz´ ma r¨ gz´tett es az X o e a o a o ı ´ ´ a v´ ltoz´ csak egy ert´ ket vehet fel (mert az egyik ert´ k val´ sz´n˝ s´ ge 1), akkor H(X ) ert´ ke 0 (nincs a o ´ e ´ e o ı ue ´ e bizonytalans´ g), ha pedig X eloszl´ sa egyenletes eloszl´ st k¨ vet, akkor az entr´ pia a maximum´ t a a a o o a veszi fel, log2 (|X|)-t. Legyen X es Y k´ t diszkr´ t ert´ k˝ val´ sz´n˝ s´ gi v´ ltoz´ . Az X -nek az Y felt´ tellel vett felt´ teles ´ e e ´ e u o ı ue a o e e entr´ pi´ ja : o a H(X |Y ) = − ∑ ∑ p(x, y) log2 p(x|y),
y∈Y x∈X

vagy egy kicsit atalak´tva kapjuk, hogy ´ ı H(X |Y ) = −
y∈Y

∑ p(y) ∑ p(x|y) log2 p(x|y).
x∈X

Be lehet bizony´tani, hogy H (X |Y ) = H (XY ) − H (Y ), ami inform´ lisan ugy lehet megfogalmazni, ı a ´ hogy a felt´ teles entr´ pia megadja, hogy mennyi bizonytalans´ g marad X -ben, ha elvessz¨ k az Y e o a u bizonytalans´ g´ t. a a A felt´ teles entr´ pia sz´ mos tulajdons´ ga k¨ z¨ l mi csak az al´ bbit fogjuk felhaszn´ lni : e o a a o u a a 0 ≤ H(X |Y ) ≤ H(X ).

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

29

2.6. Statisztika
A statisztik´ ban altal´ ban X1 , X2 , . . . , Xn f¨ ggetlen, azonos eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ k vana ´ a u au o ı ue a o nak megadva, amiket mint´ knak nevez¨ nk. Az eloszl´ st nem ismerj¨ k pontosan, de rendelkez´ s¨ nkre a u a u eu allnak megﬁgyel´ sek. ´ e ¯ Legyenek X1 , X2 , . . . , Xn f¨ ggetlen, azonos eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ k. Ekkor a X = u au o ı ue a o X1 +X2 +···+Xn n ∗2 = 1 = val´ sz´n˝ s´ gi v´ ltoz´ t empirikus k¨ z´ pnek, vagy minta´ tlagnak, a sn o ı ue a o oe a n n−1 ∑i=1 (Xi − 2 val´ sz´n˝ s´ gi v´ ltoz´ t pedig korrig´ l empirikus szor´ sn´ gyzetnek nevezz¨ k. ¯ − X) o ı ue a o a a e u ∗2 2 eloszl´ s deﬁn´ci´ j´ b´ l k¨ vetkezik, hogy az (n−1)s val´ sz´n˝ s´ gi v´ ltoz´ eloszl´ sa o ı ue a o a A χ a ı oa o o σ2 2 , amennyiben a s∗2 σ sz´ r´ s´ , norm´ lis eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ k korrig´ l empirikus χn oau a au o ı ue a o a szor´ sn´ gyzet´ t jel¨ li a e e o 2.2. deﬁn´ci´ . Legyenek X es Y k´ t olyan val´ sz´n˝ s´ gi v´ ltoz´ , amelyek eloszl´ sa rendre χ2 es χ2 . ı o e o ı ue a o a ´ m n ´ X/n Ekkor a Z = Y /m val´ sz´n˝ s´ gi v´ ltoz´ eloszl´ s´ t Fn,m eloszl´ snak h´vjuk. o ı ue a o aa a ı

2.6.1. Hipot´ zisvizsg´ lat e a
A hipot´ zisvizsg´ lat feladata mindig valamilyen all´t´ s helyess´ g´ nek vizsg´ lata. Ezt az all´t´ st e a ´ ıa e e a ´ ıa nullhipot´ zisnek nevezz¨ k, jele H0 . A nullhipot´ zis altal´ ban egy val´ sz´n˝ s´ gi v´ ltoz´ valamely pae u e ´ a o ı ue a o ram´ ter´ re vagy a v´ ltoz´ viselked´ s´ re vonatkoz´ all´t´ s. Az all´t´ s igazol´ s´ hoz vagy elvet´ s´ hez e e a o ee o´ ıa ´ ıa aa ee k´s´ rletezget´ sek, mint´ k allnak rendelkez´ s¨ nkre. Ha a mint´ k alapj´ n a nullhipot´ zist elvetj¨ k, holıe e a ´ eu a a e u ott az igaz, akkor els˝ faj´ hib´ t k¨ vet¨ nk el. Ellenkez˝ esetben – amikor a nullhipot´ zis hamis, de mi o u a o u o e elfogadjuk – m´ sodfaj´ hib´ r´ l besz´ l¨ nk. Puszt´ n mint´ k seg´ts´ g´ vel nem tudunk teljesen biztos a u ao eu a a ı e e v´ laszt adni. A gyakorlatban egy param´ terrel (α) r¨ gz´tik az els˝ faj´ hiba elk¨ vet´ s´ nek megengea e o ı o u o ee dett val´ sz´n˝ s´ g´ t. Az 1 − α ert´ ket a proba szintj´ nek h´vjuk. o ı ue e ´ e e ı ´ ¨ Osszefoglalva teh´ t, adott egy all´t´ s, egy param´ ter (α) es mint´ k sorozata. Feladatunk, hogy a a ´ ıa e ´ a mint´ k alapj´ n c´ foljuk vagy igazoljuk az all´t´ st ugy, hogy bizony´that´ an α-n´ l kisebb legyen annak a a a ´ ıa ´ ı o a val´ sz´n˝ s´ ge, hogy az all´t´ s igaz, holott mi c´ foljuk. A hipot´ zisvizsg´ latn´ l a mint´ k eredm´ nyeit o ı ue ´ ıa a e a a a e felhaszn´ lva kisz´ m´tunk egy un. probastatisztika ert´ ket, es ezt vetj¨ k ossze egy ismert eloszl´ ssal. a a ı ´ ´ e ´ u ¨ a ´ 1. Az α-nak c´ lszer˝ kis (0.1 es 0.01 k¨ z¨ tti) ert´ ket v´ lasztani e u ´ o o ´ e a

2.6.2. Az F-pr´ ba o
Az F-pr´ ba arra szolg´ l, hogy k´ t f¨ ggetlen, norm´ lis eloszl´ s´ val´ sz´n˝ s´ gi v´ ltoz´ (X , Y ) o a e u a au o ı ue a o sz´ r´ s´ nak egyenl˝ s´ g´ t eld¨ nts¨ k. oaa oe e o u H0 : σX = σY . Tudjuk, hogy X σ2 X es ´ X pot´ zis fenn´ ll, akkor az e a
(n −1)s∗2
∗2 (nY −1)sY 2 σY

χ2 eloszl´ s´ ak (nX − 1) illetve (nY − 1) param´ terrel. Ha a nullhiau e F= s∗2 X ∗2 sY

1 pr´ bastatisztika F-eloszl´ s´ (nX −1, nY −1) param´ terrel. Azonban F is F-eloszl´ s´ (nY −1, nX −1) o au e au ∗ = max{F,1/F} ≥ 1 statisztik´ t szok´ s haszn´ lni. param´ terrel, ez´ rt a gyakorlatban F e e a a a
1 Gondolkozzunk el

azon, hogy mi t¨ rt´ nne, ha α-nak nagyon kis ert´ ket v´ lasztan´ nk! o e ´ e a a

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

30

2.6.3. A χ2 -pr´ ba o
A χ2 pr´ b´ k az al´ bbi t´ telt haszn´ lj´ k fel. o a a e a a 2.3. t´ tel. Legyen A1 , A2 , . . . , Ar egy teljes esem´ nyrendszer (r ≥ 3), legyen pi = P(Ai ) > 0, i = e e = 1, . . . , r. Ism´ telj¨ k a k´s´ rletet n-szer egym´ st´ l f¨ ggetlen¨ l. Jel¨ lje Xi az Ai esem´ ny bek¨ vete u ıe a o u u o e o kez´ s´ nek sz´ m´ t. Bel´ that´ , hogy ekkor a ee a a a o (X j − np j )2 ∑ np j j=1 val´ sz´n˝ s´ gi v´ ltoz´ eloszl´ sa n → ∞ eset´ n χ2 eloszl´ shoz konverg´ l. o ı ue a o a e r−1 a a A χ2 eloszl´ s kvantiliseit f¨ ggv´ ny-t´ bl´ zatokban megtal´ lhatjuk. a u e a a a A χ2 -pr´ ba legfontosabb alkalmaz´ si ter¨ letei az (1.) illeszked´ s-, (2.) f¨ ggetlens´ g- es (3.)hoo a u e u e ´ mogenit´ svizsg´ lat. T´ m´ nkhoz a f¨ ggetlens´ g-vizsg´ lat tartozik hozz´ , ´gy a tov´ bbiakban ezt a a e a u e a a ı a r´ szletezz¨ k. A χ2 pr´ ba ir´ nt erdekl˝ d˝ knek a [86] magyar nyelv˝ irodalmat aj´ nljuk. e u o a ´ o o u a
r

¨ 2.6.4. Fuggetlens´ gvizsg´ lat e a
Legyen A1 , A2 , . . . , Ar es B1 , B2 , . . . , Bs k´ t teljes esem´ nyrendszer. V´ gezz¨ nk n k´s´ rletet. Null´ e e e u ıe hipot´ zis¨ nk az, hogy az esem´ nyrendszerek f¨ ggetlenek. e u e u H0 : P(Ai , B j ) = P(Ai )P(B j ), i = 1, . . . , r j = 1, . . . , s

Ha az esem´ nyek val´ sz´n˝ s´ gei adottak, akkor tiszta illeszked´ s vizsg´ lati feladatr´ l besz´ l¨ nk, ahol e o ı ue e a o eu H0 : P(Ai ∩ B j ) = pi q j hiszen pi , q j ert´ kek adottak. Jel¨ lje ki j az Ai ∩ B j esem´ ny bek¨ vetkez´ s´ nek sz´ m´ t. Ekkor ki kell ´ e o e o ee a a sz´ m´tanunk a a ı r s (k − np q )2 ij i j χ2 = ∑ ∑ npi q j i=1 j=1 un. pr´ bastatisztika ert´ ket. Jobban megvizsg´ lva χ2 -et l´ thatjuk, hogy az egy ´ o ´ e a a (megﬁgyelt ert´ k - v´ rt ert´ k)2 ´ e a ´ e jelleg˝ kifejez´ s. Amennyiben χ2 kicsi, akkor a megﬁgyelt u e ∑ v´ rt ert´ k a ´ e ert´ kek k¨ zel vannak azokhoz, amit H0 fenn´ ll´ sa eset´ n v´ rtunk, teh´ t a nullhipot´ zist elfogadjuk. ´ e o a a e a a e Hogy pontosan mit jelent az, hogy kicsi”, azt a 2.3-as t´ tel alapj´ n χ2 e a rs−1 es az α param´ ter ´ e ” 2 hat´ rozza meg. T´ bl´ zatb´ l keress¨ k ki, hogy a χrs−1 eloszl´ s hol veszi fel az 1−α ert´ ket. Amennyia a a o u a ´ e 2 ert´ kn´ l, akkor a nullhipot´ zist elfogadjuk, ellenkez˝ esetben ben ez nagyobb a fent kisz´ m´tott χ ´ e e a ı e o elvetj¨ k. u A gyakorlatban sokkal t¨ bbsz¨ r fordul el˝ az az eset, amikor az esem´ nyek val´ sz´n˝ s´ geit nem o o o e o ı ue ismerj¨ k. Ekkor a val´ sz´n˝ s´ geket az esem´ nyek relat´v gyakoris´ g´ val becs¨ lj¨ k meg. Jel¨ lj¨ k az u o ı ue e ı a a u u o u ´ o e a a Ai esem´ ny gyakoris´ g´ t ki. -vel, teh´ t ki. = ∑sj=1 ki j es hasonl´ an B j esem´ ny gyakoris´ g´ t k. j -vel. χ2 e a a a pr´ b´ k sor´ n az adatok szeml´ ltet´ s´ nek gyakran haszn´ lt eszk¨ ze az un. kontingencia-t´ bl´ zat. Ez o a a e ee a o ´ a a egy t¨ bbdimenzi´ s t´ bl´ zat, amely cell´ iban a megfelel˝ esem´ ny bek¨ vetkez´ s´ nek sz´ ma tal´ lhat´ . o o a a a o e o ee a a o Egy ilyen 2-dimenzi´ s kontingencia-t´ bl´ zatot l´ thatunk a k¨ vetkez˝ abr´ n. o a a a o o´ a

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK B1 k11 k21 kr1 k.1 B2 k12 k22 kr2 k.2 ... Bs k1s k2s krs k.s ∑ k1. k2. kr. n

31

A1 A2 . . . Ar ∑

Az Ai ∩ B j megﬁgyelt ert´ ke ki j , v´ rt ert´ ke H0 eset´ n n · ´ e a ´ e e χ2 =

ki. k. j · . Ezek alapj´ n χ2 ert´ ke : a ´ e n n

i=1 j=1

∑∑

r

s

(ki j −

ki. k. j 2 ) n ki. k. j n

Mivel a f¨ ggetlens´ g fenn´ ll´ sa eset´ n r − 1 darab pi -t es s − 1 darab q j val´ sz´n˝ s´ get kell megu e a a e ´ o ı ue becs¨ lni, ´gy a fenti H0 fenn´ ll´ sa eset´ n χ2 u ı a a e rs−1−(r+s−2) = χ2 eloszl´ s´ . au (r−1)(s−1) 2 eloszl´ s k¨ zel´t´ se csak abban az esetben pontos, ha a k ert´ kek nagyok. Persze nincs pontos Aχ a o ıe ij ´ e szab´ ly arra n´ zve, hogy mennyire kell nagynak lennie. Azt szokt´ k mondani, hogy a kontingencia a e a t´ bl´ zat elemeinek 90%-a nagyobb legyen otn´ l. a a ¨ e

2.7. Algoritmus-elm´ let e
Terjedelmi okok miatt csak felsorolni tudjuk azokat az algoritmusokat, amelyeket az olvas´ nak o ismernie kell. Ezek pedig : line´ ris-, bin´ ris keres´ s, m´ lys´ gi-, sz´ less´ gi bej´ r´ s, Kruskal algoritmua a e e e e e aa sa minim´ lis s´ ly´ fesz´t˝ fa meghat´ roz´ s´ hoz stb. Emellett felt´ telezz¨ k, hogy az olvas´ tiszt´ ban a u u ıo a aa e u o a van az NP-teljess´ g (vagy altal´ nosabban a bonyolults´ g) elm´ let´ nek alapjaival. e ´ a a e e

´ a 2.8. Adatstruktur´ k
Felt´ telezz¨ k, hogy az olvas´ tiszt´ ban van a lista (vektor) es a t¨ mb fogalm´ val. Az e u o a ´ o a adatb´ ny´ szatban tov´ bbi k¨ zkedvelt adatstrukt´ r´ i az un. sz ofa (trie), vagy m´ s n´ ven preﬁx-fa a a a o ua ´ a e ´ (preﬁx-tree), a piros-fekete fa, illetve a hash-t´ bla. a

2.8.1. Sz´ f´ k oa
A sz´ f´ t eredetileg sz´ t´ r szavainak t´ rol´ s´ n´ l alkalmazt´ k, annak erdek´ ben, hogy gyorsan el leoa oa a aa a a ´ e hessen d¨ nteni, hogy egy adott sz´ szerepel-e a sz´ t´ rban [41], [61]. A szavak az abc felett ertelmezett o o oa ´ sorozatok, ´gy altal´ nosan azt mondhatjuk, hogy egy sz´ fa egy adott v´ ges elemhalmaz feletti soroı ´ a o e zatok t´ rol´ s´ ra es gyors visszakeres´ s´ re alkalmas adatstrukt´ ra. A sz´ fa angol neve (trie, amit ugy a aa ´ ee u o ´ ejt¨ nk, mint a try sz´ t) a visszakeres´ s angol ford´t´ s´ b´ l sz´ rmazik (retrieval). A tov´ bbiakban az u o e ıa a o a a alaphalmazt I-vel, az alaphalmaz felett ertelmezett, adott sorozatok halmaz´ t sz´ t´ rnak h´vjuk. A 2.1 ´ a oa ı abr´ n egy sz´ f´ t l´ thatunk, mely az C, FC, FB, CBP, FCAMP, FCABM sorozatokat t´ rolja. ´ a oa a a A sz´ fa egy (lefel´ ) ir´ ny´tott gy¨ keres c´mk´ zett fa. Egy d-edik szint˝ pontb´ l csak d + 1-edik o e a ı o ı e u o szint˝ pontba mutathat el. N´ ha a hat´ konys´ g kedv´ ert minden pontb´ l a pont sz¨ l˝ j´ re is mutat u ´ e e a e´ o uoe

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

32

0 1 3 A 6 8 P 10 M B 9 M 11 C F B 4

C 2 B 5 P 7

2.1. abra. P´ lda sz´ f´ ra ´ e oa el. A gy¨ keret 0. szint˝ nek tekintj¨ k. A c´mk´ k az I-nek egy-egy elemei. Minden pont egy elemso´ o u u ı e rozatot reprezent´ l, amely a gy¨ k´ rb˝ l ebbe a pontba vezet˝ eleken tal´ lhat´ elemekb˝ l all. Akkor a o e o o´ a o o ´ tartalmazza a sz´ fa az S sorozatot, ha van olyan pont, amely az S-t reprezent´ lja. o a Ha egy sorozatot tartalmaz egy sz´ fa, akkor annak tetsz˝ leges preﬁx´ t is tartalmazza. A preo o e ﬁx azonban nem biztos, hogy eleme a sz´ t´ rnak. Ezt a probl´ m´ t k´ tf´ lek´ ppen lehet kik¨ sz¨ b¨ lni. oa e a e e e u o o Egyr´ szr˝ l megk¨ l¨ nb¨ ztet¨ nk elfogado es nem elfogad´ pontokat. Egy sorozatot akkor tartalmazza e o uo o u o ´ ´ a sz´ fa, ha van olyan elfogad´ allapot, amely a sorozatot reprezent´ lja. M´ sr´ szr˝ l bevezethet¨ nk egy o o´ a a e o u speci´ lis elemet, amit minden sorozat v´ g´ re illeszt¨ nk, tov´ bb´ sorozatot csak lev´ l reprezent´ lhat. a e e u a a e a A sz´ f´ nak k´ t implement´ ci´ j´ t k¨ l¨ nb¨ ztetj¨ k meg att´ l f¨ gg˝ en, hogy milyen technik´ t alkaloa e a oa uo o u o u o a mazunk az elek t´ rol´ s´ ra. Az un. t´ bl´ zatos implement´ ci´ ban (tabular implementation) [61] minden ´ a aa ´ a a a o ponthoz egy r¨ gz´tett hossz´ s´ g´ , mutat´ kat tartalmaz´ vektort vesz¨ nk fel. Az i-edik mutat´ mutat o ı ua u o o u o az i-edik elemhez tartoz´ el v´ gpontj´ ra. Ha a pontnak nincs ilyen c´mk´ j˝ ele, akkor a mutat´ ert´ ke o´ e a ı eu´ o´ e NULL. A vektor hossza az I elemsz´ m´ val egyezik meg. a a A l´ ncolt list´ s implement´ ci´ ban [41] az eleket egy l´ ncolt list´ ban t´ roljuk. A lista elemei a a a o ´ a a a elc´mke, gyermekmutat´ p´ rok. A l´ ncolt lista k¨ vetkez˝ elem´ re mutat´ mutat´ kat megsp´ rolhatjuk, ´ ı o a a o o e o o o ha egy vektort alkalmazunk, aminek hossza megegyezik a pont eleinek sz´ m´ val, es elemei szint´ n ´ a a ´ e c´mke, mutat´ p´ rok. Ez az´ rt is j´ megold´ s, mert egy l´ p´ ssel tudunk tetsz˝ leges index˝ elemre ı o a e o a e e o u l´ pni (a c´mke, mutat´ p´ r mem´ riasz¨ ks´ glet´ nek ismeret´ ben), es nem kell a mutat´ kon kereszt¨ l e ı o a o u e e e ´ o u egyes´ vel l´ pegetn¨ nk. e e u Sz´ f´ k eset´ ben a legfontosabb elemi m˝ velet annak eld¨ nt´ se, hogy egy adott pontnak vanoa e u o e e adott c´mk´ j˝ ele, es ha van, akkor ez hova mutat. T´ bl´ zatos implement´ ci´ n´ l ezt a feladatot ı eu ´ ´ a a a o a egy l´ p´ sben megoldhatjuk a megfelel˝ index˝ elem megvizsg´ l´ s´ val. L´ ncolt list´ s, illetve v´ ltoz´ e e o u aa a a a a o hossz´ s´ g´ vektor eset´ n a megold´ s lassabb m˝ velet. A vektor minden p´ rj´ t ellen˝ rizn¨ nk kell, ua u e a u a a o u hogy a p´ r c´mk´ je megegyezik-e az adott c´mk´ vel. A hat´ konys´ got n¨ velhetj¨ k, ha a p´ rokat a ı e ı e e a o u a c´mk´ k szerint rendezve t´ roljuk, es bin´ ris keres´ st v´ gz¨ nk. ı e a ´ a e e u ´ Erdemes osszehasonl´tanunk a k´ t vektoros implement´ ci´ ban a pontok mem´ riaig´ ny´ t. ¨ ı e a o o e e Amennyiben a mutat´ k, es a c´mk´ k is 4 b´ jtot foglalnak, akkor a t´ bl´ zatos implement´ ci´ ban egy o ´ ı e a a a a o pont mem´ riaig´ nye (a vektor fejl´ c mem´ riaig´ ny´ t˝ l eltekintve) |I| · 4 b´ jt, a list´ s implement´ ci´ e o e e o e eo a a a o´ n·2·4 b´ nt, ahol n az adott pontb´ l indul´ elek sz´ ma, amire igaz, hogy 0 ≤ n ≤ |I|. Ha a sz´ fa pontjai a o o´ a o

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

33

olyanok, hogy kev´ s el¨ k van, akkor a list´ s implement´ ci´ nak lesz kevesebb mem´ ri´ ra sz¨ ks´ ge, e ´u a a o o a u e sok eln´ l azonban t´ bl´ zatos implement´ ci´ a jobb megold´ s. A k´ t technik´ t otv¨ zhetj¨ k ak´ r egy ´ e a a a o a e a ¨ o u a adott sz´ f´ n bel¨ l is [154], [184] : ha a pont eleinek sz´ ma meghalad egy korl´ tot (´ ltal´ ban I/2-t), oa u ´ a a a a akkor t´ bl´ zatos implement´ ci´ t haszn´ lunk, ellenkez˝ esetben maradunk a list´ s megold´ sn´ l. a a a o a o a a a Megeml´t¨ nk k´ t sz´ fa lesz´ rmazottat. Ezek a nyesett szof´ k (pruned trie) es a PATRICIA f´ k. ıu e o a ´ a ´a Mindk´ t fa abban k¨ l¨ nb¨ zik az eredeti sz´ f´ t´ l, hogy kiiktatj´ k az olyan utakat a f´ b´ l, amelyekben e uo o oao a a o nincsen el´ gaz´ s. A nyesett f´ n´ l ezt kiz´ r´ lag lev´ lhez vezet˝ utakkal teszik, PATRICIA f´ kn´ l ez a a a a a ao e o a a korl´ toz´ s nem all fenn. a a ´ Halmazokat tartalmaz´ sz´ f´ k o oa Amennyiben a sz´ fa hat´ kony adatstrukt´ ra sorozatok t´ rol´ s´ ra, es gyors visszakeres´ s´ re, akkor o e u a aa ´ ee ugyanez mondhat´ el elemhalmazok eset´ re is. Ha teh´ t elemhalmazok adottak es az a feladat, hogy o e a ´ gyorsan meg´ llap´tsuk, hogy egy elemhalmaz szerepel-e a megadottak k¨ z¨ tt, akkor el´ g deﬁni´ lnunk a ı o o e a az elemeken egy teljes rendez´ st, ami alapj´ n a halmazokat sorozatokk´ alak´thatjuk. e a a ı K¨ l¨ nb¨ z˝ rendez´ sek k¨ l¨ nb¨ z˝ sorozatokat all´tanak el˝ , amelyek k¨ l¨ nb¨ z˝ sz´ f´ kat uo o o e uo o o ´ ı o uo o o oa eredm´ nyeznek. Erre mutat p´ ld´ t a k¨ vetkez˝ abra, ahol k´ t olyan sz´ f´ t l´ thatunk, amelyek a e e a o o ´ e oa a AB, ABC elemhalmazokat t´ rolj´ k. Az els˝ sz´ fa az ABC szerint cs¨ kken˝ sorrendet haszn´ l (C a a o o o o a B A), m´g a m´ sodik ennek ellenkez˝ j´ t. ı a oe 0 A 1 2 B C 3 1 A 3 4 B 0

C 2 A

2.2. abra. P´ lda : k¨ l¨ nb¨ z˝ rendez´ st haszn´ l´ sz´ f´ k ´ e uo o o e ao oa Egy sz´ fa mem´ riaig´ ny´ t ar´ nyos a sz´ fa pontjainak sz´ m´ val, ´gy jogos az az ig´ ny, hogy azt a o o e e a o a a ı e teljes rendez´ st v´ lasszuk, amely a legkevesebb pont´ , azaz minim´ lis m´ ret˝ , sz´ f´ t adja. Ez az un. e a u a e u oa ´ minim´ lis sz´ fa el˝ all´t´ s´ nak feladata. Sajnos ez egy neh´ z feladat. a o o´ ı a a e 2.4. t´ tel. A minim´ lis sz´ fa probl´ ma NP-neh´ z . e a o e e Eredetileg a feladatot n-esekre bizony´tott´ k, de ebb˝ l k¨ vetkezik, hogy halmazokra is erv´ nyes. ı a o o ´ e Legyen ugyanis az alaphalmaz I. Ekkor minden halmazt felfoghatunk, mint egy |I| hossz´ bin´ ris u a ert´ keket tartalmaz´ vektort. ´ e o A fenti p´ ld´ t szeml´ lve az embernek az az erz´ se t´ mad, hogy az a rendez´ s adja a legkevee a e ´ e a e sebb cs´ cs´ sz´ f´ t, amelyeben az elemek a halmazokban val´ el˝ fordul´ sok sz´ m´ nak ar´ ny´ ban u u oa o o a a a a a cs¨ kken˝ sorba vannak Rendezve. Ugyanis a gyakori elemek fognak a halmazok kapott sorozatok o o elej´ re ker¨ lni, es ezek az elemek, mivel gyakoriak sok sorozat elej´ n lesznek megtal´ lhat´ k. A sz´ fa e u ´ e a o o a k¨ z¨ s preﬁxeket csak egyszer t´ rolja, ´gy akkor lesz a sz´ fa m´ rete v´ rhat´ an a legkisebb, ha min´ l o o a ı o e a o e t¨ bb sorozatnak van k¨ z¨ s preﬁxe. Az el˝ z˝ abra is ezt sugallta. o o o o o´

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

34

Sajnos a fenti m´ don kapott sz´ fa nem felt´ tlen¨ l adja a legkevesebb pontot tartalmaz´ sz´ f´ t. o o e u o oa Ezt a legegyszer˝ bben egy ellenp´ ld´ val tudjuk bizony´tani. Legyenek a halmazaink a k¨ vetkez˝ ek : u e a ı o o AB, AC, CZ, BCZ, Z. A Z elem gyakoris´ ga 3, az X elem´ 3, A-´ 2 es a t¨ bbi elem´ 1. Ha felrajzoljuk a e e ´ o e ezen gyakoris´ gok alapj´ n kapott rendez´ s (B > X > A > K > L > M > N, de a K, L, M, N elemek a a e egym´ shoz viszony´tott sorrendje tetsz˝ leges lehet) szerinti sz´ f´ t, akkor a bal oldali sz´ f´ t kapjuk. a ı o oa oa Ha az A es X elemek sorrendj´ t felcser´ lj¨ k, akkor eggyel kevesebb pontot tartalmaz´ sz´ f´ t kapunk ´ e e u o oa (jobb oldal).

T

DESC

TOPT
C 3 1 A 7 3 C 7 B Z C 4 5 0 A 2 B C 6

0 1 4 C 8 B Z C 5 B 2 A 6

2.3. abra. Ellenp´ lda arra, hogy az el˝ fordul´ s szerinti cs¨ kken˝ sorrend adja a minim´ lis m´ ret˝ ´ e o a o o a e u sz´ f´ t oa Patr´cia-f´ k ı a Egy ir´ ny´tott utat l´ ncnak h´vunk, ha minden pontj´ nak csak egy gyereke van. A Patr´cia-fa a a ı a ı a ı sz´ f´ b´ l sz´ rmaztathat´ ugy, hogy a sz´ fa nem b˝ v´thet˝ l´ ncait egy-egy ell´ vonjuk ossze. Az uj el a oa o a o´ o o ı o a ´ e ¨ ´ ´ l´ nc utols´ pontj´ ba mutat, c´mk´ je a l´ nc eleinek c´mk´ ib˝ l all´ sorozat. Ha a l´ nc¨ sszevon´ st csak a o a ı e a ´ ı e o ´ o a o a a lev´ lben v´ gz˝ d˝ l´ ncokra hajtjuk v´ gre, akkor un Patr´cia* f´ t kapunk. e e o o a e ´ ı a Ha a sz´ fa sok l´ ncot tartalmaz, akkor a Patr´cia-fa sokkal hat´ konyabb. Ellenkez˝ esetben viszont o a ı e o t¨ bb mem´ ri´ t haszn´ l, mivel a c´mk´ ket vektorokban t´ roljuk, ami egyetlen elem t´ rol´ sa eset´ n nem o o a a ı e a a a e c´ lravezet˝ a nagy t¨ bbletk¨ lts´ g miatt. e o o o e

2.8.2. Piros-fekete f´ k a
A piros-fekete (RB-tree vagy symmetric binary B-trees) f´ k a kiegyens´ lyozott bin´ ris f´ k (balana u a a ced binary tree) egy t´pusa. Minden cs´ csnak sz´ne van, hagyom´ nyosan piros vagy fekete. Speci´ lis ı u ı a a forgat´ sokat haszn´ l´ besz´ r´ s m˝ velet biztos´tja, hogy b´ rmely a gy¨ k´ rb˝ l lev´ lbe vezet˝ ut hossza a ao ua u ı a o e o e o´ ne legyen nagyobb, mint a legr¨ videbb ilyen ut hossz´ nak k´ tszerese. Egy piros-fekete fa a k¨ vetkez˝ o ´ a e o o tulajdons´ gokkal rendelkezik : a I. Minden cs´ csnak a sz´ne piros vagy fekete. u ı II. Minden lev´ l sz´ne fekete. e ı III. Minden piros cs´ csnak mindk´ t ﬁa fekete. u e IV. B´ rmely k´ t, azonos cs´ csb´ l indul´ , lev´ lig vezet˝ uton ugyanannyi fekete cs´ cs van. a e u o o e o´ u A fentiekb˝ l k¨ vetkezik, hogy b´ rmely n bels˝ cs´ ccsal rendelkez˝ piros-fekete fa magass´ ga legfelo o a o u o a jebb 2 lg(n + 1). A bizony´t´ s es a fa ep´t´ s´ nek menete megtal´ lhat´ az irodalomban (pl. [101]). ıa ´ ´ ıe e a o

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

35

2.8.3. Hash-t´ bla a
A hash-t´ bla magyar elnevez´ se has´t´ -t´ bla ( ), de mi ezt a sz´ t nem fogjuk haszn´ lni. A hasha e ıo a o a t´ bla elemek gyors elhelyez´ s´ re es visszakeres´ s´ re haszn´ lt adatstrukt´ ra. A t´ bl´ zatnak cell´ i a ee ´ ee a u a a a vannak, amibe elemeket helyezhet¨ nk. Minden cell´ nak van egy c´me (vagy indexe). A hash-t´ bl´ s u a ı a a t´ rol´ sban k¨ zponti szerepet t¨ lt be az elemeken ertelmezett un. hash-f uggv´ ny, ami megadja az elem a a o o ´ ´ e ¨ hash-´ rt´ k´ t. Egy elemet arra a c´mre helyez¨ nk be a hash-t´ bl´ ban, amelyet a hash-´ rt´ ke megad. e e e ı u a a e e El˝ fordulhat, hogy k¨ l¨ nb¨ z˝ elemekhez a hash-f¨ ggv´ ny ugyanazokat a hash-´ rt´ ket rendeli. Ezt o uo o o u e e e utk¨ z´ snek h´vjuk. A hash-t´ bl´ kr´ l onmag´ ban fejezeteket lehet ´rni, ennyi bevezet˝ azonban el´ g ı a a o ¨ a ı o e ¨ oe ahhoz, hogy meg´ rts¨ k a jegyzet tov´ bbi r´ szeit. e u a e

´ a 2.9. Sz´ m´t´ g´ p-architektur´ k a ıo e
Sok kutat´ alkalmazza a k¨ ls˝ t´ ras modellt az algoritmus´ nak hat´ konys´ g´ nak vizsg´ latakor. o u o a a e a a a M´ ra az ori´ si mem´ riam´ reteknek k¨ sz¨ nhet˝ en a legt¨ bb adatb´ zis elf´ r a mem´ ri´ ban, valaa ´ a o e o o o o a e o a milyen sz˝ rt form´ ban. Ilyen esetekben az elemz´ shez haszn´ lt modell leegyszer˝ s¨ dik az egyu a e a uo szer˝ bb k¨ zvetlen hozz´ f´ r´ s˝ (RAM-) modellre (amely Neumann-modell [175] n´ ven is ismert, u o aeeu e mivel a magyar sz¨ let´ s˝ Neumann J´ nos javasolta el˝ sz¨ r ezt az architekt´ r´ t.). A programokat u eu a o o ua olyan modern processzorokon futtatj´ k, amely sokkal kiﬁnomultabb a RAM-modelln´ l. A modell a e t´ lzott egyszer˝ s´t´ se ahhoz vezet, hogy az elemz´ seknek semmi k¨ ze nincs a val´ s´ ghoz. Az uj u u ıe e o oa ´ modell uj elv´ r´ sokat t´ maszt az algoritmusokkal szemben. Ezekr˝ l egy kiv´ l´ attekint´ s olvashat´ ´ aa a o ao´ e o a [119] tanulm´ nyban. A modern processzorok legfontosabb saj´ toss´ ga a t¨ bbszint˝ mem´ ria es a a a a o u o ´ cs˝ vezet´ kes (pipeline-) feldolgoz´ s. o e a

˝ 2.9.1. T¨ bbszintu mem´ ria, adatlokalit´ s o o a
A mem´ ria nem egyelten nagy blokk, sokkal ink´ bb k¨ l¨ nb¨ z˝ m´ ret˝ , k´ sleltet´ s˝ mem´ ri´ kb´ l o a uo o o e u e eu o a o all´ hierarchikus rendszer. Min´ l nagyobb a mem´ ria m´ rete, ann´ l t¨ bb id˝ kell a hozz´ f´ r´ shez. ´ o e o e a o o aee A hierarchia elemei, m´ ret szerint cs¨ kken˝ sorrendben a k¨ vetkez˝ k : regiszterek, p´ r kilob´ jtos e o o o o a a els˝ szint˝ gyors´t´ t´ r, p´ r megab´ jtos m´ sodszint˝ gyors´t´ t´ r, esetleges harmadszint˝ gyors´t´ t´ r, o u ıoa a a a u ıoa u ıoa rendszermem´ ria es merevlemez. Az adatot a rendszermem´ ri´ b´ l a m´ sodszint˝ gyors´t´ t´ rba, a o ´ o a o a u ıoa m´ sodszint˝ b˝ l az els˝ szint˝ gyors´t´ t´ rba blokkonk´ nt m´ solhatjuk. A blokkm´ ret egy Pentium 4a u o o u ıoa e a e es processzor eset´ n 128 b´ jt. e a A blokkonk´ nti feldolgoz´ s m´ s megvil´ g´t´ sba helyezi az algoritmusok vizsg´ lat´ t : egyetlen bit e a a a ıa a a el´ r´ s´ hez es beolvas´ s´ hoz egy lass´ mem´ ri´ b´ l ugyanannyi id˝ kell, mint a bitet tartalmaz´ teljes eee ´ aa u o a o o o blokk el´ r´ s´ hez es beolvas´ s´ hoz. M´ sik adat el´ r´ se ugyanebben a blokkban viszont nem ig´ nyli eee ´ aa a ee e ´ rendk´v¨ l fontos k¨ vetelm´ nny´ v´ lik adatlokalit´ s, azaz m´ r a hozz´ f´ r´ st a lass´ mem´ ri´ hoz. Igy a aee u o a ı u o e e a a hogy az adatok, amelyeket id˝ ben egym´ shoz k¨ zel dolgozunk fel, a mem´ ri´ ban is k¨ zel legyenek o a o o a o egym´ shoz. a Az adatot feldolgoz´ sakor be kell hozni a regiszterekbe. El˝ fordulhat, hogy m´ r eleve ott van, a o a mert az el˝ z˝ m˝ veletekhez sz¨ ks´ g volt r´ . A korl´ tozott sz´ m´ regiszterek miatt azonban sokkal o o u u e a a a u val´ sz´n˝ bb, hogy az egyik gyors´t´ t´ rban vagy a rendszermem´ ri´ ban helyezkedik el. S˝ t, az is lehet, o ı u ıoa o a o hogy a merevlemezen tal´ lhat´ , ha az algoritmus mem´ riaig´ nye annyira nagy, hogy lapoz´ sra van a o o e a sz¨ ks´ g. Ha a m´ sodszint˝ gyors´t´ t´ rban vagy a rendszermem´ ri´ ban helyezkedik el a k´v´ nt adat, u e a u ıoa o a ı a akkor az adathozz´ f´ r´ s un. cache miss-t okoz. Am´g ez az adat beker¨ l a regiszterekbe, a processzor aee ´ ı u

¨ ´ 2. FEJEZET. ALAPFOGALMAK, JELOLESEK

36

v´ grehajthat m´ s m˝ veleteket (ezer alapm˝ velet, p´ ld´ ul osszead´ s elv´ gz´ s´ re k´ pes ez id˝ alatt), e a u u e a ¨ a e ee e o ennek ellen´ re a teljes´tm´ nye messze elmaradhat ilyenkor a maxim´ list´ l. Teh´ t az adatstrukt´ ra, e ı e a o a u algoritmus p´ r tervez´ sekor t¨ rekedn¨ nk kell a min´ l jobb adatlokalit´ sra a cache miss-ek elker¨ l´ se a e o u e a ue erdek´ ben. ´ e

2.9.2. Cs˝ vezet´ kes feldolgoz´ s, el´ gaz´ s-el˝ rejelz´ s o e a a a o e
A programoz´ k altal haszn´ lt m˝ veleteket a ford´t´ mikroutas´t´ sok sorozat´ ra bontja. A o ´ a u ıo ıa a m˝ veleteket nem k¨ l¨ n-k¨ l¨ n, egym´ s ut´ n hajtjuk v´ gre, hanem p´ rhuzamosan dolgozzuk fel oket, u uo uo a a e a ˝ cs˝ vezet´ k haszn´ lat´ val. Sajnos azonban az adatf¨ gg˝ s´ g es a felt´ teles ugr´ sok sokat rontanak a o e a a u oe ´ e a p´ rhuzamos feldolgoz´ s hat´ konys´ g´ n. Adatf¨ gg˝ s´ gr˝ l akkor besz´ l¨ nk, ha egy utas´t´ s egy el˝ z˝ a a e a a u oe o eu ıa o o utas´t´ s eredm´ ny´ t˝ l f¨ gg. El´ gaz´ s-el˝ rejelz´ sn´ l megj´ soljuk a felt´ tel kimenet´ t, es bet¨ ltj¨ k a ıa e eo u a a o e e o e e ´ o u cs˝ vezet´ kbe az ennek megfelel˝ utas´t´ sokat. Ha a j´ sl´ s hamisnak bizonyul, akkor a cs˝ vezet´ ket o e o ıa o a o e ki kell ur´teni, es be kell t¨ lteni a helyes utas´t´ sokat. Ezt a probl´ m´ t gyakran kik¨ sz¨ b¨ lhetj¨ k ¨ ı ´ o ıa e a u o o u k¨ l¨ nb¨ z˝ technik´ k alkalmaz´ s´ val, (mint p´ ld´ ul k´ d´ trendez´ ssel) amelyet automatikusan elv´ gez uo o o a aa e a o a e e a ford´t´ . Sz´ m´t´ sig´ nyes algoritmus tervez´ sekor azonban nek¨ nk kell ugyeln¨ nk az adatf¨ ggetıo a ıa e e u ¨ u u lens´ gre es az el´ gaz´ s-el˝ rejelz´ sre. e ´ a a o e A cs˝ vezet´ kes feldolgoz´ s lehet˝ v´ teszi, hogy egy orajel alatt t¨ bb m˝ veletet is elv´ gezz¨ nk. o e a o e ´ o u e u A fent eml´tett probl´ m´ k miatt azonban a processzor atlagos teljes´tm´ nye messze nem eri el az ı e a ´ ı e ´ optimumot. A felesleges felt´ telek ronthatj´ k a hat´ konys´ got. Az el´ gaz´ s-el˝ rejelz´ s intelligens e a e a a a o e olyan szempontb´ l, hogy ha egy felt´ tel kimenete sohasem v´ ltozik, akkor a processzor ezt ﬁgyelemo e a be veszi es a k´ s˝ bbiekben ennek megfelel˝ en j´ sol. ´ a mindig igaz (vagy hamis) felt´ telek nem ´ eo o o Igy e befoly´ solj´ k a hat´ konys´ got. a a e a

3. fejezet El˝ feldolgoz´ s, hasonl´ s´ gi fuggv´ nyek o a oa ¨ e
Ebben a fejezetben a legfontosabb el˝ feldolgoz´ si m˝ veleteket ismertetj¨ k, majd r´ t´ r¨ nk aro a u u aeu ra, hogy milyen elterjedt m´ rt´ kek vannak elemek k¨ z¨ tti hasonl´ s´ gra. Mindenek el˝ tt azt kell e e o o oa o tiszt´ znunk, hogy milyen t´pus´ attrib´ tumok l´ teznek matematikus szemmel. a ı u u e Jel¨ lj¨ k az A attrib´ tum k´ t ert´ k´ t a-val es a -vel. o u u e ´ e e ´ I. A kateg´ ria t´pus´ (nominal) attrib´ tumn´ l az attrib´ tum ert´ kei k¨ z¨ tt csak azonoss´ got tuo ı u u a u ´ e o o a dunk vizsg´ lni. Teh´ t csak azt tudom mondani, hogy a = a vagy azt, hogy a = a . A kateg´ ria a a o t´pus´ attrib´ tum egy speci´ lis esete a binaris attrib´ tum, ahol az attrib´ tum csak k´ t ert´ ket ı u u a u u e ´ e ´ vehet fel. A kategoria t´pus´ attrib´ tumokat az irodalom n´ ha felsorol as (enumerated) vagy ı u u e ´ diszkr´ t t´pusnak is h´vja. M´ sodlagos jelent´ s¨ k miatt a tanulm´ nyban ezeket az elnevez´ seket e ı ı a eu a e nem haszn´ ljuk. P´ ld´ ul a felsorol´ s t´pus eml´t´ s´ n´ l a legt¨ bb informatikusnak a C++, jaa e a a ı ıe e e o va, C#-beli felsorol´ s t´pus´ v´ ltoz´ jut esz´ be, amelyek mindig egy´ rtelm˝ megfeleltet´ sben a ı u a o e e u e allnak egy eg´ sz sz´ mmal. ´ e a II. A sorrend t´pus´ (ordinal) attrib´ tumokn´ l az ert´ keket sorba tudjuk rendezni, azaz az attı u u a ´ e rib´ tum ert´ ken teljes rendez´ st tudunk megadni. Ha teh´ t a = a , akkor m´ g azt is tudjuk, hogy u ´ e e a e a > a es a < a k¨ z¨ l melyik igaz. ´ o u III. Ha az eddigiek mellett meg tudunk adni egy + f¨ ggv´ ny, amivel az elemek csoportot alkotnak, u e akkor intervallum t´pus´ (interval scale) attrib´ tumr´ l besz´ l¨ nk. ı u u o eu IV. Ha egy intervallum t´pus´ attrib´ tumn´ l meg lehet adni z´ rus ert´ ket, vagy pontosabban az ı u u a e ´ e attrib´ tum elemei gy˝ r˝ t alkotnak, akkor az attrib´ tum arany sk´ l´ j´ (ratio scale). Az ar´ ny u uu u aau a ´ sk´ l´ j´ attrib´ tumot gyakran fogjuk valos attrib´ tumnak hivni, hiszen a gyakorlati esetek aau u u ´ t¨ bbs´ g´ ben az ar´ ny sk´ l´ j´ attrib´ tumok megad´ s´ hoz val´ s sz´ mokat haszn´ lunk. Azono e e a aau u aa o a a ban ne felejts¨ k el az ar´ ny sk´ l´ j´ attrub´ tum eredeti deﬁn´ci´ j´ t, illetve azt, hogy az ar´ ny u a aau u ı oa a sk´ l´ j´ attrib´ tumok nem felt´ tlen¨ l val´ s sz´ mokat tartalmaznak. aau u e u o a P´ ld´ ul egy ugyfeleket le´r´ adatb´ zisban vannak bin´ ris (pl. : b¨ ntetett el˝ elet˝ -e), kategorikus (pl. : e a ¨ ıo a a u o´ u vall´ s, csal´ di allapot) es intervallum (pl. : evsz´ m) t´pus´ attrib´ tumok is. a a ´ ´ ´ a ı u u Furcsa m´ d nem mindig trivi´ lis, hogy egy attrib´ tum milyen t´pus´ . P´ ld´ ul az id˝ j´ r´ s jelo a u ı u e a oaa lemz´ s´ re haszn´ lt naps¨t´ses, bor´s, es}s ert´ kekre mondhatjuk, hogy ez egy katergorikus attee a u e u o ´ e rib´ tum elemei. Ugyanakkor erezz¨ k, hogy a bor´s valahol a naps¨t´ses es az es}s k¨ z¨ tt helyezu ´ u u u e ´ o o o kedik el, ´gy ink´ bb sorrend t´pus´ nak mondan´ nk az attrib´ tumot. ı a ı u a u 37

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

38

Az intervallum t´pus´ attrib´ tumok megad´ s´ ra is sz´ mokat haszn´ lunk, amelyekn´ l ertelme van ı u u aa a a e ´ a k¨ l¨ nbs´ g sz´ m´t´ s´ nak, de a h´ nyados k´ pz´ snek nincs t´ l sok. Tulajdonk´ ppen azt, hogy egy uo e a ıa a a e e u e attrib´ tum eset´ ben mikor besz´ l¨ nk intervallum es mikor ar´ ny sk´ l´ j´ t´pusr´ l az d¨ nti el, hogy u e eu ´ a aau ı o o egy´ rtelm˝ -e a z´ rus pont deﬁni´ l´ sa. Gondoljuk meg, hogy p´ ld´ ul az evsz´ mokn´ l h´ ny fajta null´ t e u e aa e a ´ a a a a ismer¨ nk. Hasonl´ a helyzet a h˝ m´ rs´ klet eset´ ben (Fahrenheit kontra Celsius). u o o e e e

3.1. El˝ feldolgoz´ s o a
3.1.1. Hi´ nyz´ ert´ kek kezel´ se a o´ e e
Az adatb´ ny´ szati algoritmusok csak olyan elemeket tudnak kezelni, amelyeknek minden atta a rib´ tuma adott. A val´ elet adatb´ zisain´ l ez nem mindig all fenn, k¨ nnyen lehet, hogy bizonyos u o ´ a a ´ o cell´ kat nem t¨ lt¨ tt ki az adatot beg´ pel˝ szem´ ly. Ezeket a hi´ nyz´ cell´ kat fel kell t¨ lteni valamia o o e o e a o a o lyen ert´ kkel. Ez lehet egy alap´ rtelmezett ert´ k (default value), de szok´ s az atlagot, a medi´ nt vagy ´ e e ´ e a ´ a a maxim´ lis, minim´ lis ert´ ket v´ lasztani olyan attrib´ tum eset´ ben amikor, ezeket deﬁni´ lni tudjuk a a ´ e a u e a (pl. : intervallum t´pus´ ak eset´ n). ı u e

´ 3.1.2. Attributum transzform´ ci´ k a o
Normaliz´ l´ s aa Normaliz´ l´ son azt ertj¨ k, hogy az attrib´ tum elemeit egy m´ sik intervallum elemeivel helyetaa ´ u u a tes´tj¨ k ugy, hogy a helyettes´tett ert´ kek eloszl´ sa megegyezzen az eredeti ert´ kek eloszl´ s´ val. ı u ´ ı ´ e a ´ e aa Tegy¨ k fel, hogy az A attrib´ tum a1 , a2 , . . . , al ert´ keket vesz fel. Az a j , j = 1, . . . , l ert´ k norm´ j´ t u u ´ e ´ e aa o u aa e o a j -vel jel¨ lj¨ k. Normaliz´ l´ sra k´ t m´ dszer terjedt el.
j A Min-max normaliz´ l´ s : Itt egy sima line´ ris transzform´ ci´ t v´ gz¨ nk : a j = maxA −minA , ahol minA aa a a o e u (maxA ) jel¨ li az A attrib´ tum legkisebb (legnagyobb) ert´ k´ t. Minden elem a [0,1] intervallumo u ´ e e ba fog esni.

a −min

−¯ ¯ Standard normaliz´ l´ s (z-score normalization) : ai = aiσAA , ahol A az A attrib´ tum atlaga, σA pedig aa u ´

a sz´ r´ sa. A hagyom´ nyos sz´ r´ s ( oa a oa ( ∑i=1 l i hat´ s´ t. aa
l

|a −a| ¯

¯ ∑l (ai −A)2 i=1 ) helyett az abszol´ t sz´ r´ st is haszn´ lni szokt´ k u oa a a l

). Ennek el˝ nye, hogy cs¨ kkenti az atlagt´ l t´ vol es˝ pontok (k¨ l¨ nc¨ k, outlier-ek) o o ´ o a o uo o

3.1.3. Mintav´ telez´ s e e
Az adatb´ ny´ szati algoritmusok altal´ ban er˝ forr´ s-ig´ nyesek. Ha a bemeneti adathalmaznak a a ´ a o a e csak egy kis szelet´ t, kis mint´ j´ t dolgozzuk fel, akkor hamarabb kapunk eredm´ nyt. A mintav´ telez´ s e aa e e e k¨ vetkezm´ nye, hogy az ´gy kapott eredm´ ny nem biztos, hogy pontos, azaz lehet, hogy nem azt az o e ı e eredm´ nyt kapjuk, mint amikor a teljes adathalmazt dolgozzuk fel. Vannak esetek, amikor a pontos e eredm´ nyn´ l fontosabb a gyors adatfeldolgoz´ s. Ilyen esetekben nagyon hasznos egy olyan mine e a tam´ ret meghat´ roz´ sa, amin´ l az algoritmus gyors, de a hib´ z´ s val´ sz´n˝ s´ ge kicsi. e a a e a a o ı ue A hiba m´ rt´ k´ r˝ l csak abban az esetben tudunk b˝ vebben nyilatkozni, ha tudjuk, milyen jelleg˝ e e eo o u osszef¨ gg´ s´ ket nyer¨ nk ki. Most azt a speci´ lis esetet n´ zz¨ k meg, amikor elemek el˝ fordul´ s´ nak ¨ u ee u a e u o aa

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

39

val´ sz´n˝ s´ g´ t akarjuk k¨ zel´teni a relat´v gyakoris´ gukkal. Gyakori mint´ k, asszoci´ ci´ s szab´ lyok, o ı ue e o ı ı a a a o a χ2 alap´ f¨ ggetlens´ gvizsg´ latn´ l ez az eset all fenn. u u e a a ´ Tegy¨ k fel, hogy elemek halmaz´ b´ l egy tetsz˝ leges x elem el˝ fordul´ s´ nak val´ sz´n˝ s´ ge p x es u a o o o aa o ı ue ´ az elemekb˝ l visszatev´ ses mintav´ telez´ ssel m mint´ t vesz¨ nk. A mintav´ telez´ s hib´ zik, amennyio e e e a u e e a ben x relat´v gyakoris´ ga elt´ r px -t˝ l, pontosabban a mintav´ telez´ s hib´ ja : ı a e o e e a hiba(m) = p rel. gyakoris´ g(x) − px ≥ ε . a Jel¨ lje Xi azt a val´ sz´n˝ s´ gi v´ ltoz´ t, ami 1, ha x-et v´ lasztottuk egy i-edik h´ z´ sn´ l, k¨ l¨ nben 0, es o o ı ue a o a u a a uo ´ legyen Y = ∑m Xi . Mivel a h´ z´ sok egym´ st´ l f¨ ggetlenek, az Y eloszl´ sa m, p x param´ ter˝ bin´ ris u a a o u a e u a i=1 eloszl´ st k¨ vet. Ezt felhaszn´ lva : a o a hiba(m) = p Y − px ≥ ε m = p Y − m · px ≥ m · ε = p Y −E Y ≥ m·ε = p Y ≥ m · (E[X ] + ε) + p Y ≤ m · (E[X ] − ε) A m´ sodik egyenl˝ s´ gn´ l kihaszn´ ltuk, hogy a binomi´ lis eloszl´ s v´ rhat´ ert´ ke m · p x . A bia oe e a a a a o´ e nomi´ lis eloszl´ s v´ rhat´ ert´ k´ t˝ l val´ elt´ r´ s val´ sz´n˝ s´ g´ re t¨ bb ismert korl´ t is l´ tezik [159]. a a a o ´ e eo o ee o ı ue e o a e Az 1-es f¨ ggel´ kben elolvashatjuk a Csernov-korl´ t egy altal´ nos form´ j´ nak bizony´t´ s´ t, itt csak a u e a ´ a aa ıa a v´ geredm´ nyt adjuk meg, ami : e e p Y ≥ m · (E[X ] + ε) ≤ e−2ε es ´ amib˝ l megkapjuk, hogy : o hiba(m) ≤ 2 · e−2ε m≥ 2 1 ln 2 2ε δ p Y ≤ m · (E[X ] − ε) ≤ e−2ε
2m 2m

2m

Amennyiben a hibakorl´ tot δ-val jel¨ l¨ m, akkor az al´ bbinak kell igaznak lennie : a oo a

Ha p´ ld´ ul azt szeretn´ nk, hogy a mintav´ telez´ s sor´ n tetsz˝ leges elem minta, – illetve e a e e e a o el˝ fordul´ s´ nak val´ sz´n˝ s´ ge – 0.01-n´ l nagyobb elt´ r´ s val´ sz´n˝ s´ ge kisebb legyen 1%-n´ l, o aa o ı ue a ee o ı ue a akkor a minta m´ rete legal´ bb 27000 kell, hogy legyen. A 3.1 t´ bl´ zatban adott elt´ r´ s- es e a a a ee ´ val´ sz´n˝ s´ gkorl´ tokhoz tartoz´ minim´ lis mintam´ ret tal´ lhat´ . o ı ue a o a e a o

3.2. Hasonl´ s´ gi m´ rt´ kek oa e e
Az adatb´ ny´ szatban gyakran sz¨ ks´ g¨ nk lesz arra, hogy attrib´ tumokkal le´rt elemek k¨ z¨ tt haa a u e u u ı o o sonl´ s´ got deﬁni´ ljunk. Term´ szetesen elv´ rjuk, hogy ha min´ l ink´ bb t¨ bb azonos ert´ k szerepel oa a e a e a o ´ e

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK ε 0.01 0.01 0.01 0.001 0.001 0.001 δ 0.01 0.001 0.0001 0.01 0.001 0.0001 |M| 27000 38000 50000 2700000 3800000 5000000

40

3.1. t´ bl´ zat. A minim´ lis minta m´ rete r¨ gz´tett ε, δ mellett a a a e o ı

az attrib´ tumaik k¨ z¨ tt ann´ l hasonl´ bbak legyenek az elemek. A gyakorlatban hasonl´ s´ gi m´ rt´ k u o o a o oa e e helyett k¨ l¨ nb¨ z˝ s´ gi m´ rt´ kkel dolgozunk, amely a hasonl´ s´ g inverze (min´ l hasonl´ bbak, ann´ l uo o o e e e oa e o a kev´ sb´ k¨ l¨ nb¨ z˝ k). Elv´ rjuk, hogy k´ t elem k¨ l¨ nb¨ z˝ s´ g´ t (d(x, y)) ki lehessen fejezni egy poe e uo o o a e uo o o e e zit´v val´ s sz´ mmal, tov´ bb´ egy elem onmag´ t´ l ne k¨ l¨ nb¨ zz¨ n, szimmetrikus legyen (d(x, y) = ı o a a a ¨ ao uo o o =d(y, x)), es teljes¨ lj¨ n a h´ romsz¨ g egyenl˝ tlens´ g (d(x, y)≤d(x, z)+d(y, z)). Teh´ t a k¨ l¨ nb¨ z˝ s´ g ´ u o a o o e a uo o o e metrika legyen. K´ t elem k¨ l¨ nb¨ z˝ s´ ge helyett gyakran mondunk majd k´ t elem t avols´ g´ t. e uo o o e e a a ´ A k¨ vetkez˝ kben sorra vessz¨ k, hogyan deﬁni´ ljuk a t´ vols´ got k¨ l¨ nb¨ z˝ t´pus´ attrib´ tumok o o u a a a uo o o ı u u ´ a eset´ ben, es azt, hogy mik´ nt lehet egyes attrib´ tumok fontoss´ g´ t (s´ ly´ t) megn¨ velni. Altal´ nosan e ´ e u a a u a o igaz az, hogy ha az attrib´ tum elemein teljes rendez´ st tudunk deﬁni´ lni (sorrend, intervallum, ar´ nyu e a a sk´ l´ zott), akkor tetsz˝ leges a1 ≤ a2 ≤ a3 ert´ kek eset´ n d(a1 , a3 ) ≥ max{d(a1 , a2 ), d(a2, a3 )}. aa o ´ e e

´ 3.2.1. Bin´ ris attributum a
Egy bin´ ris attrib´ tum olyan kateg´ ria t´pus´ attrib´ tum, amely k´ t ert´ ket vehet fel (pl. : 0 es 1). a u o ı u u e ´ e ´ Hogyan hat´ rozzuk meg x es y elemek hasonl´ s´ g´ t, ha azok m darab bin´ ris attrib´ tummal vannak a ´ oa a a u le´rva ? K´ sz´ts¨ k el a k¨ vetkez˝ osszefoglal´ t´ bl´ zatot. ı e ı u o o¨ o a a 1 0 ∑ 1 q s q+s 0 r t r+t ∑ q+r s+t m

P´ ld´ ul az 1-es sor 0-s oszlop´ hoz tartoz´ ert´ k azt jelenti, hogy r darab olyan attrib´ tum van, amelyek e a a o´ e u az x elemn´ l 1-et, y-n´ l 0-´ t vesznek fel. e a a Ez alapj´ n deﬁni´ lhatjuk az un. invari´ ns es vari´ ns hasonl´ s´ got. Az invari´ ns hasonl´ s´ got a a ´ a ´ a oa a oa olyan esem´ nyekn´ l haszn´ ljuk, amikor a bin´ ris attrib´ tum k´ t ert´ ke ugyanolyan fontos (szime e a a u e ´ e metrikus attrib´ tum), teh´ t mindegy, hogy melyiket k´ doljuk 0-val, illetve 1-essel. Ilyen attrib´ tum u a o u p´ ld´ ul egy ember neme. Az´ rt kapta ez a hasonl´ s´ g az invari´ ns jelz˝ t, mert nem v´ ltozik az ert´ ke, e a e oa a o a ´ e ha valaki m´ shogy k´ dolja az attrib´ tumokat (teh´ t k´ dol´ s invari´ ns). A legegyszer˝ bb invari´ ns a o u a o a a u a hasonl´ s´ g az elt´ r˝ attrib´ tumok relat´v sz´ ma : oa eo u ı a d(x, y) = r+s . m

Aszimmetrikus attrib´ tum eset´ ben a k´ t lehets´ ges ert´ k nem egyenrang´ . Ilyen attrib´ tum lehet u e e e ´ e u u p´ ld´ ul egy orvosi vizsg´ lat eredm´ nye. Nagyobb s´ lya van annak a t´ nynek, hogy valaki fert˝ z¨ tt e a a e u e o o

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

41

beteg, mint annak, hogy nem az. A konvenci´ knak megfelel˝ en 1-essel k´ doljuk a l´ nyeges (´ ltal´ ban o o o e a a ritka) kimenetet. A legegyszer˝ bb vari´ ns hasonl´ s´ gi m´ rt´ k a Jaccard-koefﬁciens komplementere : u a oa e e d(x, y) = 1 − q r+s = , m −t m −t

ahol nem tulajdon´tunk jelent˝ s´ get a nem jelent˝ s kimenetek egyez´ s´ nek. ı oe o ee Amennyiben szimmetrikus es aszimmetrikus ert´ kek is szerepelnek a bin´ ris attrib´ tumok k¨ z¨ tt, ´ ´ e a u o o akkor azokat vegyes attrib´ tumk´ nt kell kezelni (l´ sd a 3.2.5-os r´ szt). u e a e

´ ´ 3.2.2. Kateg´ ria t´pusu attributum o ı
´ a Altal´ nos esetben a kateg´ ria t´pus´ attrib´ tum nem csak kett˝ , hanem v´ ges sok k¨ l¨ nb¨ z˝ o ı u u o e uo o o ert´ ket vehet fel. Ilyen attrib´ tum p´ ld´ ul az ember szeme sz´ne, csal´ di allapota, vall´ sa stb. A leg´ e u e a ı a ´ a egyszer˝ bb hasonl´ s´ g a nemegyez´ sek relat´v sz´ ma : u oa e ı a d(x, y) = u , m

ahol m a kateg´ ria t´pus´ attrib´ tumok sz´ ma, u pedig azt adja meg, hogy ezek k¨ z¨ l mennyi nem o ı u u a o u egyezett. Term´ szetesen a kateg´ ria t´pus´ attrib´ tumok sem felt´ tlen¨ l szimmetrikusak, mert lehet, e o ı u u e u hogy az alap´ rtelmezett ert´ kek egyez´ se nem igaz´ n fontos. A Jaccard-koefﬁciens komplementer´ t e ´ e e a e kateg´ ria t´pus´ attrib´ tumokra is fel´rhatjuk. o ı u u ı

´ ´ 3.2.3. Sorrend t´pusu attributum ı
Sorrend t´pus´ attrib´ tum p´ ld´ ul az iskolai v´ gzetts´ g : 8 altal´ nos, befejezett k¨ z´ piskola, ı u u e a e e ´ a o e eretts´ gi, f˝ iskolai diploma, egyetemi diploma, doktori c´m. Vannak ar´ ny sk´ l´ j´ attrib´ tumok, ame´ e o ı a aau u lyeket ink´ bb sorrend t´pus´ attrib´ tumnak kezel¨ nk. P´ ld´ ul a Forma 1-es versenyeken sem az egyes a ı u u u e a k¨ r¨ k fut´ si ideje sz´ m´t, hanem az, hogy ki lett az els˝ , m´ sodik ... oo a a ı o a A sorrend t´pus´ attrib´ tumokat altal´ ban eg´ sz sz´ mokkal helyettes´tik – tipikusan 1 es M k¨ z¨ tti ı u u ´ a e a ı ´ o o eg´ sz sz´ mokkal. Ha t¨ bb sorrend t´pus´ attrib´ tumunk van, amelyek a fontos allapotok sz´ m´ ban e a o ı u u ´ a a x−1 elt´ rnek, akkor c´ lszer˝ mindegyiket a [0,1] intervallumba k´ pezni a M−1 m˝ velettel. ´ mindegyik e e u e u Igy egyenl˝ s´ llyal szerepel majd a v´ gs˝ hasonl´ s´ gi m´ rt´ kben. Ezut´ n alkalmazhatjuk valamelyik o u e o oa e e a intervallum t´pus´ hasonl´ s´ got. ı u oa

´ ´ 3.2.4. Intervallum t´pusu attributum ı
Az intervallum t´pus´ attrib´ tumokat altal´ ban val´ s sz´ mok ´rj´ k le. Ilyen attrib´ tumra p´ lda ı u u ´ a o a ı a u e egy ember s´ lya, magass´ ga, egy orsz´ g eves atlagh˝ m´ rs´ klete stb. Tekinthet¨ nk ugy egy elemu a a ´ ´ o e e u ´ re, mint egy pontra az m-dimenzi´ s vektort´ rben. Az elemek k¨ z¨ tti k¨ l¨ nb¨ z˝ s´ get a vektoraik o e o o uo o o e k¨ l¨ nbs´ g´ nek norm´ j´ val (hossz´ val) deﬁni´ ljuk (d(x, y) = ||x − y||). Legterm´ szetesebb tal´ n az uo e e aa a a e a Euklideszi-norma, de alkalmazhatjuk a Manhattan-norm´ t is. Mindk´ t m´ rt´ k a Minkowski-norma a e e e speci´ lis esete. a Euklideszi-norma : L2 (z) = |z1 |2 + |z2 |2 + · · ·+ |zm |2

Manhattan-norma : L1 (z) = |z1 | + |z2 | + · · · + |zm |

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK Minkowski-norma : L p (z) = (|z1 | p + |z2 | p + · · · + |zm | p )1/p
i

42

A p = ∞ eset´ n k´ t vektor t´ vols´ ga megegyezik a koordin´ t´ inak a legnagyobb elt´ r´ s´ vel e e a a aa eee (L∞ (z) = max{|zi |}).

Hab´ r az elemek le´r´ s´ ban m´ r csak sz´ mok szerepelnek, a h´ tt´ rben megb´ j´ a ıaa a a a e uo m´ rt´ kegys´ geknek nagy szerep¨ k van. Gondoljuk meg, ha m´ ter helyett millim´ terben sz´ molunk, e e e u e e a akkor sokkal nagyobb ert´ kek fognak szerepelni az elemek le´r´ s´ ban, es ´gy a k¨ l¨ nbs´ gek is ´ e ıaa ´ ı uo e megn˝ nek. A nagy ert´ kk´ szlet˝ attrib´ tumoknak nagyobb hat´ suk van a hasonl´ s´ g ert´ k´ re, mint o ´ e e u u a oa ´ e e a kis ert´ kk´ szlet˝ eknek. Jogos teh´ t az egyes attrib´ tumok normaliz´ l´ sa, azaz transzform´ ljuk oket ´ e e u a u aa a ˝ pl. a [0,1] intervallumba, majd ezen transzform´ lt attrib´ tumok alapj´ n sz´ m´tsuk a t´ vols´ gokat a u a a ı a a (3.1.2 r´ sz). e Gyakran el˝ fordul, hogy a k¨ l¨ nb¨ z˝ s´ g meg´ llap´t´ s´ n´ l bizonyos attrib´ tumokra nagyobb s´ lyt o uo o o e a ıa a a u u szeretn´ nk helyezni. P´ ld´ ul k´ t ember osszehasonl´t´ s´ n´ l a hajsz´nnek nagyobb szerepe van, mint e e a e ¨ ıa a a ı annak, hogy melyik l´ bujja a legnagyobb. Ha ﬁgyelembe vessz¨ k az attrib´ tumok s´ lyait, akkor a u u u p´ ld´ ul az Euklideszi-t´ vols´ g ´gy m´ dosul : e a a a ı o d(x, y) = w1 |x1 − y1 |2 + w2 |x2 − y2 |2 + · · · + wm |xm − ym |2 ,

ahol wi -vel jel¨ lt¨ k i-edik attrib´ tum s´ ly´ t es legyen ∑m wi = 1. o u u u a ´ i=1 El˝ fordulhat, hogy olyan attrib´ tummal van dolgunk, amely ert´ keit nemline´ ris l´ pt´ kben o u ´ e a e e abr´ zoljuk (nemline´ ris n¨ veked´ s˝ attrib´ tumnak szok´ s h´vni ezeket). P´ ld´ ul a bakt´ rium po´ a a o eu u a ı e a e pul´ ci´ k n¨ veked´ s´ t vagy algoritmusok fut´ si idej´ t exponenci´ lis sk´ l´ n erdemes abr´ zolni. Az a o o ee a e a aa ´ ´ a ilyen attrib´ tumokn´ l nem c´ lszer˝ k¨ zvetlen¨ l intervallum alap´ hasonl´ s´ got alkalmazni, mert ez u a e u o u u oa ori´ si k¨ l¨ nb¨ z˝ s´ geket eredm´ nyez azokon a helyeken, ahol kis k¨ l¨ nb¨ z˝ s´ get v´ runk. ´ a uo o o e e uo o o e a K´ t megk¨ zel´t´ s k¨ z¨ tt szok´ s v´ lasztani. Egyr´ szt haszn´ lhatjuk az intervallum alap´ hae o ıe o o a a e a u sonl´ s´ got, de nem az attrib´ tum eredeti ert´ k´ n, hanem annak logaritmus´ n. M´ sr´ szt diszkreoa u ´ e e a a e tiz´ lhatjuk az ert´ keket, es vehetj¨ k csak a sorrendet a hasonl´ s´ g alapj´ ul. a ´ e ´ u oa a

´ 3.2.5. Vegyes attributumok
Az el˝ z˝ r´ szekben azt tekintett¨ k at, hogyan deﬁni´ ljuk a hasonl´ s´ got k´ t elem k¨ z¨ tt adott o o e u ´ a oa e o o t´pus´ attrib´ tumok eset´ n. Mit tegy¨ nk akkor, ha egy objektum le´r´ s´ n´ l vegyesen adottak a ı u u e u ıaa a k¨ l¨ nb¨ z˝ t´pus´ – intervallum, bin´ ris, kateg´ ria stb. – attrib´ tumok ? Csoportos´tsuk az egyes attuo o o ı u a o u ı rib´ tumokat t´pusuk szerint, es hat´ rozzuk meg a k´ t elem hasonl´ s´ g´ t minden csoportra n´ zve. A u ı ´ a e oa a e kapott hasonl´ s´ gokat k´ pezz¨ k a [0,1] intervallumba. Minden attrib´ tumnak feleltess¨ nk meg egy oa e u u u dimenzi´ t a t´ rben, ´gy k´ t elem hasonl´ s´ g´ hoz hozz´ rendelhet¨ nk egy vektort a vektort´ rben. A o e ı e oa a a u e hasonl´ s´ g ert´ k´ t feleltess¨ k meg a vektor hossz´ nak. oa ´ e e u a Ennek a megk¨ zel´t´ snek a h´ tr´ nya, hogy ha p´ ld´ ul egyetlen kateg´ ria t´pus´ attrib´ tum van, o ıe a a e a o ı u u akkor az ugyanolyan s´ llyal fog szerepelni, mint ak´ r t´z bin´ ris attrib´ tum osszesen. C´ lszer˝ ez´ rt u a ı a u ¨ e u e az egyes attrib´ tumt´pusok altal szolg´ ltatott ert´ keket s´ lyozni a hozz´ juk tartoz´ attrib´ tumok u ı ´ a ´ e u a o u sz´ m´ val. a a

3.2.6. Speci´ lis esetek a
Egyre t¨ bb olyan alkalmaz´ s ker¨ l el˝ , ahol a fent deﬁni´ lt altal´ nos hasonl´ s´ gok nem ragadj´ k o a u o a ´ a oa a meg j´ l k´ t elem k¨ l¨ nb¨ z˝ s´ g´ t. A teljess´ g ig´ nye n´ lk¨ l bemutatunk k´ t olyan esetet, amikor o e uo o o e e e e e u e speci´ lis t´ vols´ gf¨ ggv´ nyre van sz¨ ks´ g. a a a u e u e

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK Elemsorozatok hasonl´ s´ ga oa

43

Elemsorozaton egy v´ ges halmazb´ l vett elemek sorozat´ t ertj¨ k. P´ ld´ ul a magyar nyelven e o a ´ u e a ertelmezett szavak elemsorozatok. N´ zz¨ k a S= abcde sorozatot. Legt¨ bben azt mondan´ nk, hogy a ´ e u o a bcdxye sorozat jobban hasonl´t S-re, mint az xxxddd sorozat. Nem ezt kapn´ nk, ha a poz´ci´ kban ı a ı o megegyez˝ elemek relat´v sz´ m´ val deﬁni´ ln´ nk a hasonl´ s´ got. o ı a a a a oa Egy elterjedt m´ rt´ k az elemsorozatok hasonl´ s´ g´ ra az un. szerkeszt´ si t´ vols´ g. K´ t sorozatnak e e oa a ´ e a a e kicsi a szerkeszt´ si t´ vols´ ga, ha az egyik sorozatb´ l kev´ s elem t¨ rl´ s´ vel ill. besz´ r´ s´ val megkape a a o e o ee uaa hatjuk a m´ sikat. Pontosabban, k´ t sorozat szerkeszt´ si t´ vols´ ga adja meg, hogy legkevesebb h´ ny a e e a a a besz´ r´ s es t¨ rl´ s m˝ velettel kaphatjuk meg az egyik sorozatb´ l a m´ sikat. A szerkeszt´ si t´ vols´ g ua ´ o e u o a e a a alapj´ n csoportos´thatunk dokumentumokat, weboldalakat, DNS sorozatokat, vagy kereshet¨ nk ila ı u leg´ lis m´ solatokat. a a ´ Bez´ rt sz¨ g alapu hasonl´ s´ g a o oa Vannak alkalmaz´ sok, ahol nem a vektorok k¨ l¨ nbs´ g´ nek a hossza a l´ nyeges, hanem a vektorok a uo e e e altal bez´ rt sz¨ g. P´ ld´ ul dokumentumok hasonl´ s´ g´ val kapcsolatban sz´ mos okfejt´ st olvashatunk, ´ a o e a oa a a e hogy mi´ rt jobb sz¨ gekkel dolgozni, mint a t´ vols´ gokkal. Eml´ keztet˝ ul a koszinusz-m´ rt´ k pontos e o a a e o¨ e e k´ plete : e xT y d(x, y) = arccos . ||x|| · ||y||

3.2.7. Dimenzi´ cs¨ kkent´ s o o e
Az adatb´ ny´ szati alkalmaz´ sokban az adathalmaz m´ rete altal´ ban nagy. Felmer¨ l a k´ rd´ s, hogy a a a e ´ a u e e lehet-e ezt a nagy adathalmaz egy kisebb m´ ret˝ vel helyettes´teni ugy, hogy a kisebb adathalmaz e u ı ´ valamilyen szempont szerint h˝ en reprezent´ lja a nagy adathalmazt. Term´ szetesen az adatb´ ny´ szati u a e a a feladatt´ l f¨ gg az, hogy mit jelent pontosan a h˝ reprezent´ ci´ . o u u a o Ebben a r´ szben dimenzi´ -cs¨ kkent´ sr˝ l lesz sz´ , melynek sor´ n az objektumok sok atte o o e o o a rib´ tummal val´ le´r´ s´ t szeretn´ nk helyettes´teni kevesebb attrib´ tumot haszn´ l´ le´r´ ssal. Hau o ıaa e ı u ao ıa sonl´ s´ gtart´ dimenzi´ -cs¨ kkent´ sr˝ l fogunk besz´ lni, ami azt jelenti, hogy tudunk adni egy olyan oa o o o e o e hasonl´ s´ gi deﬁn´ci´ t az uj le´r´ sban, ami j´ becsl´ se az eredeti hasonl´ s´ gnak. oa ı o ´ ıa o e oa n m M k M

Az eredeti adathalmazt reprezent´ l´ adathalmazt az m × n-es M m´ trixszal jellemezz¨ k, az uj ao a u ´ le´r´ st pedig az m × k-s M m´ trixszal. Az n nagyon nagy lehet (az interneten egy¨ tt el˝ fordul´ ıa a u o o 9 k¨ r¨ li volt az ert´ ke), ami azt jelenti, hogy az adatb´ zis nem biztos, sz´ p´ rok keres´ s´ n´ l p´ ld´ ul 10 o u o a ee e e a ´ e a hogy elf´ r a mem´ ri´ ban. Ezt a probl´ m´ t szeretn´ nk megker¨ lni azzal, hogy az M-et az M m´ trixszal e o a e a e u a helyettes´tj¨ k ugy, hogy k n annyira, hogy M elf´ rjen a mem´ ri´ ban. Ez´ ltal lehet˝ v´ v´ lik olyan alı u ´ e o a a o e a goritmusok futtat´ sa, amelyek felt´ telezik, hogy az adatokat le´r´ m´ trix a gyors el´ r´ s˝ mem´ ri´ ban a e ıo a eeu o a tal´ lhat´ . a o

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

44

K´ t speci´ lis feladatot t´ rgyalunk. Az els˝ ben az attrib´ tumok val´ s sz´ mok es k´ t objektum e a a o u o a ´ e k¨ l¨ nb¨ z˝ s´ g´ n (hasonl´ s´ g inverze) az Euklideszi t´ vols´ gukat ertj¨ k. A m´ sodik esetben az attuo o o e e oa a a ´ u a rib´ tumok csak bin´ risak lehetnek, es k´ t objektum hasonl´ s´ g´ t a Jaccard-koefﬁciens (l´ sd 3.2.1 u a ´ e oa a a r´ sz) adja meg. e Szingul´ ris felbont´ s a a A szingul´ ris felbont´ s az elm´ leti szempontb´ l egyik legt¨ bbet vizsg´ lt, klasszikus line´ ris ala a e o o a a gebrai eszk¨ z¨ ket haszn´ l´ dimenzi´ -cs¨ kkent´ si elj´ r´ s. Ennek alkalmaz´ sa ut´ n nyert M m´ trix o o ao o o e aa a a a soraib´ l j´ l k¨ zel´thet˝ az euklideszi t´ vols´ g, illetve az attrib´ tumok vektoraib´ l sz´ m´tott skal´ ris o o o ı o a a u o a ı a szorzattal m´ rt hasonl´ s´ g. Ut´ bbi megegyezik a koszinusz m´ rt´ kkel, ha a m´ trix sorai norm´ ltak. e oa o e e a a Ebben a szakaszban n´ h´ ny jel¨ l´ s es alapvet˝ fogalom ut´ n deﬁni´ ljuk a szingul´ ris felbont´ st, e a oe ´ o a a a a igazoljuk a felbont´ s l´ tez´ s´ t, majd megmutatjuk, hogy mik´ nt haszn´ lhat´ a felbont´ s dimenzi´ a e ee e a o a o cs¨ kkent´ sre. Megjegyezz¨ k, hogy a szakasz nem mutat a gyakorlatban numerikus szempontb´ l j´ l o e u o o alkalmazhat´ m´ dszert a felbont´ s kisz´ m´t´ s´ ra. Kisebb adathalmaz eset´ n altal´ nos line´ ris algebrai o o a a ıa a e ´ a a programcsomag (Matlab, Octave, Maple) haszn´ lata javasolt, m´g nagyobb adatb´ zisokn´ l az adatok a ı a a saj´ toss´ g´ t kihaszn´ l´ szingul´ ris felbont´ program (SVDPack) haszn´ lata aj´ nlott. a a a ao a o a a Egy U ∈ Rn×n m´ trixot ortogon´ lisnak nevez¨ nk, ha oszlopai ortogon´ lis rendszert alkotnak, a a u a azaz U T U = In , ahol In az n×n m´ ret˝ egys´ gm´ trixot, es U T az U transzpon´ ltj´ t jel¨ li. M´ sk´ ppen e u e a ´ a a o a e −1 inverz´ re U −1 = U T teljes¨ l. M´ trix ortogonalit´ s´ nak szeml´ letes mondva U invert´ lhat´ es U a o´ e u a aa e t´ rgyal´ s´ hoz sz¨ ks´ g¨ nk lesz a vektorok hossz´ nak altal´ nos´t´ s´ ra, a norma fogalm´ ra. Egy v ∈ R n a aa u e u a ´ a ıa a a vektor v 2 -vel jel¨ lt 2-norm´ j´ t a v o aa
2 2 2

=

oe a u a o ∑i v2 egyenl˝ s´ ggel deﬁni´ ljuk. Egyszer˝ en l´ that´ , i

hogy v M
F

2 Frobenius-norma, amelynek deﬁn´ci´ ja M F = ∑m ∑n Mi, j . ı o i=1 j=1 Visszat´ rve az ortogonalit´ s szeml´ letes jelent´ s´ re, egy ortogon´ lis m´ trix altal reprezent´ lt e a e ee a a ´ a line´ ris transzform´ ci´ ra ugy gondolhatunk, mint egy forgat´ sra, amely a vektorok hossz´ t nem a a o ´ a a v´ ltoztatja. A szeml´ let alapja, hogy tetsz˝ leges U ∈ Rn×n ortogon´ lis m´ trix es x ∈ Rn vektor eset´ n a e o a a ´ e

= vT v teljes¨ l. A 2-norma altal´ nos´t´ sa a tetsz˝ leges M ∈ Rm×n m´ trix eset´ n ertelmezett u ´ a ıa o a e ´

Ux

2

= x

2

teljes¨ l. Az azonoss´ g az al´ bbi elemi l´ p´ sekb˝ l k¨ vetkezik : U x 2 = (U x)T (U x) = xT (U T U )x = u a a e e o o 2 T x = x 2 . Hasonl´ an bel´ that´ , hogy tetsz˝ leges X ∈ R m×n m´ trix eset´ n es U ∈ Rm×m illetve o a o o a e ´ =x 2 n×n ortogon´ lis m´ trixok eset´ n igaz, hogy V ∈R a a e U XV T
F

= X

F

.

A r¨ vid bevezet˝ ut´ n r´ t´ r¨ nk a szingul´ ris felbont´ s deﬁn´ci´ j´ ra. Egy nem sz¨ ks´ gszer˝ en o o a aeu a a ı oa u e u m×n m´ trix szingul´ ris ert´ k felbont´ s´ n (singular value decomposition, SVD) az n´ gyzetes M ∈ R e a a ´ e aa olyan M = U ΣV T szorzatt´ bont´ st ertj¨ k, ahol U ∈ Rm×m , V ∈ Rn×n ortogon´ lis m´ trixok, tov´ bb´ a Σ m´ trix M-mel a a ´ u a a a a a ◦ -ban lefele elhelyezked˝ σ ≥ σ ≥ . . . ≥ σ > 0 pozit´v megegyez˝ m´ ret˝ es a bal fels˝ sarokb´ l 45 o e u´ o o o 1 ı 2 r sz´ mokat csupa 0 k¨ vet es a t¨ bbi elem szint´ n 0. A σi sz´ mokat szingul´ ris ert´ keknek nevezz¨ k, es a o ´ o e a a ´ e u ´ a σi = 0 v´ laszt´ ssal terjesztj¨ k ki az i > r esetre. A felbont´ sb´ l l´ that´ , hogy rang(M) = rang(Σ) = r. a a u a o a o Az U es a V oszlopait bal-, illetve jobboldali szingularis vektoroknak mondjuk. A jel¨ l´ sek attekint´ se ´ oe ´ e ´ a 3.1. abr´ n l´ that´ . ´ a a o

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

45

Σm×n Um×m

| Mm×n =  u1 |



   |   . . . um  ·   |  



σ1

..

. σr 0 ..

 . 0

    — vT —  1    . .  ·   .  T —  — vn 

T Vn×n

3.1. abra. A szingul´ ris felbont´ s sematikus v´ zlata. ´ a a a 3.1. t´ tel. Tetsz˝ leges M ∈ Rm×n m´ trixnak l´ tezik szingul´ ris ert´ k felbont´ sa, azaz l´ teznek U ∈ e o a e a ´ e a e m×m , V ∈ Rn×n ortogon´ lis m´ trixok, melyekkel ∈R a a M = U ΣV T , ahol Σ ∈ Rm×n , Σ= Σ+ 0 0 0 ,

tov´ bb´ Σ+ egy r×r m´ ret˝ diagon´ lis m´ trix, amelynek f˝ atl´ j´ ban a σ1 ≥ σ2 ≥ . . . ≥ σr > 0 sz´ mok a a e u a a o´ o a a helyezkednek el sorrendben. Bizony´t´ s: Az M T M m´ trix szimmetrikus, ez´ rt ortogon´ lis transzform´ ci´ val diagonaliz´ lhat´ es ıa a e a a o a o´ saj´ t´ rt´ kei val´ sak. Tov´ bb´ pozit´v szemideﬁnit, mert tetsz˝ leges x∈R n×n vektor eset´ n xT M T Mx= ae e o a a ı o e e ae e ı ae e = (Mx)T (Mx) = Mx 2 ≥ 0, ez´ rt a saj´ t´ rt´ kek nem negat´vak. A saj´ t´ rt´ kek legyenek σ 2 ≥ σ2 ≥ 2 1 2 o a o a a o ≥ . . . ≥ σ2 > 0. Az ezekhez tartoz´ saj´ tvektorokb´ l alkotott ortogon´ lis m´ trixot jel¨ lje V , ekkor r V T M T MV = Σ+ 2 0 0 0 .

A m´ trixot k´ t r´ szre osztva V = (Vr V2 ), ahol Vr ∈ Rn×r a pozit´v saj´ t´ rt´ khez tartoz´ saj´ tvektorokat a e e ı ae e o a tartalmazza. Vagyis VrT M T MVr = Σ+ 2 . Vezess¨ k be az u jel¨ l´ st, ekkor oe Ur = MVr Σ+ −1 M = Ur Σ+VrT .

Az Ur vektorai ortogon´ lis vektorrendszert alkotnak, ezt tetsz˝ legesen kieg´ sz´tve U = (Ur U2 ) ortoa o e ı gon´ lis m´ trixsz´ a a a Σ+ 0 VT. M =U 0 0

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

46

Most megmutatjuk, hogy szingul´ ris felbont´ s seg´ts´ g´ vel hogyan lehet dimenzi´ -cs¨ kkent´ st a a ı e e o o e v´ grehajtani. Eml´ keztet¨ nk r´ , hogy az M m´ trix n-dimenzi´ s sorvektorai objektumokat jellemeze e u a a o nek. Dimenzi´ -cs¨ kkent´ skor az n attrib´ tumot szeretn´ nk k < n dimenzi´ j´ vektorokkal jellemezni o o e u e ou ugy, hogy k¨ zben az objektumok euklideszi t´ vols´ ga vagy skal´ ris szorzattal m´ rt hasonl´ s´ ga csak ´ o a a a e oa kis m´ rt´ kben v´ ltozzon. A m´ trixszorz´ s elemi tulajdons´ ga, hogy a szingul´ ris felbont´ s az al´ bbi e e a a a a a a a form´ ban is ´rhat´ . a ı o M = U ΣV T = ∑ σi ui vT , i
i=1 r

ahol ui vT a bal- illetve a jobboldali szingul´ ris vektorokb´ l k´ pzett di´ dszorzat, azaz egy oszlop- es a o e a ´ i egy sorvektor szorzatak´ nt fel´rt m×n m´ ret˝ 1-rang´ m´ trix. L´ that´ , hogy az u i vT di´ dok monoton e ı e u u a a o a i cs¨ kken˝ σi s´ llyal szerepelnek az osszegben. Innen ad´ dik az otlet, hogy k < r eset´ n csak az els˝ k o o u ¨ o ¨ e o legnagyobb s´ ly´ di´ d osszeg´ vel k¨ zel´ts¨ k az M m´ trixot. Azaz u u a ¨ e o ı u a Mk = ∑ σi ui vT = Uk ΣkVkT , i
i=1 k

ahol Uk = (u1 u2 . . . uk ) es Vk = (v1 v2 . . . vk ), valamit Σk egy k×k m´ ret˝ diagon´ lis m´ trix, melynek ´ e u a a f˝ atl´ j´ ban a σ1 , σ2 , . . . , σk ert´ kek vannak. K¨ nnyen l´ that´ , hogy Mk sorai egy k-dimenzi´ s alt´ rben o´ o a ´ e o a o o e helyezkednek el, hiszen rang(Mk ) = rang(Σk ) = k. Sokkal m´ lyebb eredm´ ny a k¨ vetkez˝ , melynek e e o o bizony´t´ s´ t mell˝ zz¨ k. ıa a o u 3.2. t´ tel. Legyen M egy legal´ bb k rang´ m´ trix es legyen Mk a fenti m´ don sz´ m´tott k¨ zel´t´ se. Ha e a u a o a ı o ıe ´ a k¨ zel´t´ s hib´ j´ t Frobenius-norm´ val m´ rj¨ k, akkor a k-rang´ m´ trixok k¨ z¨ l az Mk m´ trix a lehet˝ o ıe aa a e u u a ou a o legjobban k¨ zel´ti M-et, azaz o ı M − Mk
F

=

N: rang(N)=k

min

M −N

F

.

Tov´ bb´ a k¨ zel´t´ s hib´ ja a σi szingul´ ris ert´ kekkel kifejezhet˝ : a a o ıe a a ´ e o M − Mk =

F

i=k+1

∑

r

σ2 . i

Az Mk m´ trix sorai az M-´ hez hasonl´ an n m´ ret˝ ek, de most m´ r egy k-dimenzi´ s alt´ rnek az a e o e u a o e T sorai, es az ´ elemei. Ennek az alt´ rnek egy b´ zis´ t alkotj´ k a Vk e a a a M = Uk Σk m´ trix k-dimenzi´ s sorvektorai e b´ zisban fejezik ki az Mk sorait. Teh´ t a dimenzi´ -cs¨ kkent´ s a o a a o o e eredm´ nye, hogy az M m´ trix n-dimenzi´ s sorait a vet´t´ s ut´ n az M m´ trix k-dimenzi´ s soraival e a o ıe a a o k¨ zel´tj¨ k. A VkT sorainak ortogonalit´ s´ b´ l k¨ nnyen bel´ that´ , hogy az M k , illetve az M soraib´ l o ı u aa o o a o o sz´ m´tott euklideszi t´ vols´ gok es skal´ ris szorzatok is megegyeznek. Teh´ t a k¨ zel´t´ s alatt torz´t´ s a ı a a ´ a a o ıe ıa kiz´ r´ lag az M-b˝ l Mk -ba t¨ rt´ n˝ vet´t´ s sor´ n t¨ rt´ nik, melynek m´ rt´ ke a 3.2. t´ tel alapj´ n fel¨ lr˝ l ao o o e o ıe a o e e e e a u o becs¨ lhet˝ . u o

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK ´ Minhash alapu lenyomat

47

A k¨ vetkez˝ kben az adathalmaz sok oszlopot es m´ g t¨ bb sort tartalmaz. C´ lunk a sorok o o ´ e o e sz´ m´ nak cs¨ kkent´ se. A feladatot a k¨ vetkez˝ abra szeml´ lteti. a a o e o o´ e n

m

M

M k Az M m´ trix bin´ ris es k´ t oszlop (vektor) hasonl´ s´ g´ t a Jaccard-koefﬁciens adja meg. Kicsit a a ´ e oa a erthetetlenebb m´ don fel´rva a Jaccard ert´ ket : ´ o ı ´ e di, j = mi (m j )T , ||mi ||2 + ||m j ||2 − mi (m j )T

hiszen az mi (m j )T bin´ ris vektorok eset´ ben az azonos poz´ci´ kban l´ v˝ 1-esek sz´ m´ t adja meg, a e ı o e o a a ||mi ||2 pedig a vektor egyeseinek sz´ m´ t. Felt´ telezz¨ k, hogy a bin´ ris vektorok ritk´ k azaz, ha r-el a a e u a a jel¨ lj¨ k a sorokban az 1-esek atlagos sz´ m´ t, akkor r n. o u ´ a a Az M m´ trixot az M lenyomatm´ trix´ nak fogjuk h´vni. A lenyomatm´ trixnak nem kell bin´ risnak a a a ı a a lennie, de azt term´ szetesen most is elv´ rjuk, hogy a mem´ riaig´ nye j´ val kevesebb legyen, mint e a o e o az M mem´ riaig´ nye. Tov´ bbi kik¨ t´ s, hogy az adatok sorfolytonosan vannak t´ rolva, azaz el˝ sz¨ r o e a oe a o o kiolvashatjuk az els˝ sort, majd a m´ sodikat, es ´gy tov´ bb. o a ´ ı a Ez a helyzet all fel hasonl´ weboldalak kisz˝ r´ s´ n´ l, koppint´ sok, kal´ zm´ solatok felder´t´ s´ n´ l, ´ o uee e a o a ıe e e hasonl´ tulajdons´ g´ felhaszn´ l´ k keres´ s´ n´ l stb. Tov´ bb´ ezt a m´ dszert alkalmazhatjuk, amikor o a u ao ee e a a o hasonl´ elad´ s´ term´ kp´ rokat keres¨ nk. Amennyiben a term´ keket kis t´ telben ert´ kes´tik, akkor az o au e a u e e ´ e ı asszoci´ ci´ s szab´ lyokat kinyer˝ technik´ k (l´ sd 8 fejezet) nem alkalmazhat´ ak. a o a o a a o Gondolkozzunk el azon, hogy m˝ k¨ dik-e az al´ bbi algoritmus. V´ lasszunk ki n´ h´ ny sort u o a a e a v´ letlenszer˝ en es tekints¨ k ezeket lenyomatoknak. K´ t lenyomat hasonl´ s´ g´ nak v´ rhat´ ert´ ke e u ´ u e oa a a o ´ e meg fog egyezni az oszlopaik hasonl´ s´ g´ val. Ez alapj´ n azt mondhatn´ nk, hogy a sorok egy oa a a a v´ letlenszer˝ en v´ lasztott halmaza j´ lenyomat. e u a o A fentiek ellen´ re ez az egyszer˝ m´ dszer nagyon rossz eredm´ nyt adna. Ennek oka az, hogy a e u o e m´ trixunk nagyon ritka (r a n), teh´ t egy oszlopban a legt¨ bb elem 0, ´gy nagy val´ sz´n˝ s´ ggel a a o ı o ı ue legt¨ bb lenyomat is csupa 0 elemb˝ l allna. o o ´ A minhash alap´ lenyomat egy elem´ t a k¨ vetkez˝ k´ ppen all´tjuk el˝ . V´ letlenszer˝ en peru e o o e ´ ı o e u mut´ ljuk meg az sorokat, majd v´ lasszuk az j-edik oszlopok hash ert´ k´ nek (h) azt a legkisebb sora a ´ e e indexet, ahol 1-es szerepel a j-edik oszlopban. A v´ letlen permut´ ci´ term´ szetesen csak elm´ leti e a o e e megk¨ zel´t´ s, diszken tal´ lhat´ nagy adatb´ zis eset´ n t´ l lass´ m˝ velet. Ehelyett sorsoljunk ki mino ıe a o a e u u u den sorhoz egy v´ letlen hash ert´ ket. Amennyiben feltehetj¨ k, hogy a m´ trix sorainak sz´ ma 2 16 -n´ l e ´ e u a a a

˝ ´ ´ ´ ¨ ´ 3. FEJEZET. ELOFELDOLGOZAS, HASONLOSAGI FUGGVENYEK

48

kisebb, akkor a sz¨ let´ snapi paradoxon1 alapj´ n v´ lasszunk 32 bit sz´ less´ g˝ egyenletes eloszl´ s´ u e a a e e u au v´ letlen sz´ mot. Az algoritmus t´ nyleges implement´ l´ sa sor´ n teh´ t egyes´ vel olvassuk az sorokat, e a e aa a a e v´ letlen sz´ mot gener´ lunk, es minden oszlopnak folyamatosan friss´tj¨ k azt a v´ ltoz´ j´ t, ami mege a a ´ ı u a oa adja a legkisebb, 1-est tartalmaz´ sorindexet. o Mivel egy lenyomatnak k darab eleme van, ez´ rt minden oszlophoz k darab v´ letlen sz´ mot e e a all´tunk el˝ , es k darab hash ert´ ket t´ rol´ v´ ltoz´ t tartunk karban. Vegy¨ k eszre, hogy a lenyomat ´ ı o ´ ´ e a o a o u ´ el˝ all´t´ shoz egyszer megy¨ nk v´ gig a m´ trixon. o´ ı a u e a K´ t lenyomat hasonl´ s´ g´ t a p´ ronk´ nt egyez˝ lenyomatok sz´ m´ nak k-hoz vett ar´ nya adja meg, e oa a a e o a a a azaz |{ : Mi, = M j, }| di j = , k ahol Mi, az M m´ trix i-edik oszlop´ nak -edik elem´ t jel¨ li. a a e o Be fogjuk bizony´tani, hogy di j j´ becsl´ se di j -nek abban az ertelemben, hogy ha i es j oszloı o e ´ ´ pok nagyon hasonl´ k, akkor azok lenyomatai is nagy val´ sz´n˝ s´ ggel hasonl´ k. Ehhez a k¨ vetkez˝ o o ı ue o o o eszrev´ telt haszn´ ljuk fel. ´ e a ´ 3.3. eszrev´ tel. Tetsz˝ leges (i, j) oszlopp´ rra igaz, hogy e o a P[Mi, = M j, ] = di j . Bizony´t´ s: Csak akkor lehet a k´ t lenyomat azonos, ha a legal´ bb az egyik oszlopban az 1-est tarıa e a talmaz´ indexek k¨ z¨ l olyan sor kapta a legkisebb v´ letlen sz´ mot, amelyn´ l mindk´ t oszlopban 1-es o o u e a e e szerepel. Ennek val´ sz´n˝ s´ ge eppen di j , amennyiben a permut´ ci´ egyenletesen sz´ rja sz´ t az egyeo ı ue ´ a o o e seket. ´ Es most a hasonl´ s´ g meg˝ rz´ s´ vel kapcsolatos all´t´ s : oa o ee ´ ıa
δ/2 a 3.4. t´ tel. Legyenek 0 < δ < 1, es ε > 0 val´ s sz´ mok. Amennyiben k > − ln2ε2 , akkor δ-n´ l kisebb a e o a ´ val´ sz´n˝ s´ ge annak, hogy a lenyomat es az eredeti hasonl´ s´ g k¨ l¨ nbs´ ge ε-n´ l nagyobb. o ı ue o a uo e a ´

amib˝ l ad´ dik, hogy o o

Bizony´t´ s: Tekints¨ k az i, j oszlopokat. Deﬁni´ ljuk Xl val´ sz´n˝ s´ gi v´ ltoz´ t, ami 1 Mi, = M j, ıa u a o ı ue a o eset´ n, k¨ l¨ nben 0. Legyen Y = X1 + . . . + Xk . e uo Xl binomi´ lis eloszl´ s´ es az el˝ z˝ ekben kimondott eszrev´ tel miatt E[Xl ] = p = P(Mi, = M j, ) = a a u´ o o ´ e = di j . A lenyomatok hasonl´ s´ g´ nak deﬁn´ci´ j´ b´ l ad´ dik, hogy di j = Y . ´ oa a ı oa o o k Irjuk fel Y -re 2.5.3 -es t´ tel´ t : e e 2 P |Y − E[Y ]| > kε ≤ 2e−2ε k P |di j − di j | > ε ≤ 2e−2ε
1A
2k

sz¨ let´ snap paradoxonnal kapcsolatos k´ rd´ s a k¨ vetkez˝ : Mekkora a val´ sz´n˝ s´ ge annak az esem´ nynek, u e e e o o o ı ue e ” hogy emberek egy v´ letlenszer˝ en v´ lasztott r f˝ s csoportj´ ban van legal´ bb k´ t szem´ ly, akik egy napon unneplik a e u a o a a e e ¨ (365)·r! −r2 r sz¨ let´ snapjukat?”. Elemi kombinatorikus uton a v´ lasz meghat´ rozhat´ : p r = 1 − 365r ≈ 1 − exp 3·365 . A feladat u e ´ a a o k¨ vetkezm´ nye az az all´t´ s, miszerint 2n elemnek 22n elem˝ halmazb´ l kell egyenletes eloszl´ s szerint v´ letlenszer˝ en o e ´ ıa u o a e u egyes´ vel kulcsot sorsolni, hogy kicsi (exp(−3) < 0.05) legyen annak val´ sz´n˝ s´ ge, hogy k´ t elem ugyanazt a kulcsot e o ı ue e kapja.

4. fejezet Gyakori elemhalmazok
A gyakori elemhalmazok kinyer´ se az adatb´ ny´ szat eltulajdon´thatatlan ter¨ lete. A feladat e a a ı u v´ s´ rl´ i szok´ sok kinyer´ s´ n´ l mer¨ lt fel r´ szfeladatk´ nt. A nagy proﬁtot els˝ sorban a gyakran egy¨ tt aa o a ee e u e e o u v´ s´ rolt term´ kek, term´ khalmazok jelentik, ´gy ezek kinyer´ se jelentette az els˝ l´ p´ st a feladat megaa e e ı e o e e old´ s´ n´ l. aa a Egyes alkalmaz´ sokban a gyakori r´ szstrukt´ r´ k, gyakori mint´ k meghat´ rz´ s´ n´ l elemhalmazok a e ua a a aa a helyett sorozatok, gy¨ keres f´ k, c´mk´ zett gr´ fok vagy bool-formul´ kat kerestek. A k¨ vetkez˝ feo a ı e a a o o jezetben bemutatjuk a gyakori mint´ k b´ ny´ szat´ nak absztrakt modellj´ t, majd egyes´ vel vessz¨ k a a a a a e e u k¨ l¨ nb¨ z˝ t´pus´ mint´ kat es megvizsg´ ljuk, hogy milyen technik´ k alkalmazhat´ k. uo o o ı u a ´ a a o A gyakori elemhalmazok b´ ny´ szata nagyon n´ pszer˝ kutat´ si ter¨ let. A publik´ lt algoritmusoka a e u a u a kal k¨ nyveket lehetne megt¨ lteni. Ebben a jegyzetben csak a legh´resebb algoritmusokat es otleteket o o ı ´ ¨ ismertetj¨ k. u

4.1. A gyakori elemhalmaz fogalma
Legyen I = {i1 , i2 , . . . , im } elemek halmaza es T = t1 , . . . , tn az I hatv´ nyhalmaza fe´ a lett ertelmezett sorozat, azaz t j ⊆ I . A T sorozatot bemeneti sorozatnak h´vjuk, amelynek ´ ı t j elemei a tranzakci´ k. Az I ⊆ I elemhalmaz t´ mogatotts´ ga (jel¨ l´ sben supp(I)) mego a a oe egyezik azon tranzakci´ k sz´ m´ val, amelyeknek r´ szhalmaza az I. Az I gyakori, amennyiben o a a e t´ mogatotts´ ga nem kisebb egy el˝ re megadott konstansn´ l, amelyet hagyom´ nyosan min suppa a o a a pal jel¨ l¨ nk, es t´ mogatotts´ gi k¨ sz¨ bnek h´vunk. A gyakori elemhalmazok keres´ se sor´ n ou ´ a a u o ı e a adott egy I elemhalmaz, T bemeneti sorozat, min supp t´ mogatotts´ gi k¨ sz¨ b, feladatunk mega a u o hat´ rozni a gyakori elemhalmazokat es azok t´ mogatotts´ g´ t. Az egyszer˝ s´ g kedv´ ert a halmazt a ´ a a a ue e´ jel¨ l˝ kapcsos z´ r´ jeleket (s˝ t az elemek hat´ rol´ vessz˝ t) gyakran elhagyjuk, teh´ t p´ ld´ ul az oo ao o a o o a e a {A, C, D}, {B, C, E}, {A, B, C, E}, {B, E}, {A, B, C, E} sorozatot ACD, BCE, ABCE, BE, ABCE form´ ban ´rjuk. a ı Az altal´ noss´ g megs´ rt´ se n´ lk¨ l feltehetj¨ k, hogy az I elemein tudunk egy rendez´ st deﬁni´ lni, ´ a a e e e u u e a es a mint´ k illetve a tranzakci´ k elemeit minden esetben nagys´ g szerint n¨ v˝ sorrendben t´ roljuk. ´ a o a o o a Ezen rendez´ s szerinti lexikograﬁkusan tudjuk rendezni az azonos m´ ret˝ halmazokat. e e u A keres´ si teret ugy k´ pzelhetj¨ k el, mint egy ir´ ny´tott gr´ fot, amelynek cs´ csai az elemhalmae ´ e u a ı a u zok, es az I1 -b˝ l el indul I2 -be, amennyiben I1 ⊂ I2 , es |I1 | + 1 = |I2 |. A keres´ si t´ r bej´ r´ s´ n mindig ´ o ´ ´ e e aaa ezen gr´ f egy r´ sz´ nek bej´ r´ s´ t fogjuk erteni. Teh´ t p´ ld´ ul a keres´ si t´ r sz´ less´ gi bej´ r´ sa ezen a e e aaa ´ a e a e e e e aa gr´ f sz´ less´ gi bej´ r´ s´ t jelenti. a e e aaa 49

4. FEJEZET. GYAKORI ELEMHALMAZOK

50

Elterjedt, hogy a t´ mogatotts´ g helyett gyakorisagot, a t´ mogatotts´ gi k¨ sz¨ b helyett gyakorisagi a a a a u o ´ ´ k¨ sz¨ b¨ t haszn´ lnak, melyeket f req(I)-vel, illetve min freq-kel jel¨ lnek. Az I elemhalmaz gyakou o o a o ris´ g´ n a supp(I)/|T | h´ nyadost ertj¨ k. a a a ´ u A gyakorlatban el˝ fordul´ adatb´ zisokban nem ritka, hogy az elemek sz´ ma 10 5 − 106 , a tranzo o a a akci´ k´ pedig 109 − 1010 . Elm´ letileg m´ r az eredm´ ny ki´r´ sa is az I elemsz´ m´ ban exponenci´ lis o e e a e ıa a a a lehet, hiszen el˝ fordulhat, hogy I minden r´ szhalmaza gyakori. A gyakorlatban a maxim´ lis m´ ret˝ o e a e u gyakori elemhalmaz m´ rete |I |-n´ l j´ val kisebb (legfeljebb 20-30). Ezen k´v¨ l minden tranzakci´ vie e o ı u o szonylag kicsi, azaz |t j | |I |. A keres´ si t´ r teh´ t nagy, ami azt jelenti, hogy az egyszer˝ nyers er˝ e e a u o m´ dszerek (hat´ rozzuk meg minden elemhalmaz t´ mogatotts´ g´ t, majd v´ logassuk ki a gyakoriakat) o a a a a a elfogadhatatlanul lassan futn´ nak. a A k´ s˝ bbiekben gyakran haszn´ ljuk majd tranzakci´ k eset´ n a sz˝ rt” jelz˝ t. Egy tranzakci´ sz˝ rt eo a o e u o o u ” tranzakci´ j´ t ugy kaphatjuk meg, ha t¨ r¨ lj¨ k bel˝ le a ritka elemeket. A sz˝ rt tranzakci´ k minden inoa ´ oo u o u o form´ ci´ t tartalmaznak a gyakori elemhalmazok kinyer´ s´ hez, ez´ rt a legt¨ bb algoritmus els˝ l´ p´ se a o ee e o o e e a gyakori elemek meghat´ roz´ sa, majd a sz˝ rt tranzakci´ k el˝ all´t´ sa. Ezut´ n az eredeti adatb´ zist a a u o o´ ı a a a nem haszn´ lj´ k t¨ bb´ . a a o e A bemenetet illet˝ en h´ rom adatt´ rol´ si m´ dot szoktak elk¨ l¨ n´teni. Horizont alis adatb´ zisr´ l o a a a o uo ı a o ´ besz´ l¨ nk, ha a tranzakci´ kat azonos´t´ val l´ tjuk el, es minden azonos´t´ hoz t´ roljuk a tranzakci´ ban eu o ıo a ´ ıo a o tal´ lhat´ elemeket. Vertik´ lis adatb´ zisn´ l minden elemhez t´ roljuk az elemet tartalmaz´ tranzaka o a a a a o ci´ k azonos´t´ it (sorsz´ m´ t). A vertik´ lis t´ rol´ s nagy el˝ nye, hogy gyorsan megkaphatjuk egy elemo ıo a a a a a o halmaz fed´ s´ t (az elemekhez tartoz´ kosarak metszet´ t kell k´ pezni), amib˝ l k¨ zvetlen ad´ dik a ee o e e o o o t´ mogatotts´ g. Mind a horizont´ lis, mind a vertik´ lis abr´ zol´ si m´ dn´ l haszn´ lhatunk az elemek a a a a ´ a a o a a vagy tranzakci´ k felsorol´ sa helyett r¨ gz´tett sz´ less´ g˝ bitvektorokat. Az i-edik elem (tranzakci´ ) o a o ı e e u o megl´ t´ t az i-edik poz´ci´ ban szerepl˝ 1-es jelzi. ee ı o o tranzakci´ o 1 2 elemhalmaz C A,B,C elem A B C tranzakci´ halmaz o 2 2 1,2 tranzakci´ o 1 2 2 2 elem C A B C

4.1. t´ bl´ zat. Horizont´ lis-, vertik´ lis- es rel´ ci´ s t´ rol´ si m´ d a a a a ´ a o a a o Tudjuk, hogy egy tranzakci´ ban v´ ltoz´ sz´ m´ elem lehet (´ s ford´tva : egy elem v´ ltoz´ sz´ m´ o a o a u e ı a o a u tranzakci´ ban szerepelhet). A legt¨ bb mai adatb´ zis relaci´ s t´ bl´ k form´ j´ ban van elmentve, ameo o a aa ´ o a a lyekben csak r¨ gz´tett sz´ m´ attrib´ tum szerepelhet. A val´ s´ gban ez´ rt a tranzakci´ k k´ t atto ı a u u oa e o e rib´ tummal rendelkez˝ rel´ ci´ s t´ bla form´ j´ ban tal´ lhat´ k, ahol az els˝ attrib´ tum a tranzakci´ t, u o a o a aa a o o u o a m´ sodik pedig az elemet adja meg (pontosabban a tranzakci´ k es az elemek azonos´t´ it). A h´ rom a o ´ ıo a t´ rol´ si m´ dszerre mutatnak p´ ld´ t a 4.1 t´ bl´ zatok. a a o e a a a ´ a A bemenetet elemhalmazok sorozatak´ nt deﬁni´ ltuk. Abr´ zoljuk ezt, mint G = (I, T, R) e a ir´ ny´tatlan, p´ ros gr´ f, vagy mint B bin´ ris m´ trix. Ha a t tranzakci´ tartalmazza az i elemet, aka ı a a a a o kor es csak akkor az (i, t) eleme R-nek. Vagy m´ trix eset´ n a t sor´ nak i eleme 1 (k¨ l¨ nben 0). A ´ a e a uo ACD, BCE, ABCE, BE, ABCE bemenethez tartoz´ gr´ f es bin´ ris m´ trix a 4.1, o a ´ a a 4.2 abr´ n l´ that´ . ´ a a o A bemeneti adatot szokt´ k a s˝ r˝ (dense) illetve a ritka (sparse) jelz˝ vel illetni, amellyel a a uu o bin´ ris m´ trixban tal´ lhat´ 1-esek sz´ m´ ra utalnak. V´ s´ rl´ i kosarakat abr´ zol´ m´ trix tipikusan rita a a o a a aa o ´ a o a

4. FEJEZET. GYAKORI ELEMHALMAZOK 1 2 3 4 5 A B 1 1 1 1 1 1 1 C 1 1 1 1 D 1 E 1 1 1 1

51

A

B

C

D

E

1 2 3 4 5

4.1. abra. Gr´ fos abr´ zol´ si m´ d ´ a ´ a a o

4.2. abra. Bin´ ris m´ trixos abr´ zol´ si m´ d ´ a a ´ a a o

ka, ugyanis a kosarakban altal´ ban j´ val kevesebb term´ k van (50-100), mint az osszes term´ k sz´ ma ´ a o e ¨ e a (10 000-100 000). A tranzakci´ k sz´ ma altal´ ban nagy, de a mai t´ rol´ kapacit´ sok mellett, m´ g eg´ szen nagy o a ´ a a o a e e adatb´ zisok is elf´ rnek a mem´ ri´ ban. Gondoljuk meg p´ ld´ ul, hogy egy 10 7 tranzakci´ t tartalmaz´ a e o a e a o o adatb´ zis csak 120 MB helyet k´v´ n, amennyiben a tranzakci´ k atlagos m´ rete 6 elem. Legt¨ bbsz¨ r a ı a o ´ e o o teh´ t alkalmazhat´ k azok az algoritmusok, amelyek felt´ telezik, hogy a bemenet (vagy a sz˝ rt tranza o e u akci´ k) elf´ rnek a mem´ ri´ ban. o e o a Miel˝ tt bemutatjuk az APRIORI m´ dszer elemhalmazok eset´ n, gondolkozzunk el azon, vajon o o e m˝ k¨ dne-e az al´ bbi egyszer˝ algoritmus a gyakorlatban. Olvassuk be a h´ tt´ rt´ rol´ b´ l az adatb´ zis u o a u a e a o o a els˝ blokkj´ t, es vizsg´ ljuk meg az els˝ tranzakci´ t. Ennek a t 1 tranzakci´ nak az osszes r´ szhalmaz´ t o a ´ a o o o ¨ e a t´ roljuk el a mem´ ri´ ban es mindegyikhez rendelj¨ nk egy sz´ ml´ l´ t 1 kezdeti ert´ kkel. Az I elema o a ´ u a ao ´ e halmazhoz rendelt sz´ ml´ l´ fogja t´ rolni I t´ mogatotts´ g´ t. Az els˝ tranzakci´ feldolgoz´ sa ut´ n a ao a a a a o o a a vizsg´ ljuk meg sorban a t¨ bbit : a ti tranzakci´ minden r´ szelemhalmaz´ nak sz´ ml´ l´ j´ t n¨ velj¨ k a o o e a a aoa o u eggyel, vagy vegy¨ k fel a mem´ ri´ ba egy uj sz´ ml´ l´ val, amennyiben az eddig feldolgozott tranzaku o a ´ a ao ci´ ban m´ g nem fordult el˝ . Az adatb´ zis teljes v´ gigolvas´ sa ut´ n az osszes – valahol el˝ fordul´ – o e o a e a a ¨ o o elemhalmaz t´ mogatotts´ ga rendelkez´ s¨ nkre all, amib˝ l k¨ nnyen megkaphatjuk a gyakoriakat. a a eu ´ o o L´ that´ , hogy enn´ l az egyszer˝ algoritmusn´ l IO szempontj´ b´ l gyorsabbat nem lehet a o e u a a o tal´ lni, mert az adatb´ zis egyszeri v´ gigolvas´ sa mindenk´ ppen sz¨ ks´ ges a t´ mogatotts´ g mega a e a e u e a a hat´ roz´ s´ hoz es enn´ l az algoritmusn´ l el´ g is. A gyakorlatban m´ gsem haszn´ lj´ k ezt a gyors es a aa ´ e a e e a a ´ egyszer˝ algoritmust ? Ennek oka, hogy az eletben el˝ fordul´ adatb´ zisokban nem ritka, hogy valau ´ o o a melyik tranzakci´ sok elemet tartalmaz. Egy atlagos szupermarketben mindennapos, hogy valaki 60 o ´ k¨ l¨ nb¨ z˝ elemet v´ s´ rol. Ekkor csak a sz´ ml´ l´ k mintegy 16 ezer TB-ot foglaln´ nak a mem´ ri´ b´ l, uo o o aa a ao a o a o amennyiben a sz´ ml´ l´ k 4 byte-osak. A sz´ ml´ l´ kat mindenk´ ppen a mem´ ri´ ban szeretn´ nk tartaa ao a ao e o a e ni, hogy elker¨ lj¨ k a folyamatos swappel´ st, hiszen egy uj tranzakci´ vizsg´ lat´ n´ l nem tudjuk el˝ re, u u e ´ o a a a o hogy melyik sz´ ml´ l´ t kell n¨ velni. a ao o Abban az esetben, ha biztosan tudjuk, hogy a tranzakci´ k egyike sem tartalmaz sok elemet, vagy o az adatb´ zis bin´ ris ert´ keket tartalmaz´ m´ trix form´ j´ ban adott, ahol az oszlopok (attrib´ tumok) a a ´ e o a aa u sz´ ma kicsi, akkor a fenti algoritmus hat´ konyan haszn´ lhat´ . a e a o A fenti algoritmus kis m´ dos´t´ s´ t javasolt´ k [11]-ban. Egyr´ szt csak olyan elemhalmazokat o ıa a a e vizsg´ ltak, amelyek m´ rete nem halad meg egy el˝ re megadott korl´ tot, m´ sr´ szr˝ l a vizsg´ lt elema e o a a e o a halmazokat es sz´ ml´ l´ ikat – a gyors visszakeres´ s erdek´ ben – sz´ f´ ban t´ rolt´ k. A m´ dszernek k´ t ´ a ao e ´ e oa a a o e s´ lyos h´ tr´ nya van : nem teljes (az algoritmus nem tal´ lja meg azokat az elemhalmazokat, amelyek u a a a m´ rete nagyobb az el˝ re megadott k¨ sz¨ bn´ l), tov´ bb´ t´ ls´ gosan nagy a mem´ riaig´ nye (sok lehet e o u o e a a u a o e a hamis jel¨ lt). o Amennyiben az adatb´ zisunk kicsi, akkor m´ g a fenti egyszer˝ algoritmusokat sem kell mega e u programoznunk, mert egy teljesen szabv´ nyos adatb´ zis-lek´ rdez˝ nyelv seg´ts´ g´ vel megkaphatjuk a a e o ı e e a gyakori elemhalmazokat. Az al´ bbi SQL parancs a gyakori elemp´ rokat adja eredm´ ny¨ l. a a e u

4. FEJEZET. GYAKORI ELEMHALMAZOK

52

SELECT I.elem,J.elem, COUNT(I.tranzakci´) o FROM tranzakci´k I, tranzakci´k J o o WHERE I.tranzakci´=J.tranzakci´ AND I.elem<J.elem o o GROUP BY I.elem, J.elem HAVING COUNT(I.tranzakci´) >= min_supp o

4.3. abra. SQL utas´t´ s gyakori elemp´ rok kinyer´ s´ hez ´ ıa a ee L´ tnunk kell, hogy a fenti parancs az osszekapcsol´ s (FROM mez˝ ben k´ t t´ bla) m˝ velet miatt a ¨ a o e a u nem fog m˝ k¨ dni, ha az adatb´ zis m´ rete t´ l nagy. u o a e u A k¨ vetkez˝ kben bemutatjuk a h´ rom legh´resebb gyakori elemhalmazokat kinyer˝ (GYEK) alo o a ı o goritmust. Mindh´ rman az ures mint´ b´ l indulnak ki. Az algoritmusok egy adott f´ zis´ ban jel oltnek a ¨ a o a a ¨ h´vjuk azokat az elemhalmazokat, amelyek t´ mogatotts´ g´ t meg akarjuk hat´ rozni. Az algoritmus ı a a a a akkor teljes, ha minden gyakori elemhalmazt megtal´ l es helyes, ha csak a gyakoriakat tal´ lja meg. a ´ a Mindh´ rom algoritmus h´ rom l´ p´ st ism´ tel. El˝ sz¨ r jel¨ lteket all´tanak el˝ , majd meghat´ rozz´ k a a e e e o o o ´ ı o a a a jel¨ ltek t´ mogatotts´ g´ t, v´ g¨ l kiv´ logatj´ k a jel¨ ltek k¨ z¨ l a gyakoriakat. Term´ szetesen az egyes o a a a e u a a o o u e algoritmusok k¨ l¨ nb¨ z˝ m´ don j´ rj´ k be a keres´ si teret (az osszes lehets´ ges elemhalmazt), all´tj´ k uo o o o a a e ¨ e ´ ı a el˝ a jel¨ lteket, es k¨ l¨ nb¨ z˝ m´ don hat´ rozz´ k meg a t´ mogatotts´ gokat. o o ´ uo o o o a a a a Az altal´ noss´ g megs´ rt´ se n´ lk¨ l feltehetj¨ k, hogy az I elemein tudunk deﬁni´ lni egy teljes ren´ a a e e e u u a dez´ st, es a jel¨ ltek, illetve a tranzakci´ k elemeit ezen rendez´ s szerint t´ roljuk. M´ s sz´ val az eleme ´ o o e a a o halmazokat sorozatokk´ alak´tjuk. Egy sorozat -elem˝ preﬁx´ n a sorozat els˝ elem´ b˝ l k´ pzett a ı u e o e o e r´ szsorozat´ t ertj¨ k. A p´ ld´ kban majd, amennyiben a rendez´ sre nem t´ r¨ nk ki k¨ l¨ n, az ab´ c´ szee a ´ u e a e eu uo ´ e e rinti sorrendet haszn´ ljuk. A GYEK algoritmusok altal´ ban erz´ kenyek a haszn´ lt rendez´ sre. Ez´ rt a ´ a ´ e a e e minden algoritmusn´ l megvizsg´ ljuk, hogy milyen rendez´ st c´ lszer˝ haszn´ lni annak erdek´ ben, a a e e u a ´ e hogy a fut´ si id˝ , vagy a mem´ riasz¨ ks´ glet a lehet˝ legkisebb legyen. a o o u e o A jel¨ lt-el˝ all´t´ s ism´ tl´ s n´ lk¨ li, amennyiben nem all´tja el˝ ugyanazt a jel¨ ltet t¨ bbf´ le m´ don. o o´ ı a e e e u ´ ı o o o e o Ez a hat´ konys´ g miatt fontos, ugyanis ism´ tl´ ses jel¨ lt-el˝ all´t´ s eset´ ben minden jel¨ lt el˝ all´t´ sa e a e e o o´ ı a e o o´ ı a ut´ n ellen˝ rizni kellene, hogy nem all´tottuk-e el˝ m´ r kor´ bban. Ha ezt nem tessz¨ k, akkor felesa o ´ ı o a a u legesen k¨ t¨ nk le er˝ forr´ sokat a t´ mogatotts´ g ism´ telt meghat´ roz´ s´ n´ l. Mindh´ rom ismertetett ou o a a a e a aa a a algoritmusban a jel¨ ltek el˝ all´t´ sa ism´ tl´ s n´ lk¨ li lesz, amit a rendez´ ssel tudunk garant´ lni. o o´ ı a e e e u e a Az algoritmusok pszeudok´ djaiban GY -vel jel¨ lj¨ k a gyakori elemhalmazok halmaz´ t, J-vel o o u a jel¨ ltek´ t es j.sz´ ml´ l´ -val a j jel¨ lt sz´ ml´ l´ j´ t. Az olvashat´ bb k´ dok erdek´ ben feltessz¨ k, hogy o e ´ a ao o a aoa o o ´ e u minden sz´ ml´ l´ kezdeti ert´ ke nulla, es az olyan halmazok, amelyeknek nem adunk kezdeti ert´ ket a ao ´ e ´ ´ e (p´ ld´ ul GY ), nem tartalmaznak kezdetben egyetlen elemet sem. e a

4.2. Az APRIORI algoritmus
Az A PRIORI algoritmus az egyik legels˝ GYEK algoritmus. Sz´ less´ gi bej´ r´ st val´ s´t meg, ami o e e aa oı azt jelenti, hogy a legkisebb mint´ b´ l (ami az ures halmaz) kiindulva szintenk´ nt halad el˝ re a naa o ¨ e o gyobb m´ ret˝ gyakori elemhalmazok meghat´ roz´ s´ hoz. A k¨ vetkez˝ szinten (iter´ ci´ ban) az eggyel e u a aa o o a o nagyobb m´ ret˝ elemhalmazokkal foglalkozik. Az iter´ ci´ k sz´ ma legfeljebb eggyel t¨ bb, mint a e u a o a o legnagyobb gyakori elemhalmaz m´ rete. e A jel¨ ltek deﬁni´ l´ s´ n´ l a k¨ vetkez˝ egyszer˝ t´ nyt haszn´ lja fel : Gyakori elemhalmaz minden o aa a a o o u e a

4. FEJEZET. GYAKORI ELEMHALMAZOK

53

r´ szhalmaza gyakori. Az all´t´ st indirekten n´ zve elmondhatjuk, hogy egy elemhalmaz biztosan nem e ´ ıa e gyakori, ha van ritka r´ szhalmaza. Ennek alapj´ n ne legyen jel¨ lt azon elemhalmaz, amelynek van e a o ritka r´ szhalmaza. Az A PRIORI algoritmus ez´ rt ep´tkezik lentr˝ l. Egy adott iter´ ci´ ban csak olyan e e ´ ı o a o jel¨ ltet vesz¨ nk fel, amelynek osszes val´ di r´ szhalmaz´ r´ l tudjuk, hogy gyakori. Az algoritmus ono u ¨ o e ao nan kapta a nev´ t, hogy az -elem˝ jel¨ lteket a bemeneti sorozat -edik atolvas´ s´ nak megkezd´ se e u o ´ aa e el˝ tt (a priori) all´tja el˝ . Az -elem˝ jel¨ ltek halmaz´ t J -lel, az -elem˝ gyakori elemhalmazokat o ´ ı o u o a u pedig GY -lel jel¨ lj¨ k. o u Algorithm 1 Apriori Require: T : tranzakci´ k sorozata, o min supp : t´ mogatotts´ gi k¨ sz¨ b, a a u o ←0 / J ← {0} while |J | = 0 do for all t ∈ T do for all j ∈ J , j ⊆ t do j.sz´ ml´ l´ ← j.sz´ ml´ l´ +1 a ao a ao end for end for for all j ∈ J do if j.sz´ ml´ l´ ≥ min supp then a ao GY ← GY ∪ { j} end if end for GY ← GY ∪ GY ¨ ˝´ I ´ J +1 ← J EL OLT- EL O ALL´T AS (GY ) ← +1 end while return GY A kezdeti ert´ kek be´ ll´t´ sa ut´ n egy ciklus k¨ vetkezik, amely akkor er v´ get, ha nincsen egyet´ e a ıa a o ´ e len -elem˝ jel¨ lt sem. A cikluson bel¨ l el˝ sz¨ r meghat´ rozzuk a jel¨ ltek t´ mogatotts´ g´ t. Ehhez u o u o o a o a a a egyes´ vel vessz¨ k a tranzakci´ kat, es azon jel¨ ltek sz´ ml´ l´ j´ t n¨ velj¨ k eggyel, amelyeket tare u o ´ o a aoa o u talmaz a vizsg´ lt tranzakci´ . Ha rendelkez´ sre allnak a t´ mogatotts´ gok, akkor a jel¨ ltek k¨ z¨ l a o e ´ a a o o u kiv´ logathatjuk a gyakoriakat. a

4.2.1. Jel¨ ltek el˝ all´t´ sa o o´ ı a
¨ ˝´ I ´ u A J EL OLT- EL O ALL´T AS f¨ ggv´ ny az -elem˝ gyakori elemhalmazokb´ l ( + 1)-elem˝ jel¨ lteket e u o u o all´t el˝ . Azok es csak azok az elemhalmazok lesznek jel¨ ltek, amelyek minden r´ szhalmaza gyakori. ´ ı o ´ o e A jel¨ ltek el˝ all´t´ sa sor´ n olyan -elem˝ , gyakori I1 , I2 elemhalmaz p´ rokat keres¨ nk, amelyekre o o´ ı a a u a u igaz, hogy – I1 lexikograﬁkusan megel˝ zi I2 -t, o – I1 -b˝ l a legnagyobb elem t¨ rl´ s´ vel ugyanazt az elemhalmazt kapjuk, mintha az I2 -b˝ l o o ee o t¨ r¨ ln´ nk a legnagyobb elemet. oo e

4. FEJEZET. GYAKORI ELEMHALMAZOK

54

Ha a felt´ teleknek megfelel˝ p´ rt tal´ lunk, akkor k´ pezz¨ k a p´ r uni´ j´ t, majd ellen˝ rizz¨ k, hogy e o a a e u a oa o u a kapott elemhalmaznak minden val´ di r´ szhalmaza gyakori-e. A t´ mogatotts´ g anti-monotonit´ sa o e a a a miatt sz¨ ks´ gtelen az osszes val´ di r´ szhalmazt megvizsg´ lni ; ha mind az + 1 darab -elem˝ u e ¨ o e a u r´ szhalmaz gyakori, akkor az osszes val´ di r´ szhalmaz is gyakori. Az I1 , I2 halmazokat a jel¨ lt gee ¨ o e o ner´ torainak szok´ s h´vni. a a ı 4.1. p´ lda. Legyenek a 3-elem˝ gyakori elemhalmazok a k¨ vetkez˝ k : GY3 = {ABC, ABD, e u o o ACD, ACE, BCD}. Az ABC es ABD elemhalmazok megfelelnek a felt´ telnek, ez´ rt k´ pezz¨ k az e e e u ´ uni´ jukat. Mivel ABCD minden h´ romelem˝ r´ szhalmaza a GY3 -nak is eleme, az ABCD jel¨ lt lesz. o a u e o Az ACD, ACE p´ r is megfelel a k´ t felt´ telnek, de uni´ juknak van olyan r´ szhalmaza (ADE), amely a e e o e nem gyakori. Az A PRIORI a k¨ vetkez˝ iter´ ci´ ban teh´ t m´ r csak egyetlen jel¨ lt t´ mogatotts´ g´ t o o a o a a o a a a hat´ rozza meg. a A fenti m´ dszer csak akkor alkalmazhat´ , ha > 0. Az egyelem˝ jel¨ ltek el˝ all´t´ sa egyszer˝ : o o u o o´ ı a u minden egyelem˝ halmaz jel¨ lt, amennyiben az ures elemhalmaz gyakori (|T | ≥ min supp). Ez osszu o ¨ ¨ hangban all azzal, hogy akkor lehet egy elemhalmaz jel¨ lt, ha minden r´ szhalmaza gyakori. ´ o e

4.2.2. Jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ sa o a a a a a
A jel¨ ltek el˝ fordul´ sait ossze kell sz´ molni. Ehhez egyes´ vel vizsg´ ljuk a kosarakat, es azon o o a ¨ a e a ´ jel¨ ltek sz´ ml´ l´ it n¨ velj¨ k eggyel, amelyeket tartalmaz a kos´ r. o a ao o u a ´ ˝ o 1- es 2-elemu jel¨ ltek t´ mogatotts´ ga a a K¨ nny˝ dolgunk van, amennyiben a jel¨ ltek m´ rete 1 vagy 2. A feladatot megoldhatjuk egy olyan o u o e lista, illetve f´ lt¨ mb seg´ts´ g´ vel, amelyekben a sz´ ml´ l´ kat t´ roljuk. Az elemek t´ mogatotts´ g´ nak e o ı e e a ao a a a a meghat´ roz´ s´ n´ l a lista j-edik eleme t´ rolja a j-edik elem sz´ ml´ l´ j´ t. A tranzakci´ k fela aa a a a aoa o dolgoz´ s´ n´ l v´ gigmegy¨ nk a tranzakci´ elemein es n¨ velj¨ k a megfelel˝ cell´ kban tal´ lhat´ aa a e u o ´ o u o a a o sz´ ml´ l´ kat. a ao Az els˝ v´ gigolvas´ s ut´ n kiv´ logathatjuk a gyakori elemeket. A tov´ bbiakban m´ r csak o e a a a a a ezekkel az elemekkel dolgozunk, ´gy uj sorsz´ mokat adhatunk nekik a [1..|GY1 |] intervallumb´ l ı ´ a o (eml´ keztet˝ ul GY j -vel jel¨ lj¨ k a j-elem˝ gyakori mint´ kat). Az l es k-adik elemekb˝ l all´ p´ r e o¨ o u u a ´ o ´ o a t´ mogatotts´ g´ t a t¨ mb l-edik sor´ nak k − l-adik eleme t´ rolja (az altal´ noss´ g megs´ rt´ se n´ lk¨ l a a a o a a ´ a a e e e u feltehetj¨ k, hogy l < k). u Ha egy sz´ ml´ l´ 4 byte-ot foglal, akkor a t¨ mb helyig´ nye nagyj´ b´ l 4 · |GY1 | byte. Azon a ao o e a o 2 elemp´ rokhoz tartoz´ t¨ mbelem ert´ ke, amelyek sosem fordulnak el˝ egy¨ tt, 0 lesz. Helyet taa o o ´ e o u kar´thatunk meg, hogy ha csak akkor vessz¨ k fel egy jel¨ ltp´ r sz´ ml´ l´ j´ t, ha a p´ rt legal´ bb egy ı u o a a aoa a a tranzakci´ tartalmazza [125]. A p´ rok t´ mogatotts´ g´ nak meghat´ roz´ sa kevesebb mem´ ri´ t fog o a a a a a a o a ig´ nyelni, de ezzel egy¨ tt lassabb is lesz. e u Nagyobb elemhalmazok t´ mogatotts´ ga a a Vizsg´ ljuk meg r´ szletesebben az 5. sort. Adott egy tranzakci´ es -m´ ret˝ jel¨ ltek egy halmaza. a e o´ e u o Feladatunk meghat´ rozni azon jel¨ lteket, amelyek a tranzakci´ r´ szhalmazai. Megoldhatjuk ezt egya o o e szer˝ en ugy, hogy a jel¨ lteket egyes´ vel vessz¨ k, es eld¨ ntj¨ k, hogy tartalmazza-e oket a tranzakci´ . u ´ o e u ´ o u ˝ o Rendezett halmazban rendezett r´ szhalmaz keres´ se elemi feladat. e e

4. FEJEZET. GYAKORI ELEMHALMAZOK 1 2 3 1 2 . . . . . 1 2 3 N-1 N supp( j)=vector[ j] |GY1 | − 2 |GY1 | − 1 supp({l, k})=t¨ mb[l][k-l] o . . . ... ... |GY1 | − 1

55

4.4. abra. Adatstrukt´ r´ k az 1- es 2-elem˝ jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ s´ hoz. ´ ua ´ u o a a a a aa Vegy¨ nk fel k´ t mutat´ t, amelyek a kos´ r, illetve u e o a a jel¨ lt elemein fognak v´ gighaladni. Kezdetben muo e kos´ rmutat´ a o tasson mindk´ t mutat´ az elemhalmazok els˝ elemeire. e o o ? Amennyiben a k´ t mutat´ altal mutatott elemek mege o ´ kos´ r : A B C D E F G I a egyeznek, akkor l´ ptess¨ k mindk´ t mutat´ t a k¨ vetkez˝ e u e o o o elemre. Ha a tranzakci´ ban tal´ lhat´ elem kisebb soro a o jel¨ lt : B E G o sz´ m´ , akkor csak a kos´ r mutat´ j´ t l´ ptess¨ k, ellenkez˝ a u a oa e u o 6 esetben pedig alljunk meg ; ekkor a kos´ r biztosan nem ´ a tartalmazza a jel¨ ltet. Ha a jel¨ lt utols´ eleme is mego o o jel¨ ltmutat´ o o egyezik a kos´ r valamelyik elem´ vel, akkor a kos´ r tara e a talmazza a jel¨ ltet. o Ennek az egyszer˝ m´ dszernek a h´ tr´ nya, hogy sok jel¨ lt eset´ n lass´ , hiszen annyiszor kell a u o a a o e u tranzakci´ elemein v´ gighaladni, amennyi a jel¨ ltek sz´ ma. A gyorsabb m˝ k¨ d´ s erdek´ ben a jel¨ lteo e o a u o e ´ e o ket sz´ f´ ban vagy hash-f´ ban (hash-tree) c´ lszer˝ t´ rolni. A sz´ f´ t szok´ s preﬁx-f´ nak vagy lexikooa a e u a oa a a graﬁkus f´ nak is h´vni [3]. Az eredeti APRIORI implement´ ci´ ban hash-f´ t alkalmaztak, azonban a ı a o a tesztek bizony´tj´ k, hogy a sz´ fa gyorsabb m˝ k¨ d´ st eredm´ nyez, mint a hash-fa. A hash-fa sz´ f´ val ı a o u o e e oa val´ helyettes´t´ s´ r˝ l m´ r a [122]-ban ´rtak, ahol a sz´ f´ t alkalmaz´ APRIORI algoritmust SEARo ıe eo a ı oa o nek nevezt´ k el. A tov´ bbiakban a sz´ f´ ban val´ keres´ st ismertetj¨ k (a sz´ f´ k fel´ p´t´ s´ r˝ l a 2.8.1 e a oa o e u oa e ıe eo r´ szben m´ r sz´ ltunk). e a o A sz´ fa eleinek c´mk´ i elemek lesznek. Minden cs´ cs egy elemhalmazt reprezent´ l, amelynek o ´ ı e u a elemei a gy¨ k´ rb˝ l a cs´ csig vezet˝ ut eleinek c´mk´ ivel egyeznek meg. Feltehetj¨ k, hogy az egy o e o u o ´ ´ ı e u cs´ csb´ l indul´ elek, tov´ bb´ az egy uton tal´ lhat´ elek c´mk´ k szerint rendezve vannak (pl. legnau o o´ a a ´ a o´ ı e gyobb elem az els˝ helyen). A jel¨ ltek sz´ ml´ l´ it a jel¨ ltet reprezent´ l´ lev´ lhez rendelj¨ k. A 4.5. o o a ao o ao e u abr´ n egy sz´ f´ t l´ thatunk. ´ a oa a A t tranzakci´ ban az -elem˝ jel¨ lteket ugy tal´ ljuk meg, hogy a jel¨ lteket le´r´ fa gy¨ ker´ b˝ l o u o ´ a o ıo o e o kiindulva, rekurz´v m´ don bej´ runk bizonyos r´ szf´ kat. Ha egy d szint˝ bels˝ cs´ cshoz a tranzakci´ ı o a e a u o u o j-edik elem´ n kereszt¨ l jutunk, akkor azon elein kereszt¨ l l´ p¨ nk eggyel m´ lyebb szintre, amelyeke u ´ u e u e nek c´mk´ je megegyezik a tranzakci´ j -edik elem´ vel, ahol j < j ≤ |t|− +d (ugyanis −d elemre ı e o e m´ g sz¨ ks´ g van ahhoz, hogy lev´ lbe erj¨ nk). Ha ily m´ don eljutunk egy szint˝ cs´ cshoz, az azt e u e e ´ u o u u jelenti, hogy a cs´ cs altal reprezent´ lt elemhalmazt tartalmazza t, ´gy ennek a lev´ lnek a sz´ ml´ l´ j´ t u ´ a ı e a aoa kell n¨ veln¨ nk eggyel. o u A sz´ f´ t preﬁx f´ nak is szokt´ k h´vni, ami arra utal, hogy a k¨ z¨ s preﬁxeket csak egyszer t´ rolja. oa a a ı o o a Ett˝ l lesz gyorsabb a sz´ f´ s t´ mogatotts´ g-meghat´ roz´ s a naiv m´ dszern´ l. A k¨ z¨ s preﬁxeket o oa a a a a o e o o

4. FEJEZET. GYAKORI ELEMHALMAZOK

56

A B C D C D

B

C D

4.5. abra. Az ABC, ABD, ACD, BCD jel¨ lteket t´ rol´ sz´ fa. ´ o a o o osszevonjuk, es csak egyszer foglalkozunk vel¨ k. ¨ ´ u A sz´ fa nagy el˝ nye a gyors t´ mogatotts´ g-meghat´ roz´ s mellett, hogy a jel¨ lt-el˝ all´t´ st is o o a a a a o o´ ı a t´ mogatja. Tudjuk, hogy k´ t gyakori elemhalmaz akkor lesz gener´ tor, ha a legnagyobb sorsz´ m´ a e a a u elem¨ k elhagy´ s´ val ugyanazt az elemhalmazt kapjuk, vagy m´ s szavakkal, a k´ t gyakori elemu aa a e halmaz − 1 hossz´ preﬁxei megegyeznek. A t´ mogatotts´ g-meghat´ roz´ s´ ban haszn´ lt sz´ f´ t felu a a a aa a oa haszn´ lhatjuk a k¨ vetkez˝ iter´ ci´ s l´ p´ s jel¨ ltjeinek az el˝ all´t´ s´ ra, hiszen a sz´ fa t´ rolja a jel¨ lta o o a o e e o o´ ı a a o a o el˝ all´t´ shoz sz¨ ks´ ges gyakori elemhalmazokat. o´ ı a u e Az eg´ sz algoritmus alatt teh´ t egyetlen sz´ f´ t tartunk karban, amely az algoritmus kezdetekor e a oa csak egy cs´ csb´ l all (ez reprezent´ lja az ures halmazt). A t´ mogatotts´ g-meghat´ roz´ s ut´ n t¨ r¨ lj¨ k u o ´ a ¨ a a a a a oo u azon leveleket, amelyek sz´ ml´ l´ ja kisebb min supp-n´ l. Az iter´ ci´ s l´ p´ s v´ g´ re kialakul´ sz´ fa a ao a a o e e e e o o alapj´ n el˝ all´tjuk a jel¨ lteket, amely sor´ n a sz´ fa uj, eggyel m´ lyebb szinten l´ v˝ levelekkel b˝ v¨ l. a o´ ı o a o ´ e e o o u A jel¨ lt-el˝ all´t´ s sor´ n arra is lehet˝ s´ g¨ nk van, hogy az el˝ z˝ iter´ ci´ ban gyakorinak tal´ lt elemo o´ ı a a oe u o o a o a halmazokat es azok sz´ ml´ l´ it ki´rjuk (a kimenetre vagy a h´ tt´ rt´ rol´ ra). ´ a ao ı a e a o A 2.8.1 r´ szben m´ r volt arr´ l sz´ , hogy az elemeken deﬁni´ lt rendez´ s milyen hat´ ssal van a sz´ fa e a o o a e a o alakj´ ra. Tapasztalatok alapj´ n gyakoris´ g szerint cs¨ kken˝ rendez´ s kisebb sz´ f´ t eredm´ nyez, mint a a a o o e oa e a gyakoris´ g szerint n¨ vekv˝ rendez´ s, vagy m´ s v´ letlenszer˝ en megv´ lasztott rendez´ sek. Ennek a o o e a e u a e ellen´ re olyan sz´ f´ t c´ lszer˝ alkalmazni, amelyben az elemeken ertelmezett rendez´ s a gyakoris´ g e oa e u ´ e a szerint n¨ vekv˝ sorrendnek felel meg. Ennek ugyanis k´ t el˝ nye van. Egyr´ szr˝ l a sz´ fa pontjai o o e o e o o kisebbek lesznek (kevesebb el indul ki bel˝ l¨ k), de ami m´ g fontosabb, hogy a ritka elemek lesznek ´ ou e k¨ zel a gy¨ k´ rhez. A ritka elemekkel kevesebb kos´ rbeli elem fog egyezni, ez´ ltal a sz´ fa kisebb o o e a a o r´ sz´ t j´ rjuk be a t´ mogatott jel¨ ltek meghat´ roz´ sa sor´ n. e e a a o a a a A sz´ fa hat´ kony megval´ s´t´ s´ nak r´ szleteit es tov´ bbi gyors´t´ si otleteket a [20, 23, 58] o e o ıa a e ´ a ıa ¨ ´r´ sokban tal´ lhatunk. Egy – kutat´ si c´ lokra szabadon felhaszn´ lhat´ – sz´ fa alap´ APRIORI impıa a a e a o o u lement´ ci´ let¨ lthet˝ a a o o o http ://www.cs.bme.hu/~bodon/en/apriori oldalr´ l. o

4.2.3. Zs´ kutca nyes´ s a e
Sz¨ ks´ gtelen t´ rolni azon cs´ csokat, amelyekb˝ l az osszes el´ rhet˝ levelet t¨ r¨ lt¨ k. Ezek ugyanis u e a u o ¨ e o oo u lass´tj´ k a t´ mogatotts´ gok meghat´ roz´ s´ t (mik¨ zben szerepet nem j´ tszanak benne) es feleslegesen ı a a a a aa o a ´ foglalj´ k a mem´ ri´ t. a o a

4. FEJEZET. GYAKORI ELEMHALMAZOK ¨ FOLYT KOV.

57

4.2.4. A bemenet t´ rol´ sa a a
Amikor megvizsg´ lunk egy kosarat annak erdek´ ben, hogy eld¨ nts¨ k mely jel¨ lteket tartalmazza, a ´ e o u o akkor az oper´ ci´ s rendszer a h´ tt´ rt´ rol´ b´ l bem´ solja a tranzakci´ t a mem´ ri´ ba. Ha van el´ g hely a o a e a o o a o o a e a mem´ ri´ ban, akkor a tranzakci´ ott is marad, es amikor ism´ t sz¨ ks´ g van r´ , nem kell lass´ IO o a o ´ e u e a u m˝ veletet v´ gezn¨ nk. A bemenetet teh´ t sz¨ ks´ gtelen explicit elt´ rolnunk a mem´ ri´ ban, hiszen az u e u a u e a o a oper´ ci´ s rendszer ezt megteszi helyett¨ nk. S˝ t, ha a program elt´ rolja a bemeneti adatot (p´ ld´ ul egy a o u o a e a list´ ban), akkor a val´ s´ gban dupl´ n lesz elt´ rolva. a oa a a A bemenet t´ rol´ s´ nak vannak el˝ nyei is. P´ ld´ ul osszegy˝ jthetj¨ k az azonos tranzakci´ kat a aa o e a ¨ u u o es ahelyett, hogy t¨ bbsz¨ r hajtan´ nk v´ gre ugyanazon a tranzakci´ n a t´ mogatott jel¨ ltek meg´ o o a e o a o hat´ roz´ s´ t, ezt egyszer tessz¨ k meg. Sz¨ ks´ gtelen az eredeti tranzakci´ kat t´ rolni. Az els˝ a aa u u e o a o v´ gigolvas´ s ut´ n rendelkez´ sre allnak a gyakori elemek. A ritka elemek ugysem j´ tszanak szeree a a e ´ ´ a pet, ez´ rt el´ g a tranzakci´ knak csak a gyakori elemeit t´ rolni. Ennek tov´ bbi el˝ nye, hogy sokkal e e o a a o t¨ bb azonos ,,sz˝ rt” tranzakci´ lehet, ez´ ltal tov´ bb cs¨ kken a t´ mogatott jel¨ lteket keres˝ elj´ r´ s o u o a a o a o o aa megh´v´ s´ nak sz´ ma. R´ ad´ sul az -edik v´ gigolvas´ s sor´ n t¨ r¨ lhetj¨ k azokat a sz˝ rt tranzakci´ kat, ı aa a a a e a a oo u u o amelyek nem tartalmaznak egyetlen -elem˝ jel¨ ltet sem. u o A sz˝ rt tranzakci´ kat c´ lszer˝ olyan adatstrukt´ r´ ban t´ rolni, amit gyorsan fel lehet ep´teni (azu o e u ua a ´ ı az gyorsan tudjuk besz´ rni a sz˝ rt tranzakci´ kat) es gyorsan v´ gig tudunk menni a besz´ rt elemeu u o ´ e u ken. Alkalmazhatunk erre a c´ lra egy sz´ f´ t, de tesztek azt mutatj´ k, hogy egy piros-fekete fa (kie oa a egyens´ lyozott bin´ ris fa), amelynek cs´ csaiban egy-egy sz˝ rt tranzakci´ tal´ lhat´ , m´ g jobb megu a u u o a o e old´ s, mert j´ val kisebb a mem´ riaig´ nye. a o o e

˝ e 4.2.5. Tranzakci´ k szur´ se o
A feldolgoz´ s sor´ n a tranzakci´ kat m´ dos´thatjuk/t¨ r¨ lhetj¨ k annak erdek´ ben, hogy az Apriori a a o o ı oo u ´ e m´ g hat´ konyabb legyen. A tranzakci´ sz˝ r´ se alatt a tranzakci´ olyan elemeinek t¨ rl´ s´ t ertj¨ k, e e o ue o o ee ´ u amelyek nem j´ tszanak szerepet az algoritmus kimenet´ nek el˝ all´t´ s´ ban. A nem fontos elemek a e o´ ı a a lass´tj´ k az algoritmust, gondoljunk itt a t´ mogatotts´ g meghat´ roz´ s´ nak m´ dj´ ra. A sz´ fa egy bels˝ ı a a a a aa o a o o csom´ pontj´ n´ l meg kell hat´ roznunk a k¨ z¨ s elemeket az elek c´mk´ inek es a tranzakci´ elemeinek o a a a o o ´ ı e ´ o halmaz´ ban. Min´ l t¨ bb elem van a tranzakci´ ban, ann´ l tov´ bb tart ez a m˝ velet. a e o o a a u Sz˝ r´ snek tekinthetj¨ k az els˝ iter´ ci´ ut´ n v´ grehajtott l´ p´ st : ue u o a o a e e e ˝ o¨ 1. szur˝ otlet. Minden tranzakci´ b´ l t¨ r¨ lj¨ k a ritka elemeket. o o oo u Egyszer˝ sz˝ r˝ otletek a k¨ vetkez˝ k : u uo¨ o o ˝ o¨ 2. szur˝ otlet. Az -edik iter´ ci´ ban a tranzakci´ feldolgoz´ sa ut´ n t¨ r¨ lj¨ k a t tranzakci´ t, a o o a a oo u o amennyiben t elemeinek sz´ ma nem nagyobb, mint . Nyilv´ n val´ , hogy ez a tranzakci´ nem tara a o o talmaz olyan elemhalmazt, amely a k´ s˝ bbi iter´ ci´ ban lesz jel¨ lt. eo a o o ˝ o¨ 3. szur˝ otlet. T¨ r¨ lj¨ k a tranzakci´ t, amennyiben nem tartalmaz jel¨ ltet. oo u o o Ennek az otletnek a jav´tott v´ ltozata : ¨ ı a ˝ o¨ 4. szur˝ otlet. T¨ r¨ lj¨ k a tranzakci´ azon elemeit, amelyek nem elemei egyetlen olyan jeloltnek sem, oo u o ¨ amelyet tartalmaz a tranzakci´ . o

4. FEJEZET. GYAKORI ELEMHALMAZOK

58

Amennyiben az ´gy keletkezett tranzakci´ m´ rete , akkor t¨ r¨ lj¨ k teljesen a tranzakci´ t. P´ ld´ ul, ha a ı o e oo u o e a h´ romelem˝ jel¨ ltek halmaza {ABC, ABD, BCD, FGH} es t = ABCDH, akkor a H elemet t¨ r¨ lhetj¨ k a u o ´ oo u a tranzakci´ b´ l. t = ABCGH eset´ ben a teljes tranzakci´ t t¨ r¨ lj¨ k. o o e o oo u Az el˝ z˝ sz˝ r˝ otletet tov´ bb szigor´thatjuk. Mi kell ahhoz, hogy egy elem eleme legyen majd egy o o u o¨ a ı olyan +1-elem˝ j jel¨ ltnek a k¨ vetkez˝ iter´ ci´ ban, amelyet tartalmaz az aktu´ lis jel¨ lt. Sz¨ ks´ ges u o o o a o a o u e felt´ tel, hogy a j minden -elem˝ r´ szhalmaz´ t tartalmazza a tranzakci´ . A j egy eleme pontosan e u e a o darab r´ szhalmaznak az eleme. Ez alapj´ n : e a ˝ o¨ 5. szur˝ otlet. T¨ r¨ lj¨ k a tranzakci´ azon elemeit, amelyek nem elemei darab olyan jeloltnek, ameoo u o ¨ lyet tartalmaz a tranzakci´ . o Term´ szetesen most is igaz, hogy ez ut´ n a sz˝ r´ s ut´ n alkalmazzuk az m´ sodik sz˝ r˝ otletet, ha ez e a ue a a uo¨ lehets´ ges. A fenti p´ ld´ ban a t = ABCFGH tranzakci´ t ez a sz˝ r´ s teljes eg´ sz´ ben t¨ rli. e e a o ue e e o

4.2.6. Equisupport nyes´ s e
Az egyenl˝ t´ mogatotts´ g´ elemhalmazok alapj´ n t¨ rt´ n˝ , un. equisupport nyes´ s tal´ n a legelo a a u a o e o ´ e a terjedtebb tr¨ kk a gyakori elemhalmazok kinyer´ s´ nek meggyors´t´ s´ ra. A nyes´ s az 4.2 tulajdons´ g u ee ıa a e a egy k¨ vetkezm´ ny´ t haszn´ lja ki. A t´ mogatotts´ g meghat´ roz´ s´ n´ l kihagyhatjuk azokat a halmao e e a a a a aa a zokat, amelyeknek van olyan -elem˝ val´ di r´ szhalmazuk, amelyek t´ mogatotts´ ga egyenl˝ egy u o e a a o ( -1)-elem˝ r´ szhalmazuk´ val. u e e 4.2. tulajdons´ g. Legyen X ⊂ Y ⊆ I. Ha supp(X ) = supp(Y ), akkor supp(X ∪ Z) = supp(Y ∪ Z) a teljes¨ l minden Z ⊆ I-re. u Ez az all´t´ s minden Z ⊆ I elemhalmazra igaz, de nek¨ nk el´ g lesz csak a Z ⊆ I \ Y halmazokra ´ ıa u e koncentr´ lnunk. a Az equisupport nyes´ s es a z´ rt elemhalmazok k¨ z¨ tti osszef¨ gg´ s egy´ rtelm˝ . Az X elemhale ´ a o o ¨ u e e u maz nem z´ rt, es lez´ rtja Y , amennyiben X ⊂ Y , supp(X ) = supp(Y ), tov´ bb´ nem l´ tezik olyan a ´ a a a e elemhalmaz, amelynek Y val´ di r´ szhalmaza, es t´ mogatotts´ ga megegyezik Y t´ mogatotts´ g´ val. o e ´ a a a a a Egy X elemhalmaz akkor, es csak akkor lehet egy egzakt (100% bizonyoss´ g´ ) asszoci´ ci´ s szab´ ly ´ a u a o a felt´ tel r´ sze, ha X nem z´ rt elemhalmaz. Az X elemhalmaz kulcs minta [14], ha nincs vele egyenl˝ e e a o t´ mogatotts´ g´ val´ di r´ szhalmaza. a a u o e Ha az Y jel¨ ltnek a t´ mogatotts´ ga megegyezik az X -el jel¨ lt preﬁxe t´ mogatotts´ g´ val, akkor o a a o a a a felesleges az Y -t tartalmaz´ Y ∪ Z halmazokat mint uj jel¨ lteket el˝ all´tani, a 4.2 tulajdons´ g alapj´ n o ´ o o´ ı a a ezek t´ mogatotts´ ga X ∪ Z r´ szhalmazukb´ l k¨ zvetlen¨ l sz´ m´that´ [67]. a a e o o u a ı o Az alulr´ l ep´tkez˝ algoritmusokn´ l (Apriori, Eclat, Fp-growth, stb.) a preﬁxek t´ mogatotts´ ga o ´ ı o a a a mindig el´ rhet˝ , ´gy a preﬁx equisupportnyes´ st (az X az Y preﬁxe es |X |+1=|Y |) b´ rmikor alkalmaze o ı e ´ a hatjuk. A preﬁx equisupport nyes´ s a k¨ vetkez˝ k´ ppen m˝ k¨ dik : miut´ n kisz´ moltuk a P elemhale o o e u o a a maz gyerekeinek t´ mogatotts´ g´ t, a ritka elemek elhagy´ s´ n´ l ellen˝ rizz¨ k, hogy a t´ mogatotts´ guk a a a aa a o u a a egyenl˝ -e a sz¨ l˝ t´ mogatotts´ g´ val, azaz supp(P)-vel. Az ezt teljes´t˝ elemeket nem kell ﬁgyelembe o uo a a a ıo venn¨ nk mint gener´ torokat a k¨ vetkez˝ jel¨ lt-el˝ all´t´ s sor´ n. Ezen jel¨ lteket t¨ r¨ lj¨ k es az utols´ u a o o o o´ ı a a o oo u ´ o elemeiket egy halmazban t´ roljuk el, amit equisupport halmaznak h´vunk es P-hez rendelj¨ k. Vegy¨ k a ı ´ u u eszre, hogy az elemhalmazh´ l´ preﬁx bej´ r´ snak k¨ sz¨ nhet˝ en a jel¨ lt-el˝ all´t´ s sor´ n az X \Y z ´ ao aa o o o o o´ ı a a minden z ∈ Z, ahol az elemhalmaz bej´ r´ s´ n´ l haszn´ lt rendez´ s. aaa a a e Amikor az ki´rjuk az GY gyakori elemhalmazt, vele egy¨ tt ki´rjuk minden E ⊆ E halmazokkal ı u ı vett uni´ j´ t is, ahol E a GY preﬁxeinek equisuporthalmazainak uni´ ja. oa o

4. FEJEZET. GYAKORI ELEMHALMAZOK

59

4.3. p´ lda. Legyenek a k´ telem˝ , A preﬁx˝ gyakori elemhalmazok a k¨ vetkez˝ k : {AB, AC, AD} es e e u u o o ´ supp(A) = supp(AB) = supp(AC) = 4 tov´ bb´ supp(AD) = 3. A t¨ bbi A preﬁx˝ jel¨ lt el˝ all´t´ s´ hoz a a o u o o´ ı a a egyed¨ l az AD elemhalmazt kell ﬁgyelembe venn¨ nk. Azonban egy jel¨ lt l´ trehoz´ s´ hoz mind az apriu u o e aa ori, az ECLAT- es az FP-growth algoritmusn´ l legal´ bb k´ t elemhalmaz sz¨ ks´ ges, ´gy itt v´ get is er a a e u e ı e ´ ´ az A preﬁx˝ halmazok feldolgoz´ sa. Az AD es A elemhalmazok ki´r´ sakor BC minden r´ szhalmaz´ t u a ıa e a ´ is hozz´ juk kell venni, ´gy v´ g¨ l az AD, ABD, ACD, ABCD, valamint az A, AB, AC, ABC halmazok a ı e u ker¨ lnek ki´r´ sra ; az el˝ bbiek t´ mogatotts´ ga 3, ut´ bbiak´ 4 lesz. u ıa o a a o e Ha az adatb´ zis csak z´ rt elemhalmazokat tartalmaz, akkor nem tudjuk ezt a nyes´ st alkalmazni, a a e a t´ mogatotts´ gok egyenl˝ s´ g´ nek vizsg´ lata viszont lelass´tja az algoritmust. A tapasztalat azona a oe e a ı ban azt mutatja, hogy az ellen˝ rz´ s gyors (p´ ld´ ul az Apriori algoritmusn´ l nem kell ujra bej´ rni a o e e a a ´ a sz´ f´ t), es nem okoz cache miss-t. A kev´ s nemz´ rt elemhalmazt tartalmaz´ adatb´ zisokn´ l eleny´ sz˝ oa ´ e a o a a e o a fut´ siid˝ n¨ veked´ se. Az equisupport nyes´ s ez´ rt biztons´ gos gyors´t´ si tr¨ kknek tekinthet˝ . a o o e e e a ıa u o A fenti le´r´ sban nem haszn´ ltuk ki az Apriori algoritmus saj´ toss´ gait csak azt, hogy az algoritıa a a a mus alulr´ l ep´tkez˝ es az elemhalmaz bej´ r´ s sor´ n deﬁni´ lva van egy rendez´ s es ´gy a preﬁx is. o ı o´ aa a a e ´ ı A tov´ bbiakban jobban a r´ szletekben m´ lyed¨ nk es megn´ zz¨ k, hogy mit kell tenn¨ nk az Apriori a e e u ´ e u u algoritmusban, ha a preﬁx equisupport nyes´ st k´v´ njuk alkalmazni. e ı a Az Apriori algoritmus sz´ f´ s megk¨ zel´t´ se eset´ n minden cs´ cshoz egy list´ t kell hozz´ venn¨ nk, oa o ıe e u a a u mely az equisupport halmaz elemeit tartalmazza. A ritk´ nak bizonyul´ jel¨ ltek elt´ vol´t´ sakor ela o o a ıa len˝ rizz¨ k, hogy a lev´ l t´ mogatotts´ ga megegyezik-e preﬁx´ nek t´ mogatotts´ g´ val. Ha igen, a leo u e a a e a a a velet t¨ r¨ lhetj¨ k a sz´ f´ b´ l, es az ele c´mk´ j´ t hozz´´rjuk a sz¨ l˝ equisupport halmaz´ hoz. Minden i oo u oa o ´ ´ ı ee aı uo a elem egy equisupport halmazban tekinthet˝ egy i c´mk´ j˝ hurok´ lnek. A hurok´ leket nem kell ﬁgyeo ı eu e e lembe venni a t´ mogatotts´ g meghat´ roz´ sakor, de a jel¨ lt-el˝ all´t´ sn´ l igen. a a a a o o´ ı a a 4.4. p´ lda. Legyenek AB, AC, BC a gyakori p´ rok. supp(AB) = supp(A) = supp(AC) es supp(B) = e a ´ =supp(BC)=supp(BD). A 4.6 abra a sz´ fa ritka jel¨ ltek elt´ vol´t´ sa ut´ ni allapot´ t mutatja. Vegy¨ k o o a ıa a ´ a u ´ eszre, hogy ha a hurok´ leket ﬁgyelmen k´v¨ l hagytuk volna a jel¨ ltgener´ l´ s sor´ n, akkor az ABC e ı u o aa a ´ elemhalmazt nem all´tottuk volna el˝ mint jel¨ lt, holott minden r´ szhalmaza gyakori. o o e ´ ı

B A B C C,D

4.6. abra. P´ lda : equisupport levelek elt´ vol´t´ sa ´ e a ıa Ez a p´ lda az equisupport nyes´ s es a zs´ kutcanyes´ s k¨ zti osszef¨ gg´ sre is felh´vja a ﬁgyele e ´ a e o ¨ u e ı met. L´ ttuk, hogy a B csom´ pont nem vezet 2 m´ lys´ g˝ lev´ lbe, ´gy a zs´ kutcanyes´ s t¨ r¨ lte a o e e u e ı a e oo ´ volna ezt a cs´ csot, es nem lett volna jel¨ lt az ABC elemhalmaz. Ujra kell ertelmezn¨ nk a u ´ o ´ u csom´ pontok m´ lys´ g´ t a zs´ kutcanyes´ sn´ l az´ rt, hogy ne t¨ r¨ lj¨ n olyan leveleket, amikre sz¨ ks´ g o e e e a e e e oo o u e lehet a jel¨ lt-el˝ all´t´ s sor´ n. Az X elemhalmaz t´ mogatotts´ ga megegyezik az X olyan b˝ v´t´ s´ nek o o´ ı a a a a o ıe e t´ mogatotts´ g´ val, ahol a hozz´ adott elem az X valamely preﬁx´ hez tartoz´ equisupport halmaz egy a a a a e o

4. FEJEZET. GYAKORI ELEMHALMAZOK

60

eleme. ´ amikor ﬁgyelembe vessz¨ k az X csom´ pont m´ lys´ g´ t a zs´ kutcanyes´ s sor´ n, hozz´ Igy u o e e e a e a a kell adnunk X aktu´ lis m´ lys´ g´ hez a gy¨ k´ rb˝ l az X -be vezet˝ pontok equisupport halmazainak a e e e o e o o osszm´ ret´ t. P´ ld´ ul a 4.6 abr´ n l´ that´ sz´ f´ n a B m´ lys´ ge 1 helyett 3. ¨ e e e a ´ a a o oa e e

4.2.7. Borgelt-f´ le t´ mogatotts´ g-meghat´ roz´ s e a a a a
Ha a tranzakci´ kat sz´ f´ ban vagy Patr´cia-f´ ban t´ roljuk, akkor egy m´ sik technik´ t is o oa ı a a a a haszn´ lhatunk a t´ mogatotts´ gok meghat´ roz´ s´ ra [22, 23]. Ezt a m´ dszert alkalmazza Christian Bora a a a aa o gelt a vil´ gh´r˝ Apriori implement´ ci´ ja utols´ v´ ltozataiban. a ıu a o o a Az a megﬁgyel´ s all az otlet m¨ g¨ tt, hogy k´ t tranzakci´ a k¨ z¨ s preﬁxig ugyanazt a programe ´ ¨ o o e o o o fut´ st eredm´ nyezi a t´ mogatotts´ g meghat´ roz´ sakat (ugyanazt a sz´ far´ szt j´ rjuk be). Ha sz´ f´ ban a e a a a a o e a oa t´ roljuk a tranzakci´ kat, akkor rendelkez´ sre all minden sz¨ ks´ ges inform´ ci´ a k¨ z¨ s preﬁxekr˝ l. a o e ´ u e a o o o o Megoldhat´ , hogy ugyanazokat a preﬁxeket csak egyszer dolgozzuk fel, es ne annyiszor, ah´ nyszor o ´ a el˝ fordulnak. o A tranzakci´ f´ ba minden csom´ ponthoz egy sz´ ml´ l´ t rendel¨ nk. Az I elemhalmaz sz´ ml´ l´ ja oa o a ao u a ao azoknak a tranzakci´ knak a sz´ m´ t t´ rolja, amelyek preﬁxe I. Ebb˝ l a szempontb´ l ez a megold´ s o a a a o o a elt´ r a bemenet t´ rol´ s´ n´ l bemutatott (l´ sd 4.2.4-es r´ sz) sz´ fa alap´ megold´ st´ l (´ s ink´ bb egy e a aa a a e o u a o e a olyan FP-f´ ra hasonl´t, amelyb˝ l elhagytuk a kereszt´ leket es a fejl´ c t´ bl´ t). A tranzakci´ sz´ f´ n´ l a ı o e ´ e a a o oa a es a jel¨ lt sz´ f´ n´ l haszn´ lt rendez´ snek meg kell egyeznie. Ez h´ tr´ ny, mivel az egyes sz´ f´ khoz ´ o oa a a e a a oa m´ s-m´ s rendez´ s lenne optim´ lis. a a e a Sajnos a [22]-ben nincsen r´ szletesen kidolgozva az algoritmus, de v´ lhet˝ en a k¨ vetkez˝ k´ pp e e o o o e m˝ k¨ dik : P´ rhuzamosan bej´ rjuk a jel¨ lt- es a tranzakci´ sz´ f´ t dupl´ n rekurz´v m´ don. K´ t mutat´ t u o a a o ´ o oa a ı o e o haszn´ lunk, melyek kezdetben az egyes gy¨ kerekre mutatnak. Ezut´ n v´ gigmegy¨ nk mindk´ t cs´ cs a o a e u e u elein. Ha a tranzakci´ sz´ fa aktu´ lis c´mk´ je kisebb vagy egyenl˝ a m´ sik c´mk´ n´ l, akkor rekurz´van ´ o o a ı e o a ı e e ı tov´ bbl´ p¨ nk a tranzakci´ sz´ f´ ban a gyerekcsom´ pontra (az sz´ fa aktu´ lis csom´ pontmutat´ ja nem a e u o oa o o a o o v´ ltozik). Amennyiben a k´ t c´mke egyenl˝ , a rekurzi´ t azokkal a gyerekekkel folytatjuk, amelyekre a e ı o o a mutat´ k altal mutatott elek mutatnak. A 2 pszeud´ -k´ d a Borgelt-f´ le t´ mogatotts´ g-meghat´ roz´ s o ´ ´ o o e a a a a egy tov´ bb optimaliz´ lt v´ ltozat´ t adja meg. a a a a A fenti megold´ snak h´ tr´ nya, hogy sok olyan utat j´ r be a jel¨ lt sz´ f´ ban, amelyet az eredeti a a a a o oa t´ mogatotts´ g meghat´ roz´ m´ dszer nem tenne, mert nem vezet lev´ lbe. A m´ dszer nem veszi ﬁa a a o o e o gyelembe, hogy a tranzakci´ nak csak egy r´ sz´ t kell ki´ rt´ keln¨ nk. Megoldhatjuk a probl´ m´ t, ha o e e e e u e a hozz´ rendel¨ nk egy sz´ ml´ l´ t a tranzakci´ sz´ fa minden pontj´ hoz. A sz´ ml´ l´ adja meg a pontb´ l a u a ao o o a a ao o kiindul´ leghosszabb ut hossz´ t. A t´ mogatotts´ g meghat´ roz´ sa sor´ n nem vessz¨ k ﬁgyelembe o ´ a a a a a a u azokat a csom´ pontokat, melyek sz´ ml´ l´ ja kisebb, mint − 1, ahol azon l´ p´ sek sz´ m´ t adja, o a ao e e a a amelyeket meg kell m´ g tenni a jel¨ ltsz´ fa aktu´ lis pontj´ b´ l, hogy lev´ lbe jussunk. Az algoritmus e o o a a o e gyors´that´ , ha a tranzakci´ sz˝ r´ s´ nek otlet´ t (l´ sd 4.2.5-¨ s r´ sz) is alkalmazzuk. Tov´ bbi r´ szletek ı o o uee ¨ e a o e a e tudhatunk meg a [22] tanulm´ nyb´ l. a o

´ 4.2.8. Utols´ f´ zisok gyors´t´ sa : APRIORI-TID es APRIORI-HYBRID algorito a ıa musok
Az APRIORI-TID [7] a SETM [78] algoritmus tov´ bbfejlesztett v´ ltozata. F˝ bb k¨ l¨ nbs´ g az a a o uo e APRIORI-hoz k´ pest, hogy a t´ mogatotts´ g meghat´ roz´ s´ n´ l nem a kosarakat haszn´ lja, hanem egy e a a a aa a a seg´ dt´ bl´ t. Az -edik l´ p´ sben rendelkez´ s¨ nkre all´ seg´ dt´ bla t´ rolja a tranzakci´ k azonos´t´ it e a a e e eu ´ o e a a o ıo es az egyes tranzakci´ kban tal´ lhat´ -elem˝ jel¨ lteket. Kis -ekn´ l ez a seg´ dt´ bla j´ val nagyobb ´ o a o u o e e a o

4. FEJEZET. GYAKORI ELEMHALMAZOK Algorithm 2 BORGELT SUPPCOUNT Require: nc : a sz´ fa aktu´ lis csom´ pontja, o a o nt : a tranzakci´ fa aktu´ lis csom´ pontja, o a o : az nc -b˝ l lev´ lbe vezet˝ ut hossza, o e o´ i : az nc legkisebb olyan el´ nek indexe, amely c´mk´ je nagyobb, mint az nt -be vezet˝ el c´mk´ je ´e ı e o´ ı e if = 0 then nc .sz´ ml´ l´ ← nc .sz´ ml´ l´ + nt .sz´ ml´ l´ a ao a ao a ao else for j = 0 to nt .´ lsz´ m − 1 do e a while i < nc .´ lsz´ m AND nc .´ l[i].c´mke < nt .´ l[j].c´mke do e a e ı e ı i ← i+1 end while if i < nc .´ lsz´ m AND nc .´ l[i].c´mke ≥ nt .´ l[j].c´mke then e a e ı e ı e BORGELT SUPPCOUNT(nc , nt .´ l[j].gyermek, , i) if nc .´ l[i].c´mke = nt .´ l[j].c´mke then e ı e ı BORGELT SUPPCOUNT(nc .´ l[i].gyermek, nt .´ l[j].gyermek, − 1, 0) e e i ← i+1 end if else break end if end for end if

61

lehet, mint az eredeti adatb´ zis, de nagy -ekn´ l gyorsabb t´ mogatotts´ g-meghat´ roz´ st v´ rhatunk. A a e a a a a a k´ telem˝ jel¨ ltekhez tartoz´ seg´ dt´ bl´ t a bemeneti adatb´ l es a gyakori elemb˝ l all´tjuk el˝ , a 2-n´ l e u o o e a a o ´ o ´ ı o e nagyobb m´ ret˝ jel¨ ltekhez tartoz´ seg´ dt´ bl´ t az el˝ z˝ seg´ dt´ bl´ b´ l es az utolj´ ra meghat´ rozott e u o o e a a o o e a a o ´ a a gyakori elemekb˝ l kapjuk. Term´ szetesen uj seg´ dt´ bla el˝ all´t´ sa ut´ n a r´ git t¨ r¨ lhetj¨ k, hiszen arra o e ´ e a o´ ı a a e oo u t¨ bb´ nem lesz sz¨ ks´ g. o e u e A jobb oldali abra mutatja, hogy egy ´ p´ ldaadatb´ zisban mennyi id˝ alatt tal´ lt´ k meg a e a o a a Id˝ (sec) o k¨ l¨ nb¨ z˝ m´ ret˝ gyakori elemhalmazokat az APRIORI uo o o e u 6 illetve az APRIORI-TID algoritmusok. L´ that´ , hogy a o a kezdeti f´ zisokban (1, 2, 3-elem˝ gyakori elemhal- 14 a u mazok megtal´ l´ s´ ban) az APRIORI gyorsabb, m´g a aa a ı k´ s˝ bbiekben t¨ bb nagys´ grenddel az APRIORI-TID. 12 eo o a APRIORI A k´ t m´ dszer otv¨ z´ se az un. APRIORI-HIBRID [7] e o ¨ o e ´ APRIORI-TID algoritmus, amely a kezdeti l´ p´ sekben az APRIORI-t a 10 e e k´ s˝ bbiekben az APRIORI-TID-et haszn´ lja. eo a 8 Nagy k´ rd´ s az APRIORI-HIBRID algoritmussal e e kapcsolatban, hogy hol v´ ltsunk at az egyik algoritmusr´ l a ´ o 6 a m´ sikra. A szerz˝ k azt a heurisztik´ t javasolt´ k, hogy a o a a S  S a v´ lt´ s abban az esetben t¨ rt´ njen, ha a jel¨ ltek sz´ ma a a o e o a 4  Shhh cs¨ kken es a seg´ dt´ bla m´ rete el fog f´ rni a mem´ ri´ ban. o ´ e a e e o a hh ` h `  ` 2  A seg´ dt´ bla m´ rete ugyanis a jel¨ ltek sz´ m´ t´ l f¨ gg, ´gy e a e o a ao u ı @ 0
@ @ -

1

2

3

5 6 4 jel¨ ltm´ ret o e

7

4. FEJEZET. GYAKORI ELEMHALMAZOK

62

ha a k¨ vetkez˝ iter´ ci´ ban el´ g a mem´ ria akkor k´ s˝ bb o o a o e o eo is el´ g lesz. e Ez az ervel´ s azonban helytelen [66]. Gondoljunk ´ e csak egy olyan adatb´ zisra, amelyben van egy 20 elem˝ a u gyakori halmaz es 1000 darab, p´ ronk´ nt diszjunkt, ot elem˝ gyakori elemhalmaz. A h´ rom elem˝ ´ a e ¨ u a u 5 20 5 20 a e u e jel¨ ltek sz´ ma 3 + 1000 3 = 11140 a n´ gy elem˝ ek´ pedig 4 + 1000 4 = 9845 teh´ t keo a vesebb. Az APRIORI-HIBRID atv´ ltana APRIORI-TID-re, ugyanakkor a jel¨ ltek sz´ ma exponen´ a o a ci´ lisan n¨ vekedni kezdene, es az algoritmus kifutna a mem´ ri´ b´ l. Nem ismeretes olyan heurisztika, a o ´ o a o amely elegend˝ sz´ m´ teszthalmazon bizony´totta volna hat´ konys´ g´ t. o a u ı e a a

4.2.9. Fut´ si id˝ es mem´ riaig´ ny a o´ o e
A GYEK feladat megad´ sakor elmondtuk, hogy m´ r az eredm´ ny ki´r´ sa – ami a fut´ si id˝ nek a a a e ıa a o r´ sze – az |I|-ben exponenci´ lis lehet. A mem´ riaig´ nyr˝ l is hasonl´ mondhat´ el. Az ( + 1)-elem˝ e a o e o o o u |I| jel¨ ltek el˝ all´t´ s´ hoz sz¨ ks´ g¨ nk van az osszes -elem˝ jel¨ ltre, amelyek sz´ ma ak´ r |I|/2 is lehet. o o´ ı a a u e u ¨ u o a a Ezek a fels˝ korl´ tok elesek is, hiszen min supp = 0-n´ l minden elemhalmaz gyakori. o a ´ a Az algoritmus ind´t´ sa el˝ tt teh´ t nem sokat tudunk mondani a fut´ si id˝ r˝ l. A fut´ s sor´ n, azonıa o a a oo a a ban egyre t¨ bb inform´ ci´ t gy˝ jt¨ nk, ´gy felmer¨ l a k´ rd´ s, hogy ezt fel tudjuk-e haszn´ lni az algorito a o u u ı u e e a mus marad´ k fut´ si idej´ nek j´ sl´ s´ ra. P´ ld´ ul, ha a gyakori elemek sz´ ma n´ gy, akkor tudjuk, hogy e a e o aa e a a e a legnagyobb gyakori elemhalmaz m´ rete legfeljebb n´ gy (azaz m´ g legfeljebb h´ romszor olvassuk e e e a 4 4 4 v´ gig az adatb´ zist), az osszes jel¨ lt maxim´ lis sz´ ma pedig 2 + 3 + 4 = 11. A k¨ vetkez˝ kben e a ¨ o a a o o megvizsg´ ljuk, hogy mit tudunk elmondani a jel¨ ltek sz´ m´ r´ l es a maxim´ lis jel¨ ltek m´ ret´ r˝ l, ha a o a ao ´ a o e eo adottak az -elem˝ gyakori elemhalmazok (GY ). u A k¨ vetkez˝ r´ sz fontos fogalma a kanonikus reprezent´ ci´ lesz. o o e a o 4.5. lemma. Adott n es pozit´v eg´ szek eset´ ben a k¨ vetkez˝ fel´r´ s egy´ rtelm˝ : ı e e o o ıa e u ´ n= ahol r ≥ 1, m > m
−1

m

+

m −1 mr +· · ·+ , −1 r

> · · · > mr es m j ≥ j minden j = r, r + 1, . . . , sz´ mra. a ´

Ezt a reprezent´ ci´ t h´vj´ k -kanonikus reprezentaci´ nak. Meghat´ roz´ sa nagyon egyszer˝ : m -nek a o ı a a a u ´ o m −1 m −1 +1 m m +1 m ki kell el´ g´tenie a e ı ≤n< felt´ telt, m −1 -nek a −1 ≤ n − e < felt´ telt, es e ´ −1 m −1 m mr − −1 − · · ·− r nulla nem lesz. ´gy tov´ bb, am´g n − ı a ı Legyen I = {i1 , i2 , . . . , im } elemek halmaza es GY egy olyan I feletti halmazcsal´ d1 , amelynek ´ a minden eleme -elem˝ . Az -n´ l nagyobb m´ ret˝ I ⊆ I halmaz fedi a GY -et, ha I minden -elem˝ u e e u u r´ szhalmaza eleme GY -nek. Az osszes lehets´ ges ( + p)-m´ ret˝ GY -et fed˝ halmazokb´ l alkotott e ¨ e e u o o halmazcsal´ dot J +p (GY )-lel jel¨ lj¨ k. Nem v´ letlen, hogy ezt a halmazt ugyan´ gy jel¨ lt¨ k, mint az a o u e u o u A PRIORI algoritmus jel¨ ltjeit, ugyanis az ( + p)-m´ ret˝ jel¨ ltek ezen halmazcsal´ dnak az elemei, es o e u o a ´ ha az algoritmus sor´ n minden jel¨ lt gyakori, akkor az ( + p)-m´ ret˝ jel¨ ltek halmaza megegyezik a o e u o J +p (GY )-lel. A k¨ vetkez˝ t´ tel megadja, hogy adott GY eset´ n legfeljebb mennyi lehet a J +p (GY ) elemeinek o o e e sz´ ma. a
1A

H-t az I feletti halmazcsal´ dnak nevezz¨ k, amennyiben H ⊆ 2I . a u

4. FEJEZET. GYAKORI ELEMHALMAZOK 4.6. t´ tel. Ha e |GY | = -kanonikus reprezent´ ci´ , akkor a o |J +p (GY )| ≤ m + +p

63

m

+

m −1 mr +· · ·+ −1 r m −1 ms + · · ·+ , −1+ p s+ p

ahol s a legkisebb olyan eg´ sz, amelyre ms < s + p. Ha nincs ilyen eg´ sz sz´ m, akkor s = r − 1. e e a A fenti t´ tel a Kruskal–Katona t´ tel k¨ vetkezm´ nye, ez´ rt a t´ telben szerepl˝ fels˝ korl´ tot a e e o e e e o o a +p tov´ bbiakban KK (|GY |)-el jel¨ lj¨ k. a o u 4.7. t´ tel. A 4.6. t´ telben szerepl˝ fels˝ korl´ t eles, azaz adott n, , p sz´ mokhoz mindig l´ tezik GY , e e o o a ´ a e +p amelyre |GY | = n, es |J +p (GY )| = KK (|GY |). ´ A kanonikus reprezent´ ci´ seg´ts´ g´ vel egyszer˝ eles fels˝ becsl´ st tudunk adni a legnagyobb jel¨ lt a o ı e e u´ o e o m +1 , ami azt jelenti, hogy nem l´ tezhet e m´ ret´ re (jel¨ l´ sben maxsize(GY )) is. Tudjuk, hogy |GY |< e e oe olyan jel¨ lt, amelynek m´ rete nagyobb m -n´ l. o e e 4.8. k¨ vetkezm´ ny. Amennyiben a |GY | sz´ mnak az -kanonikus reprezent´ ci´ j´ ban szerepl˝ els˝ o e a a oa o o tag m , akkor maxsize(GY ) ≤ m . Az m sz´ mot a tov´ bbiakban µ (|GY |)-el jel¨ lj¨ k. Ez az ert´ k azt is megmondja, hogy mekkora a a o u ´ e jel¨ ltm´ retn´ l v´ lik null´ v´ a fels˝ korl´ t, azaz : o e e a a a o a 4.9. k¨ vetkezm´ ny. µ (|GY |) = + min{p|KK o e
+p

(|GY |) = 0} − 1

A marad´ k fut´ si id˝ j´ sl´ s´ ra a k¨ vetkez˝ all´t´ s ny´ jt seg´ts´ get. e a o o aa o o´ ıa u ı e 4.10. k¨ vetkezm´ ny. Az osszes lehets´ ges -n´ l nagyobb m´ ret˝ jel¨ lt sz´ ma legfeljebb o e e e e u o a ¨ KK
osszes ¨

(|GY |) =

µ (|GY |) p=1

∑

KK

+p

(|GY |).

A fenti korl´ tok sz´ pek es egyszer˝ ek, mivel csak k´ t param´ tert haszn´ lnak : az aktu´ lis m´ retet a e ´ u e e a a e es az -elem˝ gyakori elemhalmazok sz´ m´ t (|GY |). Enn´ l j´ val t¨ bbet tudunk. Nem csak a gya´ u a a e o o kori elemhalmazok sz´ m´ t ismerj¨ k, hanem m´ r pontosan meghat´ roztuk oket magukat is ! Az uj a a u a a ˝ ´ inform´ ci´ seg´ts´ g´ vel sz´ mos esetben jobb fels˝ korl´ tot adhatunk. P´ ld´ ul, ha a GY -ben csak a o ı e e a o a e a p´ ronk´ nt diszjunkt elemhalmazok vannak, akkor nem all´tunk el˝ jel¨ lteket. A 4.6. t´ telben szea e ´ ı o o e repl˝ fels˝ korl´ t azonban j´ val nagyobb lehet null´ n´ l. A k¨ vetkez˝ kben bemutatjuk, hogyan lehet o o a o a a o o a megl´ v˝ fels˝ korl´ tot az m´ ret˝ gyakori elemhalmazok strukt ur´ j´ ra rekurz´van alkalmazni. e o o a e u ı ´ aa Ehhez feltessz¨ k, hogy egy teljes rendez´ st tudunk deﬁni´ lni az I elemein, ami alapj´ n tetsz˝ leges u e a a o elemhalmaznak meg tudjuk hat´ rozni a legkisebb elem´ t. Vezess¨ k be a k¨ vetkez˝ k´ t jel¨ l´ st : a e u o o e oe GY i = {I − {i}|I ∈ GY , i = min I}, A GY i halmazt ugy kapjuk GY -b˝ l, hogy vessz¨ k azon halmazokat, amelyek legkisebb eleme i, majd ´ o u t¨ r¨ lj¨ k ezekb˝ l az i elemet. oo u o

4. FEJEZET. GYAKORI ELEMHALMAZOK Ezek ut´ n deﬁni´ lhatjuk a k¨ vetkez˝ rekurz´v f¨ ggv´ nyt tetsz˝ leges p > 0-ra : a a o o ı u e o KK ∗,p (GY )=
|GY | p+1

64

, ha = 1
+p

min{KK

(|GY

|), ∑i∈I KK ∗−1,p (GY i )}
+p

, ha > 1.

A deﬁn´ci´ b´ l k¨ vetkezi, hogy KK ∗,p (GY ) ≤ KK ı o o o 4.11. t´ tel. |J +p (GY )| ≤ KK ∗,p (GY ). e

(|GY |), tov´ bb´ a a

Bizony´t´ s: A bizony´t´ s teljes indukci´ n alapul, az = 1 eset trivi´ lis. Tulajdonk´ ppen csak az kell ıa ıa o a e bel´ tni, hogy a |J +p (GY )| ≤ ∑ KK ∗−1,p (GY i )
i∈I

Az egyszer˝ s´ g kedv´ ert vezess¨ k be a k¨ vetkez˝ jel¨ l´ st : H ∪i = {I ∪{i}|I ∈ H}, ahol H egy I feletti ue e´ u o o oe j / halmazcsal´ d. Vegy¨ k eszre, hogy GY = ∑i∈I GY i ∪i es GY i ∩GY = 0 minden i = j elemp´ rra. Azaz a u ´ ´ a a GY halmazcsal´ d egy part´ci´ j´ t k´ pezt¨ k. a ı oa e u Amennyiben I ∈ J +p (GY ), es I-nek legkisebb eleme i, akkor I \{i} ∈ J −1+p (GY i ), hiszen I \{i} ´ minden ( − 1)-elem˝ r´ szhalmaza GY i -beli. Ebb˝ l k¨ vetkezik, hogy u e o o J +p (GY ) ⊆
i∈I

[

J −1+p (GY i ) ∪ i.
−1+p (GY i) ∪ i

Abb´ l, hogy az GY i halmazcsal´ dok p´ ronk´ nt diszjunktak k¨ vetkezik, hogy J o a a e o p´ ronk´ nt diszjunkt halmazcsal´ dok. Ebb˝ l k¨ vetkezik az all´t´ s, hiszen : a e a o o ´ ıa |J +p (GY )| ≤ |
i∈I

is

= ∑ |J −1+p (GY i ) ∪ i| = ∑ |J −1+p (GY i )| ≤ ∑ KK ∗−1,p (GY i ),
i∈I i∈I i∈I

[

J −1+p (GY i ) ∪ i|

ahol az utols´ egyenl˝ tlens´ gn´ l az indukci´ s feltev´ st haszn´ ltuk. o o e e o e a

A p´ ronk´ nt diszjunkt halmazok esete j´ p´ lda arra, hogy a minimum kifejez´ sben szerepl˝ a e o e e o m´ sodik tag kisebb lehet az els˝ n´ l. El˝ fordulhat azonban az ellenkez˝ eset is. P´ ld´ ul legyen GY2 = a o e o o e a 3 a o¨ ={AB, AC}. K¨ nny˝ ellen˝ rizni, hogy KK2 (|GY2 |)=0, ugyanakkor a m´ sodik tagban szerepl˝ osszeg o u o 1-et ad. Nem tudhatjuk, hogy melyik ert´ k a kisebb, ´gy jogos a k´ t ert´ k minimum´ t venni. ´ e ı e ´ e a Jav´thatjuk a legnagyobb jel¨ lt m´ ret´ re, illetve az osszes jel¨ lt sz´ m´ ra vonatkoz´ fels˝ ı o e e ¨ o a a o o korl´ tokon is. Legyen µ∗ (GY ) = + min{p|KK ∗+p (GY ) = 0} − 1 es a ´
∗ KKosszes (GY ¨ µ∗ (GY )

)=

p=1

∑

KK ∗+p (GY ).

4. FEJEZET. GYAKORI ELEMHALMAZOK 4.12. k¨ vetkezm´ ny. maxsize(GY ) ≤ µ∗ (GY ) ≤ µ (|GY |). o e

65

∗ 4.13. k¨ vetkezm´ ny. Az osszes lehets´ ges -n´ l nagyobb m´ ret˝ jel¨ lt sz´ ma legfeljebb KKosszes o e e e e u o a ¨ ¨ ¨ ∗ ∗(GY ) lehet, es KKosszes (GY ) ≤ KK osszes (|GY |). ´ ¨ ∗ A KK ∗ ert´ k f¨ gg a rendez´ st˝ l. P´ ld´ ul a KK2,1 ({AB, AC}) ert´ ke 1, amennyiben a rendez´ s ´ e u e o e a ´ e e szerinti legkisebb elem A, es 0 b´ rmely m´ s esetben. Elm´ letileg meghat´ rozhatjuk az osszes ren´ a a e a ¨ dez´ s szerinti fels˝ korl´ tot, es kiv´ laszthatjuk azt, amelyik a legkisebb ert´ ket adja. Ez a megold´ s e o a ´ a ´ e a azonban t´ l sok id˝ be telne. A sz´ fa altal haszn´ lt rendez´ s szerinti fels˝ korl´ tot viszonylag k¨ nnyen u o o ´ a e o a o meghat´ rozhatjuk. Ehhez azt kell l´ tnunk, hogy a gy¨ k´ r i c´mk´ j˝ el´ hez tartoz´ r´ szfa levelei repa a o e ı eu´e o e rezent´ lj´ k a GY i elemeit. A sz´ fa egyetlen bej´ r´ s´ val egy egyszer˝ rekurz´v m´ dszer seg´ts´ g´ vel a a o aaa u ı o ı e e −d+p minden cs´ cshoz kisz´ m´thatjuk a KK ∗−d,p (GY I−d ) es KK −d (|GY I−d |) ert´ keket, ahol d a cs´ cs u a ı ´ ´ e u I m´ lys´ g´ t jel¨ li, GY −d pedig az adott cs´ cshoz tartoz´ r´ szfa altal reprezent´ lt elemhalmazokat. A e e e o u o e ´ a gy¨ k´ rhez kisz´ m´tott k´ t ert´ k adja meg a KK es KK ∗ korl´ tokat. o e a ı e ´ e ´ a Ha a marad´ k fut´ si id˝ becsl´ s´ re k´v´ njuk haszn´ lni a fenti fels˝ korl´ tot, akkor tudnunk kell, e a o ee ı a a o a hogy a jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ sa f¨ gg az A PRIORI algoritmusban felhaszn´ lt adato a a a a a u a strukt´ r´ t´ l. Sz´ fa eset´ ben p´ ld´ ul egy jel¨ lt el˝ fordul´ s´ nak meghat´ roz´ s´ hoz el kell jutnunk a uao o e e a o o aa a aa jel¨ ltet reprezent´ l´ lev´ lhez, ami a jel¨ lt m´ ret´ vel ar´ nyos l´ p´ ssz´ m´ m˝ veletet ig´ nyel. A mao ao e o e e a e e a u u e ∗ (GY ) ert´ keket s´ lyozni kell ( + p)-vel. rad´ k fut´ si id˝ pontosabb fels˝ becsl´ s´ hez a KK +p e a o o ee ´ e u

˝ o 4.2.10. K´ telemu jel¨ ltek sz´ m´ nak cs¨ kkent´ se : a DHP algoritmus e a a o e
Ha puszt´ n matematikai szemmel n´ zz¨ k a gyakori elemhalmazokat, akkor elmondhatjuk, hogy a e u azok sz´ ma exponenci´ lisan n˝ het (pontosabban a k- elem˝ ek sz´ ma m lehet, ahol m az elemek a a o u a k sz´ ma). Ak´ r a teljes elemhalmaz is lehet gyakori, ami azt jelenten´ , hogy az APRIORI algoritmus a a e ennek mind a 2m r´ szhalmaz´ t megtal´ ln´ , ami az elemek sz´ m´ val exponenci´ lisan n¨ vekv˝ fut´ si e a a a a a a o o a id˝ t es t´ rol´ si ig´ nyt jelentene. o ´ a a e Nem k´v´ nunk magunknak feldolgozhatatlan adatmennyis´ geket el˝ all´tani, ez´ rt a ı a e o´ ı e t´ mogatotts´ gi k¨ sz¨ b¨ t ugy szok´ s be´ ll´tani, hogy a maxim´ lis m´ ret˝ gyakori elemhalmaz a a u o o ´ a a ı a e u ne legyen 10-15-n´ l nagyobb. A gyakorlat azt mutatja, hogy az ertelmes be´ ll´t´ sok mellett a e ´ a ıa k´ telem˝ (ritk´ n a h´ rom-, n´ gyelem˝ ) jel¨ ltek sz´ ma lesz a legnagyobb, es ahogyan n˝ az e u a a e u o a ´ o elemhalmazok m´ rete, ugy cs¨ kken az ilyen m´ ret˝ gyakori elemhalmazok sz´ ma. e ´ o e u a A fenti abra j´ l mutatja, hogy mind az APRIORI, mind az APRIORI-TID algoritmusok a gya´ o kori elemp´ rok megtal´ l´ s´ val t¨ ltik a legt¨ bb id˝ t. T¨ bb k¨ l¨ nb¨ z˝ adatb´ zisra lefuttatott tesza aa a o o o o uo o o a tek is hasonl´ karakterisztik´ t mutattak. Ennek oka az, hogy altal´ ban a gyakori elemek sz´ ma o a ´ a a |Gy1 | nagy, es gyakori elemp´ rok sz´ ma az elm´ leti maximumn´ l ( 2 ) j´ val kevesebb. ´ a k´ telem˝ ´ a a e a o Igy e u jel¨ ltek rengetegen, a h´ rom elem˝ ek pedig kevesen vannak. A gyakori elemek nagy sz´ ma mio a u a att sok hamis k´ telem˝ jel¨ lt all el˝ . A DHP algoritmus c´ lja, hogy cs¨ kkentse a hamis jel¨ ltek e u o ´ o e o o sz´ m´ t. A technik´ j´ t b´ rmilyen nagys´ g´ hamis jel¨ ltek kiz´ r´ s´ ra alkalmazhatjuk, a legnagyobb a a aa a a u o aaa sebess´ gn¨ veked´ st v´ rhat´ an a k´ telem˝ ekn´ l hozza. S˝ t nagyobb elemsz´ m´ jel¨ ltekn´ l a hamis e o e a o e u e o a u o e jel¨ ltek kiz´ r´ s´ ra ford´tott er˝ forr´ sok egy´ ltal´ n nem biztos, hogy megt´ r¨ lnek. o aaa ı o a a a eu Mi t¨ rt´ nik az adatb´ zis els˝ v´ gigolvas´ sa sor´ n az APRIORI algoritmusn´ l ? Osszesz´ moljuk o e a o e a a a ¨ a az egyes elemek el˝ fordul´ sait (kezdetben minden elem jel¨ lt). P´ ld´ ul t´zezer jel¨ lt eset´ n 10000 · 4 o a o e a ı o e byte-t fogyasztunk el a mem´ ri´ b´ l (ha feltessz¨ k, hogy egy elem sem tal´ lhat´ meg t¨ bb mint 2 32 ≈ o a o u a o o ≈ 4.2 milli´ rd tranzakci´ ban). A mai mem´ ri´ k m´ rete mellett ez nem t´ l sok, ´gy felmer¨ l a k´ rd´ s, a o o a e u ı u e e hogy a szabad mem´ ri´ t fel tudn´ nk-e haszn´ lni ujabb hamis jel¨ ltek kiz´ r´ s´ ra. o a a a ´ o aaa

4. FEJEZET. GYAKORI ELEMHALMAZOK

66

¨ A DHP (Direct Hashing and Pruning) algoritmus [127] az APRIORI tov´ bbfejleszt´ se. Otlete a e az, hogy mik¨ zben az elemek el˝ fordul´ s´ t sz´ moljuk, gy˝ jts¨ nk inform´ ci´ t az elemp´ rokr´ l is. o o aa a u u a o a o El˝ fordulhat, hogy ezen inform´ ci´ hamis k´ telem˝ jel¨ lteket sz˝ rhet¨ nk ki, es nem vesz¨ nk fel a o a o e u o u u ´ u jel¨ ltek k¨ z´ , annak ellen´ re, hogy mindk´ t elem¨ k gyakori. K´ sz´ts¨ nk h´ t egy hash-t´ bl´ t, es hasho o e e e u e ı u a a a ´ elj¨ k bele az osszes elemp´ rt, ami el˝ fordul valamely tranzakci´ ban. Egy elemp´ r hash-el´ s´ n´ l u ¨ a o o a ee e n¨ velj¨ k annak a v¨ d¨ rnek a sz´ ml´ l´ j´ t, amibe hash-elt¨ k. Ugyanabba a v¨ d¨ rbe term´ szetesen o u o o a aoa u o o e t¨ bb k¨ l¨ nb¨ z˝ elemp´ rt is hash-elhet¨ nk. Magukat a v¨ dr¨ ket ne t´ roljuk a mem´ ri´ ban : el´ g a o uo o o a u o o a o a e sz´ ml´ l´ kat tartalmaz´ vektort felvenn¨ nk. A vektor i-edik eleme fogja megadni az i hash-´ rt´ kkel a ao o u e e rendelkez˝ v¨ d¨ r sz´ ml´ l´ j´ t. K¨ nnyen l´ that´ , hogy az i-edik sz´ ml´ l´ ert´ ke meg fog egyezni azon o o o a aoa o a o a ao´ e elemp´ rok t´ mogatotts´ g´ nak osszeg´ vel, amelyek hash-´ rt´ ke i. Azaz egy elemp´ r nem lehet gyaa a a a ¨ e e e a kori, ha azt olyan v¨ d¨ rbe hash-elt¨ k, amelynek sz´ ml´ l´ ja kisebb min supp-n´ l. o o u a ao a Ezek szerint egy elemp´ r az adatb´ zis els˝ v´ gigolvas´ sa ut´ n akkor lesz jel¨ lt, ha egyr´ szt a a o e a a o e mindk´ t eleme gyakori, m´ sr´ szt gyakori v¨ d¨ rbe hash-elt¨ k. Az adatb´ zis v´ gigolvas´ sa ut´ n nincs e a e o o u a e a a ´ sz¨ ks´ g¨ nk a v¨ dr¨ k sz´ ml´ l´ ira, csak arra az inform´ ci´ ra, hogy melyik v¨ d¨ r gyakori. Eppen ez´ rt u e u o o a ao a o o o e helyettes´ts¨ k a hash-t´ bl´ t egy bitt´ rk´ ppel, aminek i-edik poz´ci´ j´ ban 1-es all, ha az i-edik v¨ d¨ r ı u a a e e ı oa ´ o o gyakori, es 0, ha nem. Ebb˝ l a bitt´ rk´ pb˝ l, tov´ bb´ a gyakori -elem˝ elemhalmazokb´ l m´ r el˝ ´ o e e o a a u o a o tudjuk all´tani az ( + 1)-elem˝ jel¨ lteket. ´ ı u o Min´ l nagyobb a hash-t´ bla, ann´ l kevesebb az utk¨ z´ s, es ann´ l kevesebb az es´ lye, hogy egy e a a ¨ o e ´ a e ritka elemhalmaz azonos v¨ d¨ rbe ker¨ l egy gyakorival (vagy sok ritka egy v¨ d¨ rbe ker¨ l, aminek o o u o o u k¨ vetkezt´ ben a v¨ d¨ r gyakori lesz), teh´ t ann´ l kevesebb hamis jel¨ lt lesz. A hash-t´ bla azonban nem o e o o a a o a lehet t´ l nagy, hiszen a hash-t´ bl´ nak, a jel¨ ltek es azok sz´ ml´ l´ inak el kell f´ rni¨ k a mem´ ri´ ban. u a a o ´ a ao e u o a A 4.7 abra a DHP algoritmus m˝ k¨ d´ s´ nek els˝ f´ zis´ ra mutat p´ ld´ t (minim´ lis t´ mogatotts´ gi ´ u o ee o a a e a a a a ´ k¨ sz¨ bnek 0,5-¨ t adtunk meg). Erdemes osszehasonl´tanunk a DHP altal el˝ all´tott k´ telem˝ jel¨ lteu o o ¨ ı ´ o´ ı e u o ket az APRIORI algoritmus altal l´ trehozott jel¨ ltekkel. M´g a DHP csak 4 jel¨ ltet (amelyek k¨ z¨ tt ´ e o ı o o o egy hamis jel¨ lt sincs), addig az APRIORI algoritmus 6-ot all´t el˝ . o ´ ı o Abban az esetben is haszn´ lj´ k a DHP otlet´ t, amikor a gyakori elemek sz´ ma olyan nagy, hogy a a ¨ e a a k´ telem˝ jel¨ ltek nem f´ rnek el a mem´ ri´ ban. Ekkor az adatb´ zis els˝ v´ gigolvas´ sa ut´ n nem e u o e o a a o e a a all´tjuk el˝ a k´ telem˝ jel¨ lteket, hanem ink´ bb ujra v´ gigolvassuk az adatb´ zist es egy m´ sik hash ´ ı o e u o a ´ e a ´ a f¨ ggv´ nyt alkalmaz´ hash t´ bl´ t k´ sz´t¨ nk. Mivel a gyakori elemeket ismerj¨ k, ez´ rt el´ g a gyakou e o a a e ıu u e e ri elemekb˝ l all´ p´ rokat hash-elni. Az uj hash t´ bl´ val ujabb hamis jel¨ lteket sz˝ rhet¨ nk ki. Egy o ´ o a ´ a a ´ o u u elemp´ r abban az esetben lesz jel¨ lt, ha a m´ sodik hash-el´ sn´ l is gyakori v¨ d¨ rbe ker¨ lt. a o a e e o o u

4.3. Az ECLAT algoritmus
Az E CLAT az ures mint´ b´ l indulva egy rekurz´v, m´ lys´ gi jelleg˝ bej´ r´ st val´ s´t meg. A rekurzi´ ¨ a o ı e e u aa oı o m´ lys´ ge legfeljebb eggyel t¨ bb, mint a legnagyobb gyakori elemhalmaz m´ rete. Az A PRIORI-val e e o e szemben mindig egyetlen jel¨ ltet all´t el˝ , majd ennek azonnal meghat´ rozza a t´ mogatotts´ g´ t. Az o ´ ı o a a a a ( + 1)-elem˝ , P preﬁx˝ jel¨ lteket, ahol |P| = − 1 az -elem˝ , P preﬁx˝ gyakori elemhalmazokb´ l u u o u u o all´tja el˝ egyszer˝ p´ ronk´ nti uni´ k´ pz´ ssel. ´ ı o u a e o e e Az algoritmus k¨ zponti fogalma az un. TID-halmaz. Egy elemhalmaz TID-halmaz anak (Trano ´ ´ saction IDentiﬁer) elemei azon bemeneti sorozatok azonos´t´ i (sorsz´ mai), amelyek tartalmazz´ k ıo a a az adott elemhalmazt. M´ s sz´ val egy TID-halmaz a vertik´ lis adatb´ zis egy megfelel˝ sora. a o a a o P´ ld´ ul AD, AC, ABCD, B, AD, ABD, D bemenet eset´ n az {A, C} elemhalmaz TID-halmaza {1,2}, e a e amennyiben egy tranzakci´ azonos´t´ ja megegyezik a bemeneti sorozatban elfoglalt hely´ vel, es a o ıo e ´ helyek sz´ moz´ s´ t null´ t´ l kezdj¨ k. a aa ao u

4. FEJEZET. GYAKORI ELEMHALMAZOK Adatb´ zis a k id elemek 100 A C D 200 B C E 300 A B C E 400 B E Elemek sorsz´ mai a Elem sorsz´ m a A 1 B 2 C 3 D 4 E 5 GY1 elem halmaz t´ mogatotts´ g a a {A} 2 {B} 3 {C} 3 {E} 3

67

H1 hash-t´ bla h(i1 ,i2 )=(10 · sorsz´ m(i1 )+ sorsz´ m(i2)) mod 7 a a a elemp´ rok: a sz´ ml´ l´ : a ao hash-´ rt´ k: e e {C,E} {A,D} {A,E} {B,C} 3 1 2 0 0 1 2 3 J2 Jel¨ ltek o {A,C} {B,C} {B,E} {C,E} {B,E} {A,B} 3 1 4 5 {A,C} {C,D} 3 6

4.7. abra. P´ lda DHP algoritmusra ´ e

A TID-halmaz k´ t fontos tulajdons´ ggal b´r : e a ı I. Az I elemhalmaz TID-halmaz´ nak m´ rete megadja az I t´ mogatotts´ g´ t. a e a a a II. Egy jel¨ lt TID-halmaz´ t megkaphatjuk a gener´ torainak TID-halmazaib´ l egy egyszer˝ meto a a o u szetk´ pz´ ssel. e e Az E CLAT pszeudok´ dja az al´ bbi. o a El˝ sz¨ r meghat´ rozzuk a gyakori elemeket, majd fel´ p´tj¨ k a gyakori elemek TID-halmazait. A o o a e ı u k´ s˝ bbiekben nem haszn´ ljuk a bemenetet, csak a TID-halmazokat. Az algoritmus l´ nyege a E CLATeo a e ´ D rekurzi´ s elj´ r´ s. Jel¨ lj¨ k a P preﬁx˝ , P-n´ l eggyel nagyobb m´ ret˝ gyakori elemhalmazokb´ l SEG E o aa o u u e e u o / alkotott halmazcsal´ dot GY P -vel. Nyilv´ nval´ , hogy GY 0 = GY1 . a a o Az E CLAT jel¨ lt-el˝ all´t´ sa megegyezik az A PRIORI jel¨ lt-el˝ all´t´ s´ val, azzal a k¨ l¨ nbs´ ggel, o o´ ı a o o´ ı a a uo e hogy nem ellen˝ rizz¨ k az uni´ k´ pz´ ssel kapott halmaznak minden r´ szhalmaz´ ra, hogy gyakorio u o e e e a e (a m´ lys´ gi bej´ r´ s miatt ez az inform´ ci´ nem is all rendelkez´ s¨ nkre). L´ that´ , hogy az E C e e aa a o ´ eu a o

4. FEJEZET. GYAKORI ELEMHALMAZOK Algorithm 3 E CLAT Require: T : tranzakci´ k sorozata, o min supp : t´ mogatotts´ gi k¨ sz¨ b, a a u o for all t ∈ T do for all i ∈ t do J1 ← J1 ∪ {i} i.sz´ ml´ l´ ← i.sz´ ml´ l´ + 1 a ao a ao end for end for for all j ∈ J1 do if j.sz´ ml´ l´ ≥ min supp then a ao GY1 ← GY1 ∪ { j} end if end for for i ← 1 to |T | do for all j ∈ ti ∩ GY1 do j.T ID ← j.T ID ∪ {i} end for end for ´ / return GY1 ∪ E CLAT- SEG E D (GY1 , 0, min supp)

68

Algorithm 4 E CLAT Require: P : preﬁx elemhalmaz. GY P : P preﬁx˝ , P-n´ l eggyel nagyobb m´ ret˝ gyakori elemhalmazokb´ l alkotott halmazcsal´ dot u e e u o a P -vel, GY a a u o min supp : t´ mogatotts´ gi k¨ sz¨ b, for all gy ∈ GY P do for all gy ∈ GY P , gy gy do j ← gy ∪ gy j.T ID ← gy.T ID ∩ gy .T ID if | j.T ID| ≥ min supp then GY gy ← GY gy ∪ { j} end if end for if |GY gy | ≥ 2 then ´ GY ← GY ∪ GY gy ∪ E CLAT- SEG E D(GY gy , gy, min supp) else GY ← GY ∪ GY gy end if end for return GY abban is k¨ l¨ nb¨ zik az A PRIORI-t´ l, hogy egy jel¨ lt el˝ all´t´ sa ut´ n azonnal meghat´ rozza a uo o o o o´ ı a a a t´ mogatotts´ g´ t, miel˝ tt ujabb jel¨ ltet all´tana el˝ . N´ zz¨ nk egy p´ ld´ t a keres´ si t´ r bej´ r´ s´ ra. a a a o ´ o ´ ı o e u e a e e aaa
LAT

4. FEJEZET. GYAKORI ELEMHALMAZOK

69

4.14. p´ lda. Legyen T = ACDE, ACG, AFGM, DM es min supp = 2. Els˝ l´ p´ sben meghat´ rozzuk e o e e a ´ / 0 . Ezut´ n el˝ all´tjuk es azonnal meg is a gyakori elemeket : A, C, D, G, M, ami nem mas, mint GY a o´ ı ´ ´ hat´ rozzuk az (A, C), (A, D), (A, G), (A, M) p´ rok uni´ j´ t. Ezek k¨ z¨ l csak az AC, AG halmazok a a oa ou gyakoriak. A k¨ vetkez˝ rekurzi´ s l´ p´ sben ennek a k´ t halmaznak vessz¨ k az uni´ j´ t, all´tjuk el˝ a o o o e e e u oa ´ ı o TID-halmaz´ t, amely alapj´ n kider¨ l, hogy az ACG ritka, es a rekurzi´ ezen aga v´ get er. Ezut´ n a C a a u o e a ´ ´ ´ elemnek vessz¨ k az uni´ j´ t a sorban ut´ na k¨ vetkez˝ elemekkel egyes´ vel es ´gy tov´ bb. u oa a o o e ´ ı a L´ tnunk kell, hogy az E CLAT legal´ bb annyi jel¨ ltet all´t el˝ , mint az A PRIORI. A m´ lys´ gi a a o ´ ı o e e bej´ r´ s miatt ugyanis egy jel¨ lt el˝ all´t´ s´ n´ l nem all rendelkez´ s¨ nkre az osszes r´ szhalmaz. Az aa o o´ ı a a a ´ eu ¨ e el˝ z˝ p´ lda eset´ ben p´ ld´ ul az {A,C,G} t´ mogatotts´ g´ t hamarabb vizsg´ lja, mint a {C,G} halo o e e e a a a a a maz´ t, holott ez ut´ bbi ak´ r ritka is lehet. Ebben a tekintetben teh´ t az E CLAT rosszabb az A PRIORIe o a a n´ l, ugyanis t¨ bb lesz a ritka jel¨ lt. a o o Az E CLAT igazi ereje a jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ s´ ban van. A jel¨ ltek TIDo a a a a aa o halmazainak el˝ all´t´ sa egy rendk´v¨ l egyszer˝ es nagyon gyors m˝ velet lesz. Emellett ahogy hao´ ı a ı u u ´ u ladunk egyre m´ lyebbre a m´ lys´ gi bej´ r´ s sor´ n, ugy cs¨ kken a TID-halmazok m´ rete, es ezzel a e e e aa a ´ o e ´ t´ mogatotts´ g meghat´ roz´ s´ nak ideje is. Ezzel szemben az A PRIORI-n´ l ahogy haladunk az egyre a a a aa a nagyobb m´ ret˝ jel¨ ltek fel´ , ugy n˝ a sz´ fa m´ lys´ ge, es lesz egyre lassabb minden egyes jel¨ lt e u o e ´ o o e e ´ o t´ mogatotts´ g´ nak meghat´ roz´ sa. a a a a a A keres´ si t´ r bej´ r´ sa f¨ gg a preﬁx deﬁn´ci´ j´ t´ l, amit az elemeken deﬁni´ lt rendez´ s hat´ roz e e aa u ı oao a e a meg. Melyek lesznek azok a jel¨ ltek, amelyek az A PRIORI-ban nem lenn´ nek jel¨ ltek (teh´ t bizo e o a tosan ritk´ k), illetve v´ rhat´ an melyik az a rendez´ s, amely a legkevesebb ilyen tulajdons´ g´ hala a o e a u mazt adja ? Ha egy elemhalmaz jel¨ lt az E CLAT algoritmusban, de az A PRIORI-ban nem, akkor van o olyan r´ szhalmaza, amely ritka. Amennyiben felt´ telezz¨ k, hogy az elemek f¨ ggetlenek, akkor azon e e u u r´ szhalmaz el˝ fordul´ s´ nak lesz legkisebb a val´ sz´n˝ s´ ge (´ s ezzel egy¨ tt az es´ lye annak, hogy e o aa o ı ue e u e ritka), amely a leggyakoribb elemet nem tartalmazza. A jel¨ lt preﬁxe gener´ tor, teh´ t gyakori, ´gy o a a ı akkor lesz a legnagyobb es´ lye annak, hogy minden r´ szhalmaz gyakori, ha a preﬁx a leggyakoribb e e elemet nem tartalmazza. Az E CLAT algoritmusn´ l a legkevesebb ritka jel¨ ltet es ´gy a legjobb fut´ si a o ´ ı a id˝ t teh´ t a gyakoris´ g szerint cs¨ kken˝ rendez´ st˝ l v´ rhatjuk. o a a o o e o a 4.15. p´ lda. Ennek a gondolatmenetnek az illusztral´ s´ ra n´ zz¨ k a k¨ vetkez˝ p´ ld´ t. Legyenek gyae e u o o e a ´aa kori halmazok a k¨ vetkez˝ k : A, B, C, D, AB, AC, BC, AD, ABC, tov´ bb´ supp(A) supp(B) o o a a supp(C) supp(D). Amennyiben az E CLAT algoritmus a gyakoris ag szerint n¨ vekv˝ sorrendet o o ´ haszn´ lja, akkor az el˝ all´t´ s sorrendj´ ben a k¨ vetkez˝ halmazok lesznek jel¨ ltek : A, B, C, D, AB, a o´ ı a e o o o AC, AD, ABC, ABD, ACD, BC, BD, CD. Ugyanez gyakorisag szerint cs¨ kken˝ sorrendn´ l D, C, B, o o e ´ A, DC, DB, DA, CB, CA, CBA, BA. Az ut´ bbi esetben teh´ t n´ gy ritka jel¨ lt helyett (ABD, ACD, BD, o a e o CD) csak kett˝ lesz (CD, BD). Megjegyezz¨ k, hogy ez a k´ t elemhalmaz az A PRIORI eset´ ben is jel¨ lt o u e e o lesz. A gyakoris´ g szerint cs¨ kken˝ esetben egyszer all´tunk el˝ olyan h´ romelem˝ jel¨ ltet, amelynek a o o o a u o ´ ı van olyan k´ telem˝ r´ szhalmaza, amelyet nem vizsg´ ltunk. Ez a jel¨ lt a CBA es a nem megvizsg´ lt e u e a o a ´ r´ szhalmaz a BA. Mivel a r´ szhalmaz eppen a leggyakoribb elemeket t´ rolja, ez´ rt van nagy es´ lye e e a e e ´ annak, hogy gyakori (f˝ leg ha hozz´ vessz¨ k, hogy a jel¨ lt k´ t gener´ tora, CB es CA is gyakori). o a u o e a ´ Jav´thatunk az algoritmus hat´ konys´ g´ n, ha nem a jel¨ ltek TID-list´ it t´ roljuk, hanem a jel¨ lt ı e a a o a a o es preﬁxe TID-list´ j´ nak k¨ l¨ nbs´ g´ t. A preﬁx t´ mogatotts´ g´ b´ l es a TID list´ k k¨ l¨ nbs´ g´ b˝ l a ´ aa uo e e a a a o ´ a uo e e o t´ mogatotts´ g egy´ rtelm˝ en megadhat´ . A k¨ l¨ nbs´ gi list´ k ak´ r nagyobbak is lehetnek az eredeti a a e u o uo e a a TID-list´ kn´ l (p´ ld´ ul, ha a I t´ mogatotts´ ga kicsi, de a preﬁx´ nek t´ mogatotts´ ga nagy), ´gy a lega a e a a a e a a ı jobb megold´ st a k´ t technika otv¨ z´ se adhatja (p´ ld´ ul 4-n´ l kisebb elemsz´ mn´ l TID lista, ut´ na a e ¨ o e e a e a a a

4. FEJEZET. GYAKORI ELEMHALMAZOK

70

k¨ l¨ nbs´ gi list´ k) [187]. A k¨ l¨ nbs´ gi list´ t haszn´ l´ algoritmusok nagy f¨ l´ nnyel verik a t¨ bbi aluo e a uo e a ao oe o goritmust, amennyiben a bemenet s˝ r˝ , es nagy m´ ret˝ gyakori mint´ k is vannak. uu ´ e u a

4.4. Az FP- GROWTH algoritmus
Az FP- GROWTH algoritmus[75] 2 egy m´ lys´ gi jelleg˝ , rekurz´v algoritmus, a keres´ si t´ r e e u ı e e bej´ r´ sa tekintet´ ben megegyezik az E CLAT-tal. A t´ mogatotts´ gok meghat´ roz´ s´ t az egyelem˝ aa e a a a aa u gyakori halmazok meghat´ roz´ s´ val, majd a bemenet sz ur´ s´ vel es vet´t´ s´ vel val´ s´tja meg rea aa ´ ıe e oı ˝ ee kurz´v m´ don. A bemenet sz˝ r´ se azt jelenti, hogy az egyes tranzakci´ kb´ l t¨ r¨ lj¨ k a benn¨ k ı o ue o o oo u u el˝ fordul´ ritka elemeket. A T elemhalmaz P elemhalmazra vet´t´ s´ t (jel¨ l´ sben T |P) pedig o o ıe e oe ugy kapjuk, hogy vessz¨ k a P-t tartalmaz´ tranzakci´ kat, majd t¨ r¨ lj¨ k bel˝ l¨ k a P-t. P´ ld´ ul ´ u o o oo u ou e a ACD, BCE, ABCE, BE, ABCE |B = CE, ACE, E, ACE . Az algoritmus pszeudok´ dja a k¨ veto o kez˝ kben olvashat´ . o o Algorithm 5 FP- GROWTH Require: T : tranzakci´ k sorozata, o min supp : t´ mogatotts´ gi k¨ sz¨ b, a a u o ´ / FP- GROWTH - SEG E D ( T , min supp, 0) A seg´ delj´ r´ s harmadik param´ tere (P) egy preﬁx elemhalmaz, az els˝ param´ ter pedig az eredeti e aa e o e / bemenet P-re vet´t´ se. Az eredeti bemenet 0-ra vet´t´ se megegyezik onmag´ val. ıe ıe ¨ a Egy rekurzi´ s l´ p´ s h´ rom f˝ l´ p´ sb˝ l all. El˝ sz¨ r meghat´ rozzuk azon elemek t´ mogatotts´ g´ t, o e e a o e e o ´ o o a a a a amelyek el˝ fordulnak valamelyik tranzakci´ ban (1–4. sorok). Ezekb˝ l kiv´ lasztjuk a gyakoriakat (5– o o o a 7. sorok). Ezut´ n minden gy gyakori elemet egyes´ vel vesz¨ nk (9. sor). Meghat´ rozzuk a gy-hez a e u a tartoz´ vet´tett bemenetet, majd megh´vjuk az algoritmust rekurz´van a T |gy bemenetre. T¨ r¨ ln¨ nk o ı ı ı oo u ∗ -beli tranzakci´ k elemei k¨ z¨ l (13. sor) annak erdek´ ben, hogy egy jel¨ ltet csak kell a gy elemet a T o o u ´ e o egyszer all´tsunk el˝ . ´ ı o A jel¨ ltek el˝ all´t´ s´ nak tekintet´ ben az FP- GROWTH algoritmus a legegyszer˝ bb. Ha az I elemo o´ ı a a e u halmaz gyakori, akkor a k¨ vetkez˝ rekurzi´ s szinten azon I ∪ j halmazok lesznek a jel¨ ltek, ahol j o o o o az I-re vet´tett bemenetben el˝ fordul´ elem es I ∪ j nem volt jel¨ lt kor´ bban. Tulajdonk´ ppen az FPı o o ´ o a e GROWTH a nagy elemsz´ m´ jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ s´ t visszavezeti h´ rom egyszer˝ a u o a a a a aa a u m˝ veletre : egyelem˝ gyakori elemhalmazok kiv´ logat´ sa, sz˝ r´ s es vet´tett bemenet el˝ all´t´ sa. u u a a ue ´ ı o´ ı a A 9. sorban egyes´ vel vessz¨ k a gyakori elemeket. Ezt valamilyen rendez´ s szerint kell tenn¨ nk e u e u es ez a rendez´ s hat´ rozza meg, hogy milyen sorban j´ rjuk be a keres´ si teret, milyen vet´tett beme´ e a a e ı neteket all´tunk el˝ es mely elemhalmazok lesznek a hamis jel¨ ltek. Az E CLAT-n´ l elmondottak itt is ´ ı o´ o a elnek ; v´ rhat´ an abban az esetben lesz a hamis jel¨ ltek sz´ ma minim´ lis, amennyiben a preﬁxben a ´ a o o a a legritk´ bb elemek vannak, azaz a 9. sorban gyakoris´ g szerint n¨ vekv˝ sorban vessz¨ k az elemeket. a a o o u Az FP- GROWTH algoritmus szerves r´ sze az FP-fa, amelyben a sz˝ rt bemenetet t´ roljuk. Az FPe u a fa seg´ts´ g´ vel k¨ nnyen el˝ all´thatjuk a vet´tett bemeneteket, azokban k¨ nnyen meghat´ rozhatjuk az ı e e o o´ ı ı o a elemek t´ mogatotts´ g´ t, amib˝ l el˝ all´thatjuk a vet´tett, majd sz˝ rt bemenetet. Ezt a vet´tett es sz˝ rt a a a o o´ ı ı u ı ´ u bemenetet szint´ n egy FP-f´ ban t´ roljuk, amelyet vet´tett FP-f´ nak h´vunk. e a a ı a ı
FP a Frequent Pattern r¨ vid´t´ se, ami miatt az algoritmust mintanovel˝ algoritmusnak is h´vj´ k. Ez az elnevez´ s o ıe ı a e ¨ o azonban f´ lrevezet˝ , ugyanis szinte az osszes GYEK algoritmus mintan¨ vel˝ abban az ertelemben, hogy egy uj jel¨ lt a e o ¨ o o ´ ´ o gener´ torainak egyelem˝ b˝ v´t´ se, vagy m´ s sz´ val n¨ vel´ se. Az FP- GROWTH saj´ ts´ ga nem a jel¨ ltek el˝ all´t´ sa, hanem a u o ıe a o o e a a o o´ ı a a jel¨ ltek t´ mogatotts´ g-meghat´ roz´ s´ nak m´ dja. o a a a aa o
2 Az

4. FEJEZET. GYAKORI ELEMHALMAZOK Algorithm 6 FP- GROWTH-seg´ d e Require: T : vet´tett bemenet, ı min supp : t´ mogatotts´ gi k¨ sz¨ b, a a u o P : preﬁx elemhalmaz, for all t ∈ T do for all i ∈ t do J1 ← {i} i.sz´ ml´ l´ ← i.sz´ ml´ l´ + 1 a ao a ao end for end for for all j ∈ J1 do if j.sz´ ml´ l´ ≥ min supp then a ao GY1 ← GY1 ∪ { j} end if end for ˝ ´ T ∗ ← SZ UR E S (T, GY1 ) for all gy ∈ GY1 do T ∗ |gy ← VET´T E S (T ∗ , gy) I ´ end for GY ← GY ∪ {P ∪ {gy}} FP- GROWTH (T ∗ |gy,min supp, P ∪ {gy}) ¨ ´ T ∗ ← T ORL E S (T ∗ , gy) return GY

71

Az FP-fa egy kereszt´ lekkel es egy fejl´ c t´ bl´ val kib˝ v´tett sz´ fa. Az elek c´mk´ i gyakori elee ´ e a a o ı o ´ ı e mek. Az egyszer˝ bb le´r´ s kedv´ ert egy (nemgy¨ k´ r) cs´ cs c´mk´ j´ n a cs´ csba mutat´ el c´mk´ j´ t u ıa e´ o e u ı ee u o´ ı ee ertj¨ k. Minden cs´ cs egy elemhalmazt reprezent´ l, amelynek elemei a gy¨ k´ rb˝ l a cs´ csig vezet˝ ut ´ u u a o e o u o´ cs´ csainak c´mk´ ivel egyeznek meg. Minden cs´ cshoz egy sz´ ml´ l´ t rendel¨ nk. Ez a sz´ ml´ l´ adja u ı e u a ao u a ao meg, hogy a cs´ cs altal reprezent´ lt halmaz mennyi bemeneti (vagy vet´tett) elemhalmaznak a preﬁu ´ a ı xe. Az azonos c´mk´ j˝ cs´ csok l´ ncolt listaszer˝ en ossze vannak k¨ tve keresztir´ ny´ elekkel. A l´ nc ı eu u a u ¨ o a u´ a legels˝ elem´ re mutat a fejl´ ct´ bl´ nak az adott elem´ hez tartoz´ mutat´ ja. o e e a a e o o 4.16. p´ lda. Tegy¨ k fel, hogy bemenetk´ nt a ACDFMQ, ABCFMO, BFO, BCKSQ, ACFMQ, CS, e u e DFJ, FHI sorozat van adva, es min supp = 3. A gyakori elemek : A, B, C, F, M, Q, amelyek ´ t´ mogatotts´ ga rendre 3, 3, 5, 6, 3, 3. Ekkor a szurt bemenetet ( ACFMQ, ABCFM, BF, BCQ, a a ˝ ACFMQ, C, F, F ) reprezent´ l´ FP-fa, amely gyakoris´ g szerint cs¨ kken˝ sorrendet (Q M ao a o o B A C F) haszn´ l, a 4.8. abr´ n l´ that´ a o ´ a a Egy FP-f´ t hasonl´ m´ don ep´t¨ nk fel, mint egy sz´ f´ t. K¨ l¨ nbs´ g, hogy egy I elemhalmaz a o o ´ ıu oa uo e besz´ r´ s´ n´ l nem csak az I-t reprezent´ l´ lev´ lnek a sz´ ml´ l´ j´ t n¨ velj¨ k eggyel, hanem minden uaa a ao e a aoa o u olyan cs´ cs´ t, amelyet erint¨ nk a besz´ r´ s sor´ n (hiszen ezen cs´ csokat reprezent´ l´ halmazok az I u e ´ u ua a u ao preﬁxei). A keresztir´ ny´ eleket es a fejl´ ct´ bl´ t is egyszer˝ en megkaphatjuk. Legyen a fejl´ ct´ bla a u´ ´ e a a u e a mutat´ inak kezdeti ert´ ke NIL. Amikor besz´ runk egy uj, i c´mk´ j˝ cs´ csot, akkor k´ t dolgot kell o ´ e u ´ ı eu u e tenn¨ nk. Az uj cs´ cs kereszt´ l mutat´ ja felveszi a fejl´ ct´ bla i-hez tartoz´ bejegyz´ s´ t, majd ezt u ´ u e o e a o ee a bejegyz´ st az uj cs´ cs c´m´ re cser´ lj¨ k. Ezzel tulajdonk´ ppen olyan l´ ncot k´ sz´t¨ nk, amelyben a e ´ u ı e e u e a e ıu cs´ csok a besz´ r´ si idej¨ k szerint cs¨ kken˝ en vannak rendezve (az el˝ sz¨ r besz´ rt elem van legh´ tul) u ua u o o o o u a es a lista a fejl´ ct´ bl´ ban kezd˝ dik. ´ e a a o

4. FEJEZET. GYAKORI ELEMHALMAZOK
elem
F C A B M A Q 3 M 2 Q 2 M 1 B 1 Q 1 3 C 6 B 1

72
8 F C 2 B 1

mutató

4.8. abra. Az ACFMQ, ABCFM, BF, BCQ, ACFMQ, C, F, F sz˝ rt bemenetet t´ rol´ FP-fa. ´ u a o A fejl´ c mutat´ kb´ l kiindulva es a kereszt´ leket k¨ vetve megkaphatjuk a vet´tett bemenetet es e o o ´ e o ı ´ meghat´ rozhatjuk a vet´tett bemenetben gyakori elemeket. Az adott tranzakci´ k el˝ fordul´ sa mega ı o o a egyezik a kereszt´ lek altal mutatott pontok sz´ ml´ l´ j´ val. Ezek alapj´ n a vet´tett bemenetet sz˝ rhetj¨ k e ´ a aoa a ı u u es bel˝ le egy ujabb FP-f´ t ep´thet¨ nk fel. Ezt a f´ t vet´tett FP-f´ nak h´vunk. A k¨ vetkez˝ abr´ n az M ´ o ´ a ´ ı u a ı a ı o o´ a elemhez tartoz´ vet´tett es sz˝ rt bemenet FP-f´ j´ t l´ thatjuk. o ı ´ u aa a
elem F C A 3 A 3 C 3 mutató F 3

4.9. abra. p´ lda : vet´tett FP-fa ´ e ı Az FP-fa m´ rete – hasonl´ an a sz´ fa m´ ret´ hez – f¨ gg az elemeken deﬁni´ lt rendez´ st˝ l. Az e o o e e u a e o FP- GROWTH algoritmus akkor lesz hat´ kony, ha a fa elf´ r a mem´ ri´ ban, ez´ rt fontos lenne azt a rene e o a e dez´ st haszn´ lni, ami v´ rhat´ an a legkisebb f´ t eredm´ nyezi. Az A PRIORI eset´ ben m´ r elmondtuk, e a a o a e e a hogy az a heurisztika, amely az elemek gyakoris´ g szerint cs¨ kken˝ rendez´ s´ t haszn´ lja, altal´ ban a o o ee a ´ a kis m´ ret˝ f´ t eredm´ nyez. e u a e Egyszer˝ lesz a vet´tett bemenetet el˝ all´t´ sa es a sz˝ rt bemenetb˝ l egy elem t¨ rl´ se, amennyiben u ı o´ ı a ´ u o o e a legritk´ bb gyakori elemet (gyr ) vessz¨ k el˝ sz¨ r. Ez osszhangban all azzal, hogy a pszeudok´ d 9. a u o o ¨ ´ o sor´ ban az elemeket gyakoris´ g szerint n¨ vekv˝ sorrendben vessz¨ k. A gy r csak lev´ l c´mk´ je lehet. a a o o u e ı e Mivel a f´ b´ l t¨ r¨ lni fogjuk a gyr c´mk´ j˝ cs´ csokat a rekurzi´ s m˝ velet ut´ n (13. sor), a k¨ vetkez˝ a o oo ı eu u o u a o o elem is csak lev´ l c´mk´ je lesz. e ı e

4. FEJEZET. GYAKORI ELEMHALMAZOK

73

N´ zz¨ k most meg, hogy amennyiben a sz˝ rt bemenet egy FP-f´ ban van t´ rolva, akkor hogyan e u u a a kaphatjuk meg a gyr elemre vett vet´t´ sben az elemek t´ mogatotts´ g´ t. A fejl´ ct´ bla gy r elem´ hez ıe a a a e a e tartoz´ mutat´ b´ l kiindulva a kereszt´ lek alkotta l´ ncban pontosan azok a cs´ csok vannak, amelyek o o o e a u gyr -t tartalmaz´ bemeneti elemet reprezent´ lnak. Az egyes elemhalmazok el˝ fordul´ s´ t a gy r c´mk´ j˝ o a o aa ı eu cs´ csokhoz rendelt sz´ ml´ l´ adja meg, az elemeiket pedig a gy¨ k´ rig fels´ t´ lva kaphatjuk. A lista u a ao o e ea utols´ cs´ cs´ nak feldolgoz´ sa ut´ n rendelkez´ s¨ nkre allnak a gy r elemhez tartoz´ vet´tett bemeneto u a a a eu ´ o ı ben valahol el˝ fordul´ elemek t´ mogatotts´ gai, amely alapj´ n kiv´ logathatjuk a vet´tett bemenetben o o a a a a ı gyakori elemeket. Ugyanilyen bej´ r´ ssal kaphatjuk meg a vet´tett, majd sz˝ rt bemenetet tartalmaz´ FP-f´ t. A aa ı u o a fejl´ ct´ bl´ b´ l kiindulva v´ gigmegy¨ nk a l´ ncolt lista elemein. A cs´ cs altal reprezent´ lt eleme a a o e u a u ´ a halmazb´ l t¨ r¨ lj¨ k a ritka elemeket, majd a kapott elemhalmazt besz´ rjuk az uj FP-f´ ba. A kis o oo u u ´ a mem´ riaig´ ny erdek´ ben a gyakoris´ g szerint cs¨ kken˝ sorrendet haszn´ ljuk. Ezt a sorrendet a o e ´ e a o o a vet´tett bemenet alapj´ n all´tjuk fel (l´ v´ n az uj fa a vet´tett es sz˝ rt bemenetet fogja t´ rolni), ami ı a ´ ı e e ´ ı ´ u a k¨ l¨ nb¨ zhet az eredeti FP-f´ ban alkalmazott rendez´ st˝ l. uo o a e o 4.17. p´ lda. Folytassuk az el˝ z˝ p´ ld´ t es all´tsuk el˝ a legritk´ bb gyakori elemhez (Q) tartoz´ vet´tett e oo e a ´ ´ ı o a o ı es sz˝ rt bemenetet. A fejl´ ct´ bla Q elem´ hez tartoz´ mutat´ b´ l kiindulva mind¨ ssze k´ t cs´ csot u e a e o o o o e u ´ l´ togatunk meg, ami azt jelenti, hogy a vet´tett bemenet k´ t k¨ l¨ nb¨ z˝ elemhalmazt tartalmaz : az a ı e uo o o FCAM-et k´ tszer, a CB-t egyszer. Ez alapj´ n a vet´tett bemenetben egyetlen gyakori elem van, C. Ez a e a ı rekurzi´ s ag nem folytat´ dik, hanem visszat´ r a QC gyakori elemhalmazzal. Az FP-f´ b´ l t¨ r¨ lhetj¨ k o ´ o e a o oo u a fejl´ ct´ bla Q bejegyz´ s´ hez tartoz´ mutat´ b´ l, keresztir´ ny´ elek seg´ts´ g´ vel el´ rhet˝ cs´ csokat. e a ee o o o a u´ ı e e e o u A k¨ vetkez˝ vizsg´ lt elem az M. Az M vet´tett bemenet´ ben h´ rom gyakori elem van, es a vet´tett sz˝ rt o o a ı e a ı u ´ bemenet az FCA elemhalmazt tartalmazza h´ romszor. Ezt a vet´tett, sz˝ rt bemenetet egy egyetlen a ı u utb´ l all´ FP-fa fogja reprezent´ lni. A t¨ bbi FP-fa ugyanilyen egyszer˝ en megkaphat´ . a o u o ´ o ´ o Hat´ konys´ gi szempontb´ l rendk´v¨ l fontos, hogy a rekurzi´ t ne folytassuk, ha a vizsg´ lt FPe a o ı u o a fa egyetlen utb´ l all. A rekurzi´ helyett k´ pezz¨ k ink´ bb az ut altal reprezent´ lt elemhalmaz min´ o ´ o e u a ´ ´ a den r´ szhalmaz´ t. A r´ szhalmaz t´ mogatotts´ g´ t annak a cs´ csnak a sz´ ml´ l´ ja adja meg, amely a e a e a a a u a ao legm´ lyebben van a r´ szhalmazt meghat´ roz´ cs´ csok k¨ z¨ tt. e e a o u o o

4.4.1. Az FP-growth* algoritmus
2003 november´ ben megszervezt´ k az els˝ gyakori elemhalmaz-kinyer˝ algoritmusok verseny´ t e e o o e [68]. B´ rki benevezhetett egy altala k´ sz´tett programot. Ezeket k¨ zpontilag tesztelt´ k k¨ l¨ nb¨ z˝ a ´ e ı o e uo o o adatb´ zisokon, k¨ l¨ nb¨ z˝ t´ mogatotts´ gi k¨ sz¨ b¨ kkel. Nem volt olyan implement´ ci´ , amely mina uo o o a a u o o a o den esetben a legjobban szerepelt, de ki lehet emelni n´ h´ ny olyat, amelyek szinte mindig az els˝ k e a o k¨ z¨ tt v´ geztek. A szervez˝ k v´ g¨ l annak adt´ k a f˝ d´jat (egy s¨ rt es egy pelenk´ t !), aki az FPo o e o e u a o ı o ´ a growth* algoritmust [70] k¨ ldte be. u Az FP-growth* algoritmus az FP-growth m´ dos´t´ sa. El˝ nye, hogy gyorsabban all´tja el˝ a vet´tett o ıa o ´ ı o ı f´ t, ami´ rt viszont mem´ ri´ val ﬁzet. N´ zz¨ k meg, hogy pontosan mi t¨ rt´ nik egy rekurzi´ s l´ p´ sben. a e o a e u o e o e e El˝ sz¨ r ellen˝ rizz¨ k, hogy a fa egyetlen utb´ l all-e. Ha nem, akkor a legritk´ bb elemb˝ l kiindulva o o o u ´ o ´ a o el˝ all´tjuk a vet´tett f´ kat, es rekurz´van megh´vjuk az algoritmust. A vet´tett f´ ban els˝ l´ p´ sk´ nt o´ ı ı a ´ ı ı ı a o e e e meg kell hat´ rozni a vet´tett bemenetben szerepl˝ elemek t´ mogatotts´ g´ t, m´ sodik l´ p´ sk´ nt pedig a ı o a a a a e e e el˝ all´tjuk a vet´tett FP-f´ t. Ez tulajdonk´ ppen az aktu´ lis fa adott elemhez tartoz´ againak k´ tszeri o´ ı ı a e a o´ e bej´ r´ s´ t jelenti. Az els˝ bej´ r´ st lehet meggyors´tani egy seg´ dt¨ mb haszn´ lat´ val. aaa o aa ı e o a a

4. FEJEZET. GYAKORI ELEMHALMAZOK

74

Az FP-fa ep´t´ s´ n´ l t¨ lts¨ nk fel egy, kezdetben 0 ert´ keket tartalmaz´ t¨ mb¨ t is. Amikor ´ ıe e e o u ´ e o o o besz´ runk egy t (ak´ r vet´tett) tranzakci´ t az (ak´ r vet´tett) FP-f´ ba, n¨ velj¨ k eggyel a t¨ mb (i, j)u a ı o a ı a o u o edik cell´ j´ t, amennyiben az i es j elemei t-nek. A fa fel´ p´t´ se ut´ n rendelkez´ s¨ nkre all egy t¨ mb, aa ´ e ıe a eu ´ o ami tartalmazza az elemp´ rok el˝ fordul´ s´ t. Ha ezek ut´ n egy vet´tett f´ t akarunk k´ sz´teni, akkor a o aa a ı a e ı sz¨ ks´ gtelen id˝ t t¨ lten¨ nk az els˝ l´ p´ ssel, hiszen a t¨ mb megfelel˝ sor´ b´ l k¨ zvetlen megkaphatu e o o u o e e o o a o o ¨ juk a t´ mogatotts´ gokat. Osszess´ g´ ben az els˝ l´ p´ s gyorsabb (nem kell a f´ ban bolyonganunk, csak a a e e o e e a a t¨ mb elemeit kiolvasni), a m´ sodik lassabb (a t¨ mb¨ t is fel kell t¨ lteni), a mem´ riafogyaszt´ s pedig o a o o o o a nagyobb (a t¨ mb m´ ret´ vel). o e e

4.5. Tov´ bbi h´res algoritmusok a ı
A h´ rom ori´ s (APRIORI, eclat, FP-growth) mellett l´ teznek olyan kev´ sb´ ismert algoritmua ´ a e e e sok is, amelyek nagyon hat´ konyan tudj´ k megtal´ lni a gyakori elemhalmazokat. Ezeket ismertetj¨ k e a a u ebben a r´ szben. e

4.5.1. A DF -APRIORI algoritmus
A DF -APRIORI [134] m´ lys´ gi bej´ r´ st (Depth-First search) val´ s´t meg. Helytelen¨ l illett´ k a e e aa oı u e szerz˝ k az APRIORI jelz˝ vel, hiszen az APRIORI m´ dszer l´ nyeg´ t a jel¨ ltek el˝ all´t´ s´ nak m´ dja o o o e e o o´ ı a a o adja : csak az legyen jel¨ lt, amir˝ l tudjuk, hogy minden r´ szmint´ ja gyakori. Ez nem all fenn enn´ l az o o e a ´ e algoritmusn´ l ! a Pszeudok´ dja azonban teljesen megegyezik az APRIORI m´ dszer´ vel, egyed¨ l a jel¨ lt-el˝ all´t´ s o o e u o o´ ı a m´ dja m´ s. Els˝ l´ p´ sben meghat´ rozza a gyakori elemeket. Rendezz¨ k ezeket t´ mogatotts´ gaik o a o e e a u a a alapj´ n cs¨ kken˝ sorba es jel¨ lj¨ k ezeket i1 , i2 , . . . , im -el. Az algoritmus ezut´ n pontosan m−1 l´ p´ st a o o ´ o u a e e hajt v´ gre, ahol minden l´ p´ s jel¨ lt-el˝ all´t´ s, t´ mogatotts´ g meghat´ roz es a ritka elemek t¨ rl´ s´ b˝ l e e e o o´ ı a a a a ´ o ee o all. Ha az l-edik l´ p´ sig bez´ r´ an (1≤l<m) a megtal´ lt gyakori elemhalmazokat gy 1 , gy2 , . . . bet¨ kkel ´ e e ao a u jel¨ lj¨ k, akkor az l + 1-edik szint jel¨ ltjei az im−l ∪ gy1 , im−l ∪ gy2 , . . . elemhalmazok lesznek. Kiino u o dul´ st az im elem adja. a Amennyiben a gyakori elemhalmazokat sz´ f´ ban t´ roljuk, akkor a jel¨ lt-el˝ all´t´ s pofonegyszer˝ oa a o o´ ı a u es vill´ mgyors. Nem kell m´ st tenn¨ nk csak felvenn¨ nk egy uj gy¨ keret, amib˝ l egy i m−l c´mk´ j˝ elen ´ a a u u ´ o o ı eu´ kereszt¨ l lehet eljutni a r´ gi gy¨ k´ rhez. L´ tnunk kell, hogy ez az algoritmus j´ val t¨ bb hamis jel¨ ltet u e o e a o o o fog l´ trehozni, mint az APRIORI. Nem ellen˝ rizz¨ k, hogy gyakori-e a jel¨ ltek osszes r´ szhalmaza, e o u o ¨ e hiszen ez az inform´ ci´ nem all rendelkez´ s¨ nkre. a o ´ eu

4.5.2. patricia 4.5.3. kdci 4.5.4. lcm 4.5.5. Mintav´ telez˝ algoritmus elemz´ se e o e
Az egyszer˝ mintav´ telez˝ algoritmust bemutattuk az 5.5.4 r´ szben. Itt azt vizsg´ ljuk, hogy meku e o e a kora mint´ t c´ lszer˝ venni annak erdek´ ben, hogy az algoritmus minden gyakori elemhalmazt mega e u ´ e tal´ ljon. a

4. FEJEZET. GYAKORI ELEMHALMAZOK Mintav´ tel nagys´ ga e a

75

Mintav´ telez´ sen alapul´ elj´ r´ sokn´ l a minta m´ rete k¨ zponti k´ rd´ s. Ha a minta t´ l kicsi, ake e o aa a e o e e u kor a mint´ b´ l nyert inform´ ci´ t´ vol allhat a teljes adatb´ zisban tal´ lhat´ glob´ lis helyzett˝ l”. Mivel a o a o a ´ a a o a o ” f¨ l¨ slegesen nagy minta lass´ algoritmusokat eredm´ nyez, ez´ rt fontos egy kicsi, de m´ r pontos k´ pet oo u e e a e ad´ mintam´ ret meghat´ roz´ sa. A 3.1.3 r´ szben megadtuk, hogy mekkora mint´ t kell v´ lasztani, o e a a e a a ha azt akarjuk, hogy a relat´v gyakoris´ gok megegyezzenek az el˝ fordul´ sok val´ sz´n˝ s´ g´ vel. ı a o a o ı ue e Haszn´ ljuk most is a A 3.1.3 r´ szben bevezetett elnevez´ seket es jel¨ l´ seket. a e e ´ oe N´ zz¨ k, hogy mennyivel kell cs¨ kkenteni a gyakoris´ gi k¨ sz¨ b¨ t (min f req ) ahhoz, hogy kicsi e u o a u o o legyen annak val´ sz´n˝ s´ ge, hogy tetsz˝ leges gyakori elem mint´ hoz tartoz´ gyakoris´ ga kisebb a o ı ue o a o a cs¨ kkentett k¨ sz¨ bn´ l, teh´ t : o u o e a p(gyakoris´ g(x, m) < min f req ) = p a egy adott k¨ sz¨ bn´ l (δ ) kisebb kell legyen es tudjuk, hogy u o e ´ p > min f req A fenti egyenletre alkalmazva a Hoeffding-korl´ tot azt kapjuk, hogy a p p p Y < min f req = m Y < min f req m

Y − p < min f req − p < m

Y − p < min f req − min f req m ≤ e−2(min freq’-min freq)
2m

teh´ t ahhoz, hogy a hib´ z´ s val´ sz´n˝ s´ ge kisebb legyen δ -n´ l teljes¨ lnie kell, hogy a a a o ı ue e u min f req < min f req − 1 1 ln 2m δ

A 4.2 t´ bl´ zat azt mutatja, hogy r¨ gz´tett hibakorl´ t mellett (δ = 0.001) adott mintam´ rethez mennyi a a o ı a e legyen a cs¨ kkentett k¨ sz¨ b. o u o

4.6. Elemhalmazok Galois lez´ rja a
Egy minta z´ rt, ha nincs vele egyez˝ t´ mogatotts´ g´ b˝ vebb minta. Eset¨ nkben ez azt jelenti, a o a a u o u hogy ha egy elemhalmaz nem z´ rt, akkor pontosan azokban a bemeneti elemekben fordul el˝ , amea o lyekben a lez´ rtja. Ha p´ ld´ ul az A elem lez´ rtja az AB halmaz, akkor tudjuk, hogy az A halmaz soha a e a a nem fordul el˝ a bemeneti elemekben a B elem n´ lk¨ l. o e u Ebben a r´ szben a lez´ rt tov´ bbi tulajdons´ gait fogjuk megismerni. Az´ rt illetj¨ k a lez´ rtat a e a a a e u a Galois jelz˝ vel, mert teljes¨ lni fog a lez´ r´ s oper´ torra a galois elm´ letb˝ l j´ l ismert 3 tulajdons´ g. o u aa a e o o a Miel˝ tt erre r´ t´ r¨ nk n´ zz¨ k meg, hogy az elemhalmazokat tartalmaz´ mintak¨ rnyezet egy´ rtelm˝ -e o aeu e u o o e u a z´ rts´ gra n´ zve. a a e

4. FEJEZET. GYAKORI ELEMHALMAZOK Minta m´ rete e 40000 60000 0.17 0.18 0.38 0.40 0.61 0.63 0.83 0.86 1.30 1.33 1.77 1.81

76

min freq (%) 0.25 0.50 0.75 1.00 1.50 2.00

20000 0.13 0.34 0.55 0.77 1.22 1.67

80000 0.19 0.41 0.65 0.88 1.35 1.84

4.2. t´ bl´ zat. A k¨ sz¨ b cs¨ kkent´ se adott mintam´ retekre r¨ gz´tett δ = 0.001 mellett a a u o o e e o ı

4.18. lemma. Az elemhalmazokat tartalmazo mintak¨ rnyezet a z´ rts´ gra n´ zve egy´ rtelm˝ . o a a e e u ´ Bizony´t´ s: Indirekt tegy¨ k fel, hogy az I elemhalmaznak l´ tezik k´ t lez´ rtja, azaz l´ tezik I , I ıa u e e a e k¨ l¨ nb¨ z˝ elemhalmazok, amelyekre a minimalit´ s mellett teljes¨ lnek a I ⊂ I , I ⊂ I , |I | = uo o o a u = |I |, supp(I ) = supp(I ) felt´ telek. Ez azt jelenti, ahogy azon tranzakci´ k, amelyek I-t tartale o mazz´ k, tartalmazz´ k az I \I es az I \I halmazokat is. De ebb˝ l k¨ vetkezik, hogy ezek a tranzakci´ k a a ´ o o o I ∪ I is tartalmazz´ k, azaz I ∪ I is lez´ rtja I-nek, ´gy sem I sem I nem lehet minim´ lis. a a ı a A fentiek miatt a gyakori z´ rt elemhalmazokb´ l es azok t´ mogatotts´ gaib´ l egy´ rtelm˝ en meg a o ´ a a o e u tudjuk hat´ rozni a gyakori elemhalmazokat es azok t´ mogatotts´ g´ t. A gyakori z´ rt mint´ k teh´ t a a ´ a a a a a a z´ rt mint´ k egy vesztes´ gmentes t¨ m¨ r´t´ se, erdemes csak ezeket meghat´ rozni es elt´ rolni [128– a a e o oıe ´ a ´ a 130, 190].

4.6.1. A z´ rt elemhalmazok fogalma a
A z´ rt minta fogalm´ t m´ r bevezett¨ k az 5.2.1 r´ szben. Ism´ telj¨ k meg ugy, hogy a deﬁn´ci´ a a a u e e u ´ ı o elemhalmazokra vonatkozzon : Az I elemhalmaz zart, amennyiben nincs n´ la b˝ vebb halmaz, amelya o ´ nek t´ mogatotts´ ga megegyezik I t´ mogatotts´ g´ val. Jel¨ lj¨ k cover-rel azt a f¨ ggv´ nyt, amely egy a a a a a o u u e elemhalmazhoz az azt tartalmaz´ tranzakci´ k halmaz´ t adja meg. o o a A z´ rt elemhalmazokra adhatunk egy m´ sik deﬁn´ci´ t is. Vezess¨ k, be a cover f¨ ggv´ nyt : a a ı o u u e 4.19. deﬁn´ci´ . Legyen T = t1 , . . . , tn tranzakci´ k sorozata, amelynek minden eleme az I-nek egy ı o o r´ szhalmaza. Deﬁni´ ljuk a cover : 2N → 2I f¨ ggv´ nyt a k¨ vetkez˝ k´ ppen e a u e o o e cover (T ) = {i ∈ I|∀ j ∈ T, i ∈ cover(t j )} =
t∈T

\

cover(t)

Teh´ t cover (T ) megadja azon k¨ z¨ s elemeket, amelyeket minden olyan tranzakcio tartalmaz, amelya oo ´ nek sorsz´ ma T -beli. a A (cover, cover ) f¨ ggv´ nyp´ rt az T es I hatv´ nyhalmazai k¨ z¨ tti Galois-kapcsolatnak h´vjuk. Leu e a ´ a o o ı gyen a p´ ldaadatb´ zisunk a k¨ vetkez˝ : ACD, BCE, ABCE, BE, ABCE . Ekkor : cover({A, C}) = e a o o / / = {1,3,5}, cover(0) = {1,2,3,4,5}), cover ({1,2,3}) = {C}, cover ({1,4}) = 0).

4. FEJEZET. GYAKORI ELEMHALMAZOK Az al´ bbi tulajdons´ gok igazak tetsz˝ leges t, t1, t2 ⊆ T es I, I1 , I2 ⊆ I halmazokra : a a o ´ (1) I1 ⊆ I2 ⇒ cover(I1 ) ⊇ cover(I2 ) (1 ) T1 ⊆ T2 ⇒ cover (T1 ) ⊇ cover (T2 ) (2) T ⊆ cover(I) ⇐⇒ I ⊆ cover (T )

77

4.20. deﬁn´ci´ . A h = cover ◦ cover (vagy h = cover ◦ cover ) oper´ tort Galois-lez´ r´ s oper´ tornak ı o a aa a h´vjuk. ı Bel´ that´ , hogy tetsz˝ leges halmaznak a lez´ rtja tartalmazza mag´ t a halmazt, tov´ bb´ a Galoisa o o a a a a lez´ r´ s oper´ tora idempotens es monoton, teh´ t aa a ´ a (I) I ⊆ h(I) (I ) T ⊆ h (T ) (II) h(h(I)) = h(I) (II ) h (h (T )) = h (T ) (II) I1 ⊆ I2 ⇒ h(I1 ) ⊆ h(I2 ) (III ) T1 ⊆ T2 ⇒ h (T1 ) ⊆ h (T2 ) 4.21. deﬁn´ci´ (z´ rt elemhalmaz). I elemhalmaz z´ rt, amennyiben I = h(I). ı o a a Tetsz˝ leges elemhalmazt (I) tartalmaz´ minim´ lis elemsz´ m´ z´ rt elemhalmazt a lez´ r´ s oper´ tor o o a a u a aa a alkalmaz´ s´ val kaphatunk meg ; ez eppen h(I) lesz. A p´ ldaadatb´ zisban tal´ lhat´ z´ rt elemhalmazok aa ´ e a a o a al´ bbiak : a z´ rt elemhalmazok a / {0}, {C}, {B,E}, {B,C,E}, {A,C}, {A,B,C,E}, {A,C,D}, {A,B,C,D,E} Ad´ sok vagyunk m´ g annak bizony´t´ s´ val, hogy a k´ t deﬁn´ci´ ekvivalens, azaz, ha h(C) = C, o e ıa a e ı o akkor C-n´ l nincs b˝ vebb halmaz, amely t´ mogatotts´ ga megegyezne C t´ mogatotts´ g´ val, illetve e o a a a a a ford´tva. A k´ t all´t´ s k¨ zvetlen ad´ dik a k¨ vetkez˝ t´ telb˝ l. ı e ´ ıa o o o o e o 4.22. t´ tel. Minden elem t´ mogatotts´ ga megegyezik lez´ rtj´ nak t´ mogatotts´ g´ val, teh´ t e a a a a a a a a supp(I) = supp(h(I)) Bizony´t´ s: A lez´ r´ s (1) tulajdons´ ga miatt supp(I) ≥ supp(h(I)). Ugyanakkor ıa aa a supp(h(I)) = |cover(h(I))| = |cover(cover (cover(I)))| = |h (cover(I))| ≤ supp(I) a (III’) miatt, amib˝ l k¨ vetkezik az egyenl˝ s´ g. o o oe

Az 5.4.2 r´ szben bemutattuk, hogy a gyakori mint´ kb´ l hogyan v´ laszthatjuk ki a z´ rtakat, illetve e a o a a az APRIOR-CLOSE algoritmust, ami m´ r eleve csak a gyakori z´ rt mint´ kat all´tja el˝ . Az APRIORa a a ´ ı o CLOSE algoritmusn´ l l´ teznek gyorsabb algoritmusok (CHARM [189], CLOSET [132], CLOSET+ a e [176], MAFIA [29]), ezek ismertet´ s´ t˝ l eltekint¨ nk. e eo u

4. FEJEZET. GYAKORI ELEMHALMAZOK

78

4.7. K´ nyszerek kezel´ se e e
Ebben a r´ szben azt a speci´ lis feladatot n´ zz¨ k meg, hogy mik´ nt lehet cs¨ kkenteni a bemee a e u e o netet, ha az anti-monoton k´ nyszerek mellett monoton k´ nyszereket is megadunk. M´ r az altal´ nos e e a ´ a mintakeres´ sn´ l megt´ rgyaltuk, hogy tetsz˝ leges anti-monoton k´ nyszer k¨ nny˝ szerrel be´ p´thet˝ az e e a o e o u e ı o APRIORI algoritmusba. Most azt n´ zz¨ k meg, hogy a monoton k´ nyszerek hogyan alkalmazhat´ k a e u e o bemeneti t´ r cs¨ kkent´ s´ re. e o ee Adott egy bemeneti sorozat, minim´ lis t´ mogatotts´ gi k¨ sz¨ b es monoton k´ nyszerek C halmaza. a a a u o ´ e Feladat a bemenet cs¨ kkent´ se oly m´ don, hogy b´ rmely teljes algoritmus a cs¨ kkentett bemeneten o e o a o is teljes legyen.

4.7.1. ExAnte
Az ExAnte [102] algoritmus k´ tf´ le l´ p´ st ism´ tel eg´ szen addig, am´g ez valamilyen v´ ltoz´ st e e e e e e ı a a jelent. Az els˝ l´ p´ s azon tranzakci´ k t¨ rl´ se, amelyek nem adnak igaz ert´ ket minden C -beli o e e o o e ´ e k´ nyszeren. Az ilyen tranzakci´ k csak olyan mint´ k t´ mogatotts´ g´ t n¨ velik, amelyek ugysem e o a a a a o ´ el´ g´tik ki a k´ nyszereket (ez k¨ vetkezik a k´ nyszerek monoton tulajdons´ g´ b´ l). A m´ sodik l´ p´ sben e ı e o e a a o a e e a bemenet elemei k¨ z¨ l t¨ r¨ lj¨ k a ritk´ kat, hiszen azok ugysem j´ tszanak szerepet a t´ mogatotts´ g o u oo u a ´ a a a meghat´ roz´ s´ n´ l. a aa a L´ tnunk kell, hogy az els˝ l´ p´ sbeli t¨ rl´ s uj ritka elemekhez vezethet, ami cs¨ kkenti bizonyos a o e e o e ´ o tranzakci´ k m´ ret´ t, ami viszont ahhoz vezethet, hogy ezek ujabb k´ nyszereket fognak s´ rteni. Joo e e ´ e e gos teh´ t, hogy a k´ t m´ dszert felv´ ltva futtassuk addig, am´g van valami v´ ltoz´ s. Az algoritmus a a e o a ı a a bemenet cs¨ kkent´ se mellett el˝ all´tja azon gyakori elemeket, amelyekre minden k´ nyszer teljes¨ l. o e o´ ı e u Gyakori elemhalmaz csak ezekb˝ l az elemekb˝ l ep¨ lhetnek fel. o o ´ u N´ zz¨ nk egy p´ ld´ t. Az adatb´ zisban 8 elem es 9 tranzakci´ van. Legyen min supp = 4. Mine u e a a ´ o den elemnek van egy ara. Az egyetlen k´ nyszer (sum(i.´r) > 44) szerint a halmazban tal´ lhat´ ´ e a a o term´ kek ar´ nak osszege 44-n´ l nagyobb legyen. A k¨ vetkez˝ k´ t t´ bl´ zat adja meg az adatokat. e ´a ¨ e o o e a a term´ k e A B C D E F G H ar ´ 5 8 14 30 20 15 6 12 TID 1 2 3 4 5 6 7 8 9 tranzakci´ o B, C, D, G A, B, D, E B, C, D, G, H A, E, G C, D, F, G A, B, C, D, E A, B, D, F, G, H B, C, D B, E, F, G ar osszeg ´ ¨ 58 63 70 31 65 77 76 52 49

Az els˝ v´ gigolvas´ s sor´ n meghat´ rozzuk az elemek t´ mogatotts´ g´ t azon tranzakci´ kban, o e a a a a a a o amelyek kiel´ g´tik a k´ nyszert (a 4-es kiv´ tel´ vel mindegyik). Ezut´ n t¨ r¨ lj¨ k a ritka elemeket e ı e e e a oo u (A, E, F, H). Ism´ t v´ gigmegy¨ nk az adatb´ zison, de most m´ r ezeket az elemeket nem n´ zz¨ k, e e u a a e u aminek k¨ vetkezt´ ben ujabb tranzakci´ k esnek ki (2,7,9). A kiesett tranzakci´ k miatt cs¨ kkeno e ´ o o o nek a t´ mogatotts´ gok, ´gy ujabb elem lesz ritka (G). Ezt ´gy folytatjuk, am´g van v´ ltoz´ s. A 4. a a ı ´ ı ı a a v´ gigolvas´ s ut´ n azt kapjuk, hogy csak az 1,3,6,8 tranzakci´ kat es a B, C, D elemeket kell ﬁgyeleme a a o ´ be venni.

4. FEJEZET. GYAKORI ELEMHALMAZOK

79

¨ o 4.8. T¨ bbsz¨ r¨ s t´ mogatotts´ gi kusz¨ b o o o a a
Az univerz´ lis t´ mogatotts´ gi k¨ sz¨ bnek vannak el˝ nyei es h´ tr´ nyai. El˝ nye, hogy fela a a u o o ´ a a o haszn´ lhatjuk azt a t´ nyt, hogy gyakori minta minden r´ szmint´ ja gyakori, ami alapj´ n hat´ kony algoa e e a a e ritmusokat adhatunk. H´ tr´ nya, hogy a ritk´ n el˝ fordul´ , de m´ gis fontos mint´ kat csak akkor tudjuk a a a o o e a kinyerni, ha a t´ mogatotts´ gi k¨ sz¨ b¨ t alacsonyra all´tjuk. Ez viszont rengeteg gyakori mint´ hoz fog a a u o o ´ ı a vezetni, ha egy´ ltal´ n le tud futni az algoritmus. a a K¨ l¨ nb¨ z˝ t´ mogatotts´ gi k¨ sz¨ b¨ k (vagy m´ sk´ nt t´ mogatotts´ gi k¨ sz¨ b f¨ ggv´ ny´ nek) meguo o o a a u o o a e a a u o u e e ad´ s´ val ez a probl´ ma elker¨ lhet˝ : a nem l´ nyeges mint´ knak legyen nagy a k¨ sz¨ b¨ k, a aa e u o e a u o u l´ nyegesebbeknek legyen alacsony. e Egyedi t´ mogatotts´ gi k¨ sz¨ b¨ k bevezet´ s´ vel azonban felborul eddigi k´ nyelmes vil´ gunk, a a u o o ee e a amit az biztos´tott, hogy nem lehet egy minta gyakori, ha van ritka r´ szmint´ ja. A r´ szmint´ k ı e a e a t´ mogatotts´ gi k¨ sz¨ be ugyanis nagyobb lehet, ´gy hi´ ba nagyobb a t´ mogatotts´ ga, ett˝ l m´ g lea a u o ı a a a o e het ritka. A k¨ vetkez˝ kben bemutatjuk a legels˝ es legegyszer˝ bb t´ mogatotts´ gi k¨ sz¨ b f¨ ggv´ nyt, o o o´ u a a u o u e majd bemutatjuk az MSApriori algoritmust, amely ezt hat´ konyan kezeli. e

4.8.1. MSApriori algoritmus
K´ zzel megadni a 2I minden elem´ nek t´ mogatotts´ gi k¨ sz¨ b´ t f´ rads´ gos, s˝ t nagy |I| eset´ n kie e a a u o e a a o e vitelezhetetlen feladat. Az MSApriori algoritmusn´ l csak az egyelem˝ elemhalmazok t´ mogatotts´ gi a u a a k¨ sz¨ b´ t lehet megadni. Jel¨ lj¨ k az i elem k¨ sz¨ b´ t MIS(i)-vel. Az I elemhalmaz t´ mogatotts´ gi u o e o u u o e a a k¨ sz¨ be legyen a legkisebb t´ mogatotts´ gi k¨ sz¨ bbel rendelkez˝ elem´ nek t´ mogatotts´ gi k¨ sz¨ be u o a a u o o e a a u o (MIS(I) = mini∈I {MIS(i)}). Akkor gyakori az I halmaz, ha t´ mogatotts´ ga nagyobb vagy egyenl˝ a a o MIS(I)-n´ l. e A deﬁn´ci´ b´ l k¨ vetkezik, hogy t´ nyleg nem mondhatjuk, hogy gyakori minta minden r´ szmint´ ja ı o o o e e a gyakori. P´ ld´ ul az ABC elemhalmaz BC r´ szhalmaz´ nak nagyobb lehet MIS ert´ ke. Ha a fele a e a ´ e adat megold´ s´ ra az APRIORI algoritmust haszn´ ljuk ugy, hogy csak a gyakori elemhalmazok aa a ´ kiv´ laszt´ s´ nak m´ dj´ t m´ dos´tjuk (min supp cser´ je MIS(I)-re), akkor nem garant´ lt, hogy j´ mega aa o a o ı e a o old´ st kapunk. Ha p´ ld´ ul a BC ritka, akkor az ABC halmaz nem lenne a jel¨ ltek k¨ z¨ tt annak ellen´ re, a e a o o o e hogy ak´ r gyakori is lehet. a Szerencs´ re a probl´ ma k¨ nnyen orvosolhat´ . Csak azt kell eszrevenn¨ nk, hogy mi okozhatja a e e o o ´ u hib´ t. Az altal´ noss´ g megs´ rt´ se n´ lk¨ l feltehetj¨ k, hogy az elemek MIS ert´ k¨ k alapj´ n n¨ vekv˝ a ´ a a e e e u u ´ e u a o o sorba van rendezve. A MIS deﬁn´ci´ j´ b´ l k¨ vetkezik, hogy tetsz˝ leges -elem˝ I={i 1 , . . . , i } halmaz ı oa o o o u − 1 darab ( − 1)-elem˝ r´ szhalmaz´ nak MIS ert´ ke megegyezik I MIS ert´ k´ vel, ami MIS(i 1 ). u e a ´ e ´ e e Ezeknek a r´ szhalmazoknak teh´ t gyakorinak kell lenni¨ k, hiszen a t´ mogatotts´ g monotons´ ga most e a u a a a is fenn´ ll. Az egyetlen r´ szhalmaz, amely lehet ritka, az I legels˝ elem´ t nem tartalmaz´ r´ szhalmaz. a e o e o e Ezt a r´ szhalmazt teh´ t ne vizsg´ ljuk a jel¨ lt el˝ all´t´ s m´ sodik l´ p´ se sor´ n. Kiv´ tel ez al´ l azon e a a o o´ ı a a e e a e o eset, amikor a m´ sodik elem MIS ert´ ke megegyezik az els˝ elem MIS ert´ k´ vel, mert ekkor m´ g a ´ e o ´ e e e ennek a r´ szhalmaznak is gyakorinak kell lennie. e Amennyiben > 2, akkor biztos, hogy a gener´ torok egyike sem egyezik meg a legkisebb elemet a nem tartalmaz´ r´ szhalmazzal ( >2 eset´ ben ugyanis a gener´ torok ( −2)-elem˝ preﬁxei megegyezo e e a u nek, amelyek biztos, hogy tartalmazz´ k a jel¨ lt els˝ elem´ t). Ez pedig garant´ lja, hogy az algoritmus a o o e a teljes, amennyiben az osszes gyakori elemp´ rt megtal´ ltuk. N´ zz¨ k meg most az egy- es k´ telem˝ ¨ a a e u ´ e u jel¨ ltek eset´ t. o e Gyakori elemek meghat´ roz´ s´ n´ l a szok´ sos elj´ r´ st k¨ vetj¨ k : minden elem jel¨ lt. Elemp´ rok a aa a a aa o u o a eset´ ben azonban nem all´thatjuk, hogy egy p´ r akkor jel¨ lt, ha mindk´ t eleme gyakori. P´ ld´ ul az AB e ´ ı a o e e a

4. FEJEZET. GYAKORI ELEMHALMAZOK

80

p´ r lehet gyakori akkor is, ha az A ritka. Ha ugyanis B-nek MIS ert´ ke kisebb A-nak MIS ert´ k´ n´ l, a ´ e ´ e e e akkor az AB-nek a MIS ert´ ke megegyezik B-nek a MIS ert´ k´ vel, ´gy AB lehet gyakori. Szerencs´ re ´ e ´ e e ı e sz¨ ks´ gtelen az osszes elemet ﬁgyelembe venni. Ha p´ ld´ ul az A elem ritka es az A MIS ert´ ke a legu e ¨ e a ´ ´ e kisebb, akkor a t´ mogatotts´ g monotons´ g´ b´ l k¨ vetkezik, hogy az A-t tartalmaz´ halmazok ritk´ k. a a a a o o o a Ha teh´ t MIS ert´ k szerint n¨ vekv˝ en vannak rendezve az elemek, akkor a legkisebb˝ l kiindulva kea ´ e o o o ress¨ k meg az els˝ gyakori elemet. Az osszes ut´ na k¨ vetkez˝ t ﬁgyelembe kell venni a jel¨ ltp´ rok u o ¨ a o o o a el˝ all´t´ s´ n´ l akkor is, ha valamelyik ritka. o´ ı a a a

5. fejezet Gyakori mint´ k kinyer´ se a e
A fejlett t´ rsadalmakra jellemz˝ , hogy sz´ mos, a mindennapi elet¨ nk sor´ n gyakran haszn´ lt a o a ´ u a a term´ ket es szolg´ ltat´ st n´ lk¨ l¨ zhetetlennek tartunk. Min´ l soksz´n˝ bb a felhaszn´ l´ i csoport, ann´ l e ´ a a e uo e ı u ao a nehezebb egy olyan uzenetet el juttatni r´ sz¨ kre, ami mindenki sz´ m´ ra egy´ rtelm˝ , am ha valaki¨ e u a a e u ´ nek ez siker¨ l, az nagy haszonnal j´ rhat, hiszen p´ r sz´ zal´ kpontos n¨ veked´ s is szigniﬁk´ ns a nagy u a a a e o e a volumenben ert´ kes´tett term´ kekn´ l. A piaci strat´ gi´ k kialak´t´ s´ n´ l is els˝ sorban a sokas´ gra, il´ e ı e e e a ıa a a o a letve a sokas´ g jellemz˝ ire vagyunk k´v´ ncsiak. Egyedi, k¨ l¨ nc elemek akkor erdekesek, ha p´ ld´ ul a o ı a uo ´ e a csal´ sokat akarunk felder´teni. Fenti eseteken k´v¨ l vizsg´ lhatjuk a gyakori balesetet okoz´ helyzea ı ı u a o teket, a sz´ m´t´ g´ pes h´ l´ zatban gyakran el˝ fordul´ , riaszt´ ssal v´ gz˝ d˝ esem´ nysorozatokat, vagy a ıo e ao o o a e o o e pl. azt, hogy az egyes nyomtatott m´ diumoknak milyen az olvas´ i osszet´ tele, es amennyiben t¨ bb e o ¨ e ´ o magazinnak, ujs´ gnak hasonl´ a c´ lcsoportja, erdemes uzenet¨ nket t¨ bb helyen is elhelyezni, hogy ´ a o e ´ ¨ u o hat´ konyabban oszt¨ n¨ zz¨ k meglev˝ es potenci´ lis v´ s´ rl´ inkat. e ¨ o o u o´ a aa o Oldalakon kereszt¨ l lehetne sorolni azon p´ ld´ kat, amikor a gyakran el˝ fordul´ dolgok” ert´ kes u e a o o ´ e ” inform´ ci´ t rejtenek magukban. A szakirodalomban a dolgokat mint´ knak nevezz¨ k, es gyakori a o a u ´ mint´ k kinyer´ s´ r˝ l besz´ l¨ nk. a eeo eu A minta t´pusa t¨ bbf´ le lehet. V´ s´ rl´ i szok´ sok felder´t´ s´ n´ l gyakori elemhalmazokat keres¨ nk, ı o e aa o a ıe e e u ahol az elemek a term´ keknek felel meg. Utaz´ sokkal kapcsolatos szok´ sokn´ l a gyakran ig´ nybe e a a a e vett, k¨ lts´ ges szolg´ ltat´ sok sorrendje is fontos, ´gy gyakori sorozatokat keres¨ nk. Telekommuo e a a ı u nik´ ci´ s h´ l´ zatokban olyan felt´ telek (predik´ tumok) gyakori fenn´ ll´ s´ t keress¨ k, amelyek gyaka o ao e a a aa u ran eredm´ nyeznek riaszt´ st. Ezeket a gyakori bool formulakat megvizsg´ lva kaphatjuk meg p´ ld´ ul e a a e a ´ a gyakori t´ ves riaszt´ sok okait. A b¨ ng´ sz´ si szok´ sok alapj´ n fejleszthetj¨ k oldalaink strukt´ r´ j´ t, e a o e e a a u uaa linkjeit, ´gy a l´ togat´ k m´ g gyorsabban es hat´ konyabban tal´ lj´ k meg a keresett inform´ ci´ kat. A ı a o e ´ e a a a o b¨ ng´ sz´ s folyamat´ t c´mk´ zett gy¨ keres f´ kkal jellemezhetj¨ k Gyakori mint´ kat kinyer˝ algoritmuo e e a ı e o a u a o sokat a r´ kkutat´ sban is alkalmaztak. Azt vizsg´ lt´ k, hogy a r´ kkelt˝ anyagokban vannak-e gyakran a a a a a o el˝ fordul´ molekula-strukt´ r´ k. Ezeket a strukt´ r´ kat c´mk´ zett gr´ fokkal ´rjuk le. o o ua ua ı e a ı A p´ ld´ kb´ l k¨ vetkezik, hogy a minta t´pusa sokf´ le lehet. Sejthetj¨ k, hogy m´ s technik´ kat kell e a o o ı e u a a majd alkalmazni pl. c´mk´ zett gr´ fok keres´ s´ n´ l, mintha csak egyszer˝ elemhalmazokat keres¨ nk. ı e a ee e u u Ebben a r´ szben egy altal´ nos le´r´ st adunk, egy egys´ ges matematikai keretbe helyezz¨ k a gyakoe ´ a ıa e u ri minta kinyer´ s´ nek feladat´ t. Emellett ismertetj¨ k a legfontosabb m´ dszerek altal´ nos – a minta ee a u o ´ a t´pus´ t´ l f¨ ggetlen – le´r´ s´ t. ı ao u ıaa

81

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

82

5.1. A gyakori minta deﬁn´ci´ ja ı o
E r´ sz meg´ rt´ s´ hez felt´ telezz¨ k, hogy az olvas´ tiszt´ ban van a 2.1 r´ szben deﬁni´ lt fogalmake e ee e u o a e a kal (rendez´ sek, korl´ t, val´ di korl´ t, maxim´ lis korl´ t, predik´ tum,). e a o a a a a 5.1. deﬁn´ci´ . A H halmaz a rendez´ sre n´ zve lok´ lisan v´ ges, ha minden x, y ∈ H elemhez, ahol ı o e e a e x y,v´ ges sz´ m´ olyan z elem l´ tezik, amelyre x z y. e a u e 5.2. deﬁn´ci´ . Az M K = (M, ) p´ rost, ahol M egy alaphalmaz, az M-en ertelmezett r´ szben ı o a e ´ rendez´ s, mintak¨ rnyezetnek nevezz¨ k, amennyiben M-nek pontosan egy minimalis eleme van, M e o u ´ halmaz a rendez´ sre n´ zve lok´ lisan v´ ges es rangsz´ mozott (graded), azaz l´ tezik a | | : M → Z e e a e a e ´ un. m´ retf¨ ggv´ ny , amire |m| = |m | + 1, ha m-nek maxim´ lis val´ di als´ korl´ tja m . Az M elemeit e u e a o o a ´ mint´ knak (pattern) nevezz¨ k es M-re, mint mintahalmaz vagy mintat´ r hivatkozunk. a u ´ e Az m m eset´ n azt mondjuk, hogy m az m r´ szmint´ ja, ha m e e a m, akkor val´ di r´ szmint´ r´ l o e ao besz´ l¨ nk. A -t tartalmaz´ si rel´ ci´ nak is h´vjuk. Az altal´ noss´ g megs´ rt´ se n´ lk¨ l feltehetj¨ k, eu a a o ı ´ a a e e e u u hogy a minim´ lis m´ ret˝ minta m´ rete 0. Ezt a mint´ t ures mint´ nak h´vjuk. a e u e a ¨ a ı ´ Ime az egyik legegyszer˝ bb p´ lda mintak¨ rnyezetre, amelyet v´ s´ rl´ i szok´ sok felt´ r´ sa sor´ n u e o aa o a aa a alkalmaztak el˝ sz¨ r. Legyen I v´ ges halmaz. Gyakori elemhalmazok keres´ s´ n´ l a (2 I , ⊆) lesz a mino o e ee e tak¨ rnyezetet, ahol ⊆ a halmazok tartalmaz´ si rel´ ci´ j´ t jel¨ li. A m´ retf¨ ggv´ ny egy halmazhoz az o a a oa o e u e elemsz´ m´ t rendeli. Az elemhalmazokon t´ l kereshet¨ nk gyakori sorozatokat, epiz odokat (v´ ges hala a u u e ´ mazon ertelmezett r´ szben rendez´ seket), bool formulakat, c´mk´ zett gy¨ keres f´ kat vagy altal´ nos ´ e e ı e o a ´ ´ a gr´ fokat. Ezen mintak¨ rnyezetek pontos deﬁn´ci´ j´ t a k¨ vetkez˝ fejezetekben tal´ ljuk. a o ı oa o o a 5.3. deﬁn´ci´ . Legyen (H1 , 1 ) (H2 , 2 ) k´ t r´ szben rendezett halmaz. Az f : H1 → H2 f¨ ggv´ ny ı o e e u e rendez´ s v´ lt´ vagy m´ s sz´ val anti-monoton, amennyiben tetsz˝ leges x, y ∈ H1 , x 1 y elemekre e a o a o o f (y) 2 f (x). 5.4. deﬁn´ci´ . A gyakori minta kinyer´ snek feladat´ ban adott egy B bemeneti (vagy feldolgozand o) ı o e a ´ adathalmaz, M K = (M, ) mintak¨ rnyezet, egy suppB : M → N anti-monoton f¨ ggv´ ny es egy o u e ´ min supp ∈ N k¨ sz¨ bsz´ m. Feladat, hogy megkeress¨ k azon mint´ kat, amelyekre a supp f¨ ggv´ ny u o a u a u e min supp-n´ l nagyobb vagy egyenl˝ ert´ ket ad : a o´ e GY = {gy : gy ∈ M, suppB (gy) ≥ min supp}. a A suppB f¨ ggv´ nyt t´ mogatotts´ gi f¨ ggv´ nynek (support function), min supp-ot tamogatotts´ gi u e a a u e ´ k¨ sz¨ bnek, a GY elemeit pedig gyakori mint´ knak h´vjuk. A nem gyakori mint´ kat ritkaknak neu o a ı a ´ vezz¨ k. Az erthet˝ s´ g kedv´ ert a B tagot gyakran elhagyjuk, tov´ bb´ a supp(m)-re mint a minta u ´ oe e´ a a t´ mogatotts´ ga hivatkozunk. A t´ mogatotts´ gi f¨ ggv´ ny ert´ ke adja meg, hogy egy minta mennyire a a a a u e ´ e gyakori a bemenetben. Az elemhalmazok p´ ld´ j´ n´ l maradva a bemenet lehet p´ ld´ ul elemhalmazok sorozata. Ekkor egy e aa a e a H halmaz t´ mogatotts´ g´ t ugy ertelmezhetj¨ k, mint a sorozat azon elemeinek sz´ ma, amelyek tara a a ´ ´ u a talmazz´ k H-t. P´ ld´ ul a {A, D}, {A, C}, {A, B, C, D}, {B}, {A, D}, {A, B, D}, {D} bemenet eset´ n a e a e supp({A, D}) = 4. Ha min supp-nak 4-et adunk meg, akkor GY = {{A}, {D}, {A, D}}. A t´ mogatotts´ g anti-monotonit´ s´ b´ l k¨ vetkezik az al´ bbi egyszer˝ tulajdons´ g. a a aa o o a u a 5.5. tulajdons´ g. Gyakori minta minden r´ szmint´ ja gyakori. a e a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

83

A mint´ kat elemhalmazok, sorozatok, gr´ fok, stb. form´ j´ ban fogjuk keresni, azaz a mint´ k mina a aa a dig valamilyen alaphalmazon deﬁni´ lt strukt´ r´ k lesznek. Ha az alaphalmazon deﬁni´ lunk egy teljes a ua a rendez´ st, akkor az alapj´ n – k¨ nnyebben vagy nehezebben – a mint´ kon is tudunk teljes rendez´ st e a o a e adni. Ezt p´ ld´ ul elemhalmazok eset´ ben a lexikograﬁkus rendez´ s , gr´ fok eset´ ben a kanonikus e a e e a e c´mk´ z´ s seg´ts´ g´ vel fogjuk megtenni. A mint´ kon ertelmezett teljes rendez´ s egyes algoritmusn´ l ı e e ı e e a ´ e a (pl. : APRIORI) a hat´ konys´ g n¨ vel´ s´ re haszn´ lhat´ , m´ soknak pedig alapfelt´ tele (pl. : Zaki). Soke a o ee a o a e szor fog felbukkanni a preﬁx fogalma is, amihez szint´ n egy teljes rendez´ sre lesz sz¨ ks´ g. e e u e 5.6. deﬁn´ci´ . Legyen ı o a H halmazon ertelmezett r´ szben rendez´ s. A e e ´ line´ ris kiterjeszt´ s´ nek h´vjuk, ha minden x y p´ rra x y teljes¨ l. a ee ı a u teljes rendez´ st a e

A line´ ris kiterjeszt´ seknek azon csoportja erdekes sz´ munkra, amelyek m´ rettart´ ak. Ez azt jelenti, a e ´ a e o hogy |x|<|y| eset´ n a x y felt´ telnek is fenn kell allnia. Amikor teh´ t a M K =(M, ) mintak¨ rnyee e ´ a o zet tagj´ nak egy m´ rettart´ line´ ris kiterjeszt´ s´ t akarjuk megadni, akkor az azonos m´ ret˝ elemek a e o a ee e u k¨ z¨ tt deﬁni´ lunk egy sorrendet. A tov´ bbiakban a m´ rettart´ jelz˝ t elhagyjuk, es minden line´ ris o o a a e o o ´ a kiterjeszt´ s alatt m´ rettart´ line´ ris kiterjeszt´ st ert¨ nk. e e o a e ´ u 5.7. deﬁn´ci´ . Legyen M K =(M, ) mintak¨ rnyezet es ı o o a egy line´ ris kiterjeszt´ se. Az m minta a e ´ -elem˝ r´ szmint´ i k¨ z¨ l az u e a ou szerinti legels˝ t h´vjuk az m minta -elem˝ preﬁx´ nek. o ı u e P´ ld´ ul, ha I = {A, B, C, D, E}, es az azonos m´ ret˝ mint´ kon az abc rendez´ s szerinti lexikograﬁkus e a ´ e u a e rendez´ st vessz¨ k a teljes rendez´ snek, akkor p´ ld´ ul az {A, C, D, E} minta 2-elem˝ preﬁxe az {A, C} e u e e a u halmaz.

5.1.1. Hat´ konys´ gi k´ rd´ sek e a e e
A bemeneti adat es a mint´ k halmaza altal´ ban nagy. P´ ld´ ul bemeneti sorozatok eset´ ben ´ a ´ a e a e 9 nagys´ grend˝ sorozatok, a mintat´ r pedig altal´ ban 10 5 nagys´ grend˝ halmazok nem ritk´ k a 10 a a u e ´ a a u hatv´ nyhalmaza. Ilyen m´ retek mellett a na´v algoritmusok (p´ ld´ ul hat´ rozzuk meg a mintahalmaz a e ı e a a minden elem´ nek t´ mogatotts´ g´ t, majd v´ logassuk ki a gyakoriakat) t´ l sok ideig futn´ nak, vagy t´ l e a a a a u a u nagy lenne a mem´ riaig´ ny¨ k. Hat´ kony, kiﬁnomult algoritmusokra van sz¨ ks´ g, amelyek speci´ lis o e u e u e a adatstrukt´ r´ kat haszn´ lnak. ua a Egy algoritmus hat´ konys´ g´ t a fut´ si id˝ vel (ami ar´ nyos az elemi l´ p´ sek sz´ m´ val) es a e a a a o a e e a a ´ felhaszn´ lt mem´ ri´ val jellemezz¨ k. P´ ld´ ul megmondhatjuk, hogy adott m´ ret˝ bemenet eset´ n a o a u e a e u e atlagosan, vagy legrosszabb esetben mennyi elemi l´ p´ st (¨ sszehasonl´t´ s, ert´ kad´ s), illetve ´ e e o ıa ´ e a mem´ ri´ t haszn´ l. Sajnos a gyakori mint´ t kinyer˝ algoritmusok mindegyike legrosszabb esetben o a a a o a teljes mintateret megvizsg´ lja, ugyanis a t´ mogatotts´ gi k¨ sz¨ b f¨ ggv´ ny´ ben a mintat´ r minden a a a u o u e e e eleme gyakori lehet. A gyakori minta-kinyer´ s korszak´ nak els˝ 10-15 ev´ ben az algoritmusok hat´ konys´ g´ t – e a o ´ e e a a elm´ leti elemz´ sek h´j´ n – minden esetben teszteredm´ nyekkel igazolt´ k. Szinte minden algoritmuse e ıa e a hoz lehet tal´ lni olyan bemeneti adatot, amit az algoritmus nagyon hat´ konyan k´ pes feldolgozni. a e e Ennek eredm´ nyek´ nt p´ ld´ ul, csak a gyakori elemhalmazokat kinyer˝ algoritmusok sz´ ma meghae e e a o a ladja a 150-et, es a mai napig nem tudunk olyan algoritmusr´ l, amelyik az osszes t¨ bbit legy˝ zn´ ´ o ¨ o o e fut´ si id˝ vagy mem´ riafogyaszt´ s tekintet´ ben. a o o a e A j¨ v˝ feladata ennek a k´ osznak a tiszt´ z´ sa. Ehhez a legfontosabb l´ p´ s a bemeneti adat kao o a a a e e rakterisztik´ j´ nak form´ lis le´r´ sa lenne. Sejtj¨ k, hogy legjobb gyakori mintakinyer˝ algoritmus nem aa a ıa u o

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

84

l´ tezik, de tal´ n van es´ ly¨ nk ertelmes meg´ llap´t´ sokra, ha a bemenetre vonatkoz´ an k¨ l¨ nb¨ z˝ e a e u ´ a ıa o uo o o felt´ telez´ sekkel el¨ nk (szok´ sos felt´ tel p´ ld´ ul az, hogy a bemenet olyan sorozat, melynek elemei e e ´u a e e a kis m´ ret˝ halmazok vagy az, hogy csak nagyon kev´ s magas t´ mogatotts´ g´ minta van) es ezekhez e u e a a u ´ pr´ b´ ljuk megtal´ lni az ide´ lis algoritmust. o a a a

5.2. Tov´ bbi feladatok a
A gyakori mintakinyer´ s egyik nagy kritik´ ja, hogy sokszor t´ l nagy a kinyert mint´ k sz´ ma. Vane a u a a nak olyan feladatok, ahol nem az osszes gyakori mint´ t k´v´ njuk kinyerni, hanem csak egy r´ sz¨ ket. ¨ a ı a e u Erre p´ lda az un. top-k mintakinyer´ s, melynek sor´ n a k legnagyobb t´ mogatotts´ g´ mint´ t keress¨ k. e ´ e a a a u a u Emellett az al´ bbi feladatok l´ teznek. a e

5.2.1. Nem b˝ v´thet˝ es z´ rt mint´ k o ı o´ a a
5.8. deﬁn´ci´ . Az m gyakori minta B-re n´ zve nem b˝ v´thet˝ (maximal), ha nem l´ tezik olyan m ı o e o ı o e gyakori minta B-ben, amelynek m val´ di r´ szmint´ ja. o e a 5.9. deﬁn´ci´ . Az m minta B-re n´ zve z´ rt, amennyiben nem l´ tezik olyan m minta B-ben, amelynek ı o e a e m val´ di r´ szmint´ ja, es m t´ mogatotts´ ga megegyezik m t´ mogatotts´ g´ val (supp(m ) = supp(m)). o e a ´ a a a a a Az ember azonnal l´ thatja, hogy mi ertelme van annak, hogy csak a nem b˝ v´thet˝ mint´ kat a ´ o ı o a keress¨ k meg : egy´ rtelm˝ en meghat´ rozz´ k a gyakori mint´ kat es sz´ muk kevesebb. Sajnos a nem u e u a a a ´ a b˝ v´thet˝ mint´ k alapj´ n csak azt tudjuk megmondani, hogy egy minta gyakori-e, a t´ mogatotts´ got o ı o a a a a nem tudjuk megadni (legfeljebb egy als´ korl´ tot). o a Nem ilyen trivi´ lis, hogy mi ertelme van a gyakori z´ rt mint´ knak. Azt l´ tjuk, hogy a z´ rt gyakori a ´ a a a a mint´ k a gyakori mint´ k r´ szhalmazai, es a z´ rt mint´ k r´ szhalmaza a nem b˝ v´thet˝ mint´ k, hiszen a a e ´ a a e o ı o a 5.10. tulajdons´ g. Minden nem b˝ v´thet˝ minta z´ rt. a o ı o a M´ gis mi c´ lt szolg´ lnak a gyakori z´ rt mint´ k ? Ennek tiszt´ z´ s´ hoz k´ t uj fogalmat kell bevee e a a a a aa e ´ zetn¨ nk. u 5.11. deﬁn´ci´ . Az m minta az m minta lez´ rtja, ha m m , supp(m)=supp(m ) es nincs m :m ı o a ´ melyre supp(m ) = supp(m ). Nyilv´ nval´ , ha m z´ rt, akkor lez´ rtja megegyezik onmag´ val. a o a a ¨ a 5.12. deﬁn´ci´ . Az M K =(M, ) mintak¨ rnyezet a z´ rts´ gra n´ zve egy´ rtelm˝ , amennyiben minden ı o o a a e e u m ∈ M minta lez´ rtja egy´ rtelm˝ . a e u L´ tni fogjuk, hogy p´ ld´ ul az elemhalmazokat tartalmaz´ mintak¨ rnyezet z´ rts´ gra n´ zve a e a o o a a e egy´ rtelm˝ , m´g a sorozatokat tartalmaz´ nem az. A z´ rts´ gra n´ zve egy´ rtelm˝ mintak¨ rnyezeteke u ı o a a e e u o ben a z´ rt mint´ k jelent˝ s´ ge abban all, hogy ezek ismeret´ ben tetsz˝ leges mint´ r´ l el tudjuk d¨ nteni, a a oe ´ e o ao o hogy gyakori-e, es ha igen, meg tudjuk pontosan mondani t´ mogatotts´ g´ t. Sz¨ ks´ gtelen t´ rolni az ´ a a a u e a osszes gyakori mint´ t, hiszen a z´ rt mint´ kb´ l ezek egy´ rtelm˝ en meghat´ rozhat´ k. Az m minta gya¨ a a a o e u a o kori, ha r´ sze valamely gyakori z´ rt mint´ nak, es m t´ mogatotts´ ga megegyezik a legkisebb olyan e a a ´ a a z´ rt minta t´ mogatotts´ g´ val, amelynek r´ sze m (ez ugyanis az m lez´ rtja). a a a a e a m ,

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

85

5.2.2. K´ nyszerek kezel´ se e e
Nem mindig erdekes az osszes gyakori minta. El˝ fordulhat, hogy p´ ld´ ul a nagy m´ ret˝ , ´ ¨ o e a e u vagy bizonyos mint´ kat tartalmaz´ , vagy nem tartalmaz´ , stb. gyakori mint´ k nem fontosak. a o o a ´ a ı Altal´ nos´thatjuk a feladatot ugy, hogy a felhaszn´ l´ k´ nyszereket, predik´ tumokat ad meg, es azokat ´ ao e a ´ a mint´ kat kell meghat´ roznunk, amelyek kiel´ g´tik az osszes k´ nyszert. a a e ı ¨ e A feladat egyszer˝ megold´ sa lenne, hogy – mint ut´ feldolgoz´ s – a gyakori mint´ kat egyes´ vel u a o a a e megvizsg´ lva t¨ r¨ ln´ nk azokat, amelyek nem el´ g´tenek minden k´ nyszert. Ez a megold´ s nem t´ l a oo e e ı e a u hat´ kony. Jobb lenne, ha a k´ nyszereket min´ l m´ lyebbre” tudn´ nk helyezni a gyakori mint´ kat e e e e a a ” kinyer˝ algoritmusokban. Ez bizonyos k´ nyszerekn´ l megtehet˝ , m´ sokn´ l nem. N´ zz¨ k, milyen o e e o a a e u oszt´ lyokba sorolhatjuk a k´ nyszereket. a e Tulajdonk´ ppen az is egy k´ nyszer, hogy gyakori mint´ kat keres¨ nk. A gyakoris´ gra vonatkoz´ e e a u a o predik´ tum igaz, ha a minta gyakori, ellenkez˝ esetben hamis. Ez a predik´ tum anti-monoton : a o a 5.13. deﬁn´ci´ . Legyen (H, ) egy r´ szben rendezett halmaz. A p : H → {igaz, hamis} predikatum ı o e ´ anti-monoton, amennyiben tetsz˝ leges x ∈ H elem eset´ n, ha p(x) = igaz, akkor p(y) is igazat ad o e minden y x elemre. Ha a fenti deﬁn´ci´ ba y x helyett x y ´runk, akkor a monoton predik´ tumok deﬁn´ci´ j´ t kapjuk. Egy ı o ı a ı oa predik´ tum akkor es csak akkor monoton es anti-monoton egyben, ha a mintat´ r minden elem´ hez a ´ ´ e e igaz (vagy hamis) ert´ ket rendel. Az ilyen predik´ tumot trivialis predik´ tumnak h´vjuk. ´ e a a ı ´ 5.14. deﬁn´ci´ . Legyen (H, ) egy r´ szben rendezett halmaz. A p : H → {igaz, hamis} predikatum ı o e ´ preﬁx anti-monoton, amennyiben megadhato a -nek egy olyan line´ ris kiterjeszt´ se amire, ha a e ´ p(m) = igaz, akkor p az m minden preﬁx´ n is igaz. e 5.15. deﬁn´ci´ . Legyen (H, ) egy r´ szben rendezett halmaz. A p : H → {igaz, hamis} predikatum ı o e ´ preﬁx monoton, amennyiben megadhato a -nek egy olyan line´ ris kiterjeszt´ se amely, ha p(m)= a e ´ = igaz, es az m mint´ nak m preﬁxe. akkor p(m ) is igaz. a ´ Minden anti-monoton (monoton) predik´ tum egyben preﬁx anti-monoton (preﬁx monoton) is. a 5.16. deﬁn´ci´ . A p predik´ tum er˝ sen atalak´that´ , amennyiben egyszerre preﬁx anti-monoton es ı o a o ´ ı o ´ preﬁx monoton. Az 5.1 abr´ n l´ that´ a k´ nyszerek kapcsolata [131]. ´ a a o e Sejthetj¨ k, hogy az anti-monoton predik´ tumok lesznek a legegyszer˝ bben kezelhet˝ k. Ilyen antiu a u o monoton predik´ tumok p´ ld´ ul a k¨ vetkez˝ k : a e a o o – A minta m´ rete ne legyen nagyobb egy adott k¨ sz¨ bn´ l. e u o e – A mint´ nak legyen r´ sze egy r¨ gz´tett minta. a e o ı V´ s´ rl´ i szok´ sok vizsg´ lat´ n´ l – amikor a v´ s´ rl´ i kosarakban gyakran el˝ fordul´ aa o a a a a aa o o o term´ khalmazokat keress¨ k – monoton k´ nyszer p´ ld´ ul az, hogy a term´ khalmazban l´ v˝ e u e e a e e o elemek proﬁtj´ nak ossz´ rt´ ke (vagy minimuma, maximuma) legyen nagyobb egy adott konstansn´ l. a ¨ e e a Preﬁx monoton predik´ tum p´ ld´ ul, hogy a term´ khalmazban tal´ lhat´ term´ kek ar´ nak atlaga a e a e a o e ´a ´ nagyobb-e egy r¨ gz´tett konstansn´ l. Rendezz¨ k a term´ keket aruk szerint n¨ vekv˝ sorrendbe. Ezen o ı a u e ´ o o rendez´ s szerinti lexikograﬁkus rendez´ s legyen a teljes rendez´ s. Nyilv´ nval´ , hogy ekkor a preﬁxe e e a o ben tal´ lhat´ term´ kek arai nagyobbak, mint a preﬁxben nem szerepl˝ term´ kei arai. Ez a k´ nyszer a o e ´ o e ´ e preﬁx monoton, hiszen a preﬁx a legolcs´ bb term´ keket nem tartalmazza, ´gy atlaga nem lehet kisebb. o e ı ´ ´ Erdemes atgondolni, hogy ez a predik´ tum r´ ad´ sul er˝ sen atalak´that´ . ´ a a a o ´ ı o

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE
triviális

86

anti−monoton prefix anti−monoton

monoton prefix monoton

erõsen átalakítható

nem átalakítható
5.1. abra. A k´ nyszerek (predik´ tumok) oszt´ lyoz´ sa ´ e a a a

¨ o 5.2.3. T¨ bbsz¨ r¨ s t´ mogatotts´ gi kusz¨ b o o o a a
Vannak olyan alkalmaz´ sok, amelyekben a gyakoris´ g egyetlen, univerz´ lis t´ mogatotts´ gi a a a a a k¨ sz¨ b alapj´ n t¨ rt´ n˝ deﬁni´ l´ sa nem megfelel˝ . Ha p´ ld´ ul v´ s´ rl´ si szok´ sok elemz´ s´ re gonu o a o e o aa o e a aa a a ee dolunk, akkor a nagy ert´ k˝ term´ kekkel kapcsolatos tud´ s legal´ bb annyira fontos, mint a nagy ´ e u e a a mennyis´ gben ert´ kes´tett, de kis haszonnal j´ r´ term´ kekkel kapcsolatos inform´ ci´ . K´ zenfekv˝ e ´ e ı ao e a o e o megold´ s, hogy annyira lecs¨ kkentj¨ k a t´ mogatotts´ gi k¨ sz¨ b¨ t, hogy ezek a ritka elemek is gyaa o u a a u o o koriak legyenek, ami azzal a vesz´ llyel j´ r, hogy (ezen fontos elemek mellett) a mintat´ r nagy r´ sze e a e e gyakoriv´ v´ lik. T¨ bbsz¨ r¨ s t´ mogatotts´ gi k¨ sz¨ bn´ l a mintat´ r minden elem´ hez egyedileg mega a o oo a a u o e e e adhatunk egy t´ mogatotts´ gi k¨ sz¨ b¨ t, azaz l´ tezik egy min supp : M → N f¨ ggv´ ny, es az m akkor a a u o o e u e ´ gyakori, ha supp(m) ≥ min supp(m). T¨ bbsz¨ r¨ s t´ mogatotts´ gi k¨ sz¨ b eset´ n nem igaz az 5.5 tulajdons´ g. Hi´ ba nagyobb ugyanis o oo a a u o e a a egy r´ szminta t´ mogatotts´ ga, a r´ szmint´ hoz tartoz´ t´ mogatotts´ gi k¨ sz¨ b m´ g nagyobb lehet, es e a a e a o a a u o e ´ ´gy a r´ szminta nem felt´ tlen¨ l gyakori. ı e e u

5.2.4. Dinamikus gyakori mintakinyer´ s e
Egyre n´ pszer˝ bb adatb´ ny´ szati feladat a gyakori mint´ k un. dinamikus kinyer´ se. Adott egy e u a a a ´ e kiindul´ si B bemenet a hozz´ tartoz´ gyakori mint´ kkal es t´ mogatotts´ gokkal es egy m´ sik B bea a o a ´ a a ´ a ´ a menet. Altal´ ban a B -t valami apr´ m´ dos´t´ ssal kapjuk B-b˝ l. Feladat, hogy min´ l hat´ konyabban o o ıa o e e tal´ ljuk meg a B -ben gyakori mint´ kat, azaz min´ l jobban haszn´ ljuk fel a megl´ v˝ tud´ st (a B-ben a a e a e o a gyakori mint´ kat). Gondolhatunk itt egy on-line aruh´ zra, ahol kezdetben rendelkez´ s¨ nkre allnak az a ´ a eu ´ elm´ lt havi v´ s´ rl´ sokhoz tartoz´ gyakori term´ khalmazok, mik¨ zben folyamatosan erkeznek az uj u aa a o e o ´ ´ v´ s´ rl´ sok adatai. Hasznos, ha az ujonnan felbukkan´ gyakori mint´ kat min´ l hamarabb felfedezz¨ k, aa a ´ o a e u an´ lk¨ l, hogy a b˝ v´tett adatb´ zisban off-line m´ don lefuttatn´ nk egy gyakori mint´ kat kinyer˝ algoe u o ı a o a a o ritmust.

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

87

5.3. Az algoritmusok jellemz˝ i o
Helyes vagy helyesen m˝ k¨ d˝ jelz˝ vel illetj¨ k azokat az algoritmusokat, amelyek nem hib´ znak, u o o o u a teh´ t csak gyakori mint´ kat nyernek ki es azok t´ mogatotts´ g´ t j´ l hat´ rozz´ k meg. Teljes egy algoa a ´ a a a o a a ritmus, ha be lehet bizony´tani, hogy az osszes gyakori mint´ t es t´ mogatotts´ gaikat meghat´ rozza. ı ¨ a ´ a a a Helyesen m˝ k¨ d˝ es teljes algoritmusokr´ l fogunk besz´ lni, de sz´ lesz olyan algoritmusokr´ l is, u o o ´ o e o o amelyekr˝ l csak azt tudjuk, hogy (bizonyos felt´ telez´ sekkel elve) kicsi annak a val´ sz´n˝ s´ ge, hogy o e e ´ o ı ue nem tal´ l meg minden gyakori mint´ t. a a Sz´ less´ gi bej´ r´ st val´ s´tanak meg azok az algoritmusok1, amelyek a legkisebb mint´ kb´ l kie e aa oı a o indulva egyre nagyobb m´ ret˝ gyakori mint´ kat nyernek ki. Egy ilyen algoritmusra igaz, hogy az e u a -elem˝ gyakori mint´ kat hamarabb tal´ lja meg, mint az -n´ l nagyobb elem˝ mint´ kat. M´ lys´ gi u a a e u a e e bej´ r´ st megval´ s´t´ algoritmusokra ez nem igaz ; ezek min´ l gyorsabban pr´ b´ lnak eljutni a nem aa o ıo e o a b˝ v´thet˝ mint´ hoz. Ha ez siker¨ l, akkor egy ujabb, nem b˝ v´thet˝ mint´ t vesznek c´ lba. o ı o a u ´ o ı o a e A k¨ vetkez˝ kben ismertetj¨ k a h´ rom legfontosabb gyakori mint´ kat kinyer˝ m´ dszert az o o u a a o o APRIORI-t, Zaki m´ dszer´ t es a mintan¨ vel˝ m´ dszert. Ennek a h´ rom algoritmusnak a szerepe abo e ´ o o o a ban all, hogy szinte az osszes t¨ bbi algoritmus ezeknek a tov´ bbfejleszt´ se, vagy ezen algoritmusok ´ ¨ o a e kever´ ke. Jelent˝ s´ g¨ ket tov´ bb n¨ veli az a t´ ny, hogy ezek a m´ dszerek megtal´ lhat´ ak ak´ rmilyen e oe u a o e o a o a t´pus´ mint´ kat keres¨ nk, legyenek azok elemhalmazok, sorozatok vagy gr´ fok. Nem pontos algoı u a u a ritmusokat adunk, hanem csak egy altal´ nos m´ dszerle´r´ st. Egyes l´ p´ seket csak a minta t´pus´ nak ´ a o ıa e e ı a ismeret´ ben lehet pontosan megadni. e

5.4. Az APRIORI m´ dszer o
Az eredeti APRIORI algoritmust gyakori elemhalmazok kinyer´ s´ re haszn´ lt´ k, es mint az AIS ee a a ´ algoritmus [5] tov´ bbfejlesztett v´ ltozata adt´ k k¨ zre. Rakesh Agrawal es Ramakrishnan Srikant [7] a a a o ´ publik´ lt´ k 1993-ban, de t˝ l¨ k f¨ ggetlen¨ l, szinte ugyanezt az algoritmust javasolta Heikki Mannila, a a ou u u Hannu Toivonen es A. Inkeri Verkamo [113]-ben. Az 5 szerz˝ v´ g¨ l egyes´tette a k´ t ´r´ st [6]. Kis ´ o e u ı e ıa m´ dos´t´ ssal az algoritmust gyakori sorozatok kinyer´ s´ re is (APRIORIALL, GSP algoritmusok), o ıa ee s˝ t, alapelv´ t b´ rmely t´pus´ gyakori minta (epiz´ d, fa stb.) keres´ s´ n´ l is alkalmazhatjuk. o e a ı u o ee e Az algoritmus rendk´v¨ l egyszer˝ , m´ gis gyors es kicsi a mem´ riaig´ nye. Tal´ n emiatt a mai ı u u e ´ o e a napig ez az algoritmus a legelterjedtebb es legismertebb gyakori mintakinyer˝ algoritmus. ´ o Az APRIORI sz´ less´ gi bej´ r´ st val´ s´t meg. Ez azt jelenti, hogy a legkisebb mint´ b´ l kiindulva e e aa oı a o szintenk´ nt halad el˝ re a nagyobb m´ ret˝ gyakori mint´ k meghat´ roz´ s´ hoz. A k¨ vetkez˝ szinten e o e u a a aa o o (iter´ ci´ ban) az eggyel nagyobb m´ ret˝ mint´ kkal foglalkozik. a o e u a Az algoritmusban k¨ zponti szerepet t¨ ltenek be az un. jeloltek. Jel¨ ltnek h´vjuk egy adott o o ´ o ı ¨ iter´ ci´ ban azt a mint´ t, amelynek t´ mogatotts´ g´ t meghat´ rozzuk, azaz, aminek ﬁgyelm¨ nket szena o a a a a a u telj¨ k. Hamis jel¨ lteknek h´vjuk azokat a jel¨ lteket, amelyekr˝ l ki fog der¨ lni, hogy ritka mint´ k, u o ı o o u a elhanyagolt mint´ k pedig azok a gyakori mint´ k, amelyeket nem v´ lasztunk jel¨ ltnek (nem foglala a a o kozunk vel¨ k ). Nyilv´ nval´ , hogy csak azokr´ l a mint´ kr´ l tudjuk eld¨ nteni, hogy gyakoriak-e, u a o o a o o amelyeknek meghat´ rozzuk a t´ mogatotts´ g´ t, teh´ t amelyek jel¨ ltek valamikor. Ez´ rt elv´ rjuk az a a a a a o e a algoritmust´ l, hogy minden gyakori mint´ t felvegyen jel¨ ltnek. A teljess´ g felt´ tele, hogy ne legyen o a o e e elhanyagolt minta, a hat´ konys´ g pedig ann´ l jobb, min´ l kevesebb a hamis jel¨ lt. e a a e o A jel¨ ltek deﬁni´ l´ s´ n´ l a 5.5 tulajdons´ got haszn´ ljuk fel, ami ´gy sz´ lt : Gyakori minta mino aa a a a a ı o ” den r´ szmint´ ja gyakori.”. Az all´t´ st indirekten n´ zve elmondhatjuk, hogy egy minta biztosan nem e a ´ ıa e
1A

sz´ less´ gi bej´ r´ st megval´ s´t´ algoritmusokat szintenk´ nt halad´ (levelwise) algoritmusoknak is h´vj´ k. e e aa o ıo e o ı a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

88

gyakori, ha van ritka r´ szmint´ ja ! Ennek alapj´ n ne legyen jel¨ lt az a minta, amelynek van ritka e a a o r´ szmint´ ja. Az APRIORI algoritmus ez´ rt ep´tkezik lentr˝ l. Egy adott iter´ ci´ ban pontosan tudjuk, e a e ´ ı o a o hogy a r´ szmint´ k gyakoriak vagy sem ! Az algoritmus onnan kapta a nev´ t, hogy az -elem˝ jel¨ ltee a e u o ket a bemeneti adat -edik atolvas´ s´ nak megkezd´ se el˝ tt (a priori) all´tja el˝ . ´ aa e o ´ ı o Az algoritmus pszeudok´ dja a k¨ vetkez˝ abr´ n l´ that´ . Kezdeti ert´ kek be´ ll´t´ sa ut´ n bel´ p¨ nk o o o´ a a o ´ e a ıa a e u egy ciklusba. A ciklus akkor er v´ get, ha az -elem˝ jel¨ ltek halmaza ures. A cikluson bel¨ l el˝ sz¨ r ´ e u o ¨ u o o a t´mogatotts´g meghat´roz´s elj´ r´ st h´vjuk meg, amely a jel¨ ltek t´ mogatotts´ g´ t hat´ rozza a a a a aa ı o a a a a meg. Ha ismerj¨ k a jel¨ ltek t´ mogatotts´ g´ t, akkor ki tudjuk v´ lasztani bel˝ l¨ k a gyakoriakat. A u o a a a a ou jel¨lt el}all´t´s f¨ ggv´ ny az -elem˝ gyakori mint´ kb´ l + 1-elem˝ jel¨ lteket all´t el˝ . o o´ ı a u e u a o u o ´ ı o B : bemeneti adat, min supp : t´mogatotts´gi k¨sz¨b, a a u o Kimenet: GY : gyakori mint´k, a ´tmeneti v´ltoz´k: A a o J : Az -elem} jel¨ltek, u o Bemenet: ← 0; J ← az ures minta; ¨ while{ |J | = 0 } { t´mogatotts´g_meghat´roz´s( B, J ); a a a a for all j ∈ J do if( supp( j) ≥ min supp ) then GY ← j; J +1 ← jel¨lt_el}all´t´s( GY ); o o´ ı a ← + 1; } 5.2. abra. Az APRIORI m´ dszer ´ o Az APRIORI elvet adapt´ l´ algoritmusok mind a fenti l´ p´ seket k¨ vetik. Term´ szetesen a ao e e o e k¨ l¨ nb¨ z˝ t´pus´ mint´ kn´ l k¨ l¨ nb¨ z˝ m´ don kell elv´ gezni a t´ mogatotts´ g-meghat´ roz´ s, gyauo o o ı u a a uo o o o e a a a a koriak kiv´ logat´ sa, jel¨ ltek el˝ all´t´ sa l´ p´ seket. a a o o´ ı a e e Az algoritmus hat´ konys´ g´ nak egyik alapfelt´ tele, hogy a jel¨ ltek elf´ rjenek a mem´ ri´ ban. Ele a a e o e o a lenkez˝ esetben ugyanis rengeteg id˝ menne el az olyan I/O m˝ veletekkel, amelynek sor´ n a jel¨ lteo o u a o ket a h´ tt´ r es a mem´ ria k¨ z¨ tt ide-oda m´ solgatjuk. A fenti pszeudok´ d az eredeti APRIORI egya e ´ o o o a o szer˝ s´tett v´ ltozat´ t ´rja le. Val´ j´ ban ugyanis addig all´tjuk el˝ az -elem˝ jel¨ lteket, am´g azok uı a a ı oa ´ ı o u o ı elf´ rnek a mem´ ri´ ban. Ha elfogy a mem´ ria, akkor n¨ vel´ se n´ lk¨ l folytatjuk az algoritmust, majd e o a o o e e u a k¨ vetkez˝ iter´ ci´ ban ott folytatjuk a jel¨ ltek el˝ all´t´ s´ t, ahol abbahagytuk. o o a o o o´ ı a a

5.4.1. Jel¨ ltek el˝ all´t´ sa o o´ ı a
Az -elem˝ jel¨ ltek el˝ all´t´ s´ nak egyszer˝ m´ dja az, hogy vessz¨ k az osszes -elem˝ mint´ t, es u o o´ ı a a u o u ¨ u a ´ azokat v´ lasztjuk jel¨ ltnek, amelyekre teljes¨ l, hogy minden r´ szmint´ juk gyakori. Sz¨ ks´ gtelen az a o u e a u e osszes r´ szmint´ t ellen˝ rizni, ugyanis a t´ mogatotts´ g anti-monotonit´ s´ b´ l k¨ vetkezik az, hogy ha ¨ e a o a a aa o o az osszes ( − 1)-elem˝ r´ szminta gyakori, akkor az osszes val´ di r´ szminta is gyakori. ¨ u e ¨ o e

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

89

Ez a m´ dszer azonban nem t´ l hat´ kony, vagy ugy is megfogalmazhatn´ nk, hogy t´ l sok felesleges o u e ´ a u munk´ t v´ gez, t´ l sok olyan mint´ t vizsg´ l meg, amelyek biztosan nem gyakoriak. H´vjuk potenci alis a e u a a ı ´ jel¨ lteknek azon mint´ kat, amelyeket el˝ all´tunk, majd ellen˝ rizz¨ k, hogy r´ szmint´ ik gyakoriak-e. o a o´ ı o u e a Ha egy potenci´ lis minta atesik a teszten, akkor jel¨ lt´ v´ lik. a ´ o e a Tudjuk, hogy ha egy minta jel¨ lt lesz, akkor minden ( − 1)-elem˝ r´ szmint´ ja gyakori, teh´ t o u e a a c´ lszer˝ az ( − 1)-elem˝ gyakori mint´ kb´ l kiindulni. Egy egyszer˝ megold´ s lenne, ha sorra e u u a o u a venn´ nk az ( − 1)-elem˝ gyakori mint´ k minim´ lis val´ di fels˝ korl´ tait, mint potenci´ lis jel¨ ltee u a a o o a a o ket. M´ g jobb megold´ s, ha a ( − 1)-elem˝ gyakori mintap´ roknak vessz¨ k a minim´ lis val´ di fels˝ e a u a u a o o korl´ tait. Ekkor ugyanis csak olyan potenci´ lis jel¨ ltet all´tunk el˝ , amelynek van k´ t ( − 1)-elem˝ a a o ´ ı o e u gyakori r´ szmint´ ja. A minim´ lis val´ di fels˝ korl´ tot egy illeszt´ si m˝ velettel fogjuk el˝ all´tani. A e a a o o a e u o´ ı k´ t gyakori mint´ t a potenci´ lis jel¨ lt gener´ torainak h´vjuk. Az illeszt´ si m˝ veletet a ⊗-el fogunk e a a o a ı e u jel¨ lni. Akkor illeszt¨ nk k´ t mint´ t, ha van ( −2)-elem˝ k¨ z¨ s r´ szmint´ juk. Ezt a r´ szmint´ t magnak o u e a u o o e a e a (core) fogjuk h´vni. ı Ha az el˝ all´t´ s m´ dja olyan, hogy nem all´thatjuk el˝ ugyanazt a potenci´ lis jel¨ ltet k´ t o´ ı a o ´ ı o a o e k¨ l¨ nb¨ z˝ m´ don, akkor ezt jel¨ lt-el˝ all´t´ st ism´ tl´ s n´ lk¨ linek nevezz¨ k. N´ zz¨ nk egy p´ ld´ t. Leuo o o o o o´ ı a e e e u u e u e a gyenek a mintat´ r elemei elemhalmazok. Akkor all´tsuk el˝ k´ t ( −1)-elem˝ gyakori elemhalmaznak e ´ ı o e u a minim´ lis val´ di korl´ tj´ t, ha metszet¨ k ( − 2)-elem˝ . A minim´ lis val´ di korl´ tok halmaza csak a o a a u u a o a egy elemet fog tartalmazni, a k´ t halmaz uni´ j´ t. Ez a jel¨ lt-el˝ all´t´ s nem ism´ tl´ s n´ lk¨ li, ugyane oa o o´ ı a e e e u is p´ ld´ ul az ({A, B}, {A, C}) p´ rnak ugyanaz a legkisebb fels˝ korl´ tja, mint az ({A, B}, {B, C}) e a a o a p´ rnak. a Az ism´ tl´ s n´ lk¨ li jel¨ lt-el˝ all´t´ st mindig a minta elemein ertelmezett teljes rendez´ s foge e e u o o´ ı a ´ e ja garant´ lni, ami a ⊆ rendez´ s egy line´ ris kiterjeszt´ se lesz. A teljes rendez´ snek megfelel˝ en a e a e e o v´ gigmegy¨ nk az ( − 1)-elem˝ gyakori mint´ kon es megn´ zz¨ k, hogy mely sorban ut´ na k¨ vetkez˝ e u u a ´ e u a o o ( − 1)-elem˝ gyakori mint´ val illeszthet˝ , illetve az illeszt´ sk´ nt kapott potenci´ lis jel¨ lt minden u a o e e a o ( −1)-elem˝ r´ szmint´ ja gyakori-e. Sok esetben a ism´ tl´ s n´ lk¨ lis´ gnek el´ gs´ ges felt´ tele az lesz, u e a e e e u e e e e hogy a k´ t gyakori minta ( − 2)-elem˝ preﬁxeik megegyezzenek. A minta t´pus´ nak ismeret´ ben a e u ı a e teljess´ get (minden minim´ lis val´ di fels˝ korl´ tbeli elemet el˝ all´tunk) es az ism´ tl´ s n´ lk¨ lis´ get e a o o a o´ ı ´ e e e u e k¨ nny˝ lesz bizony´tani. o u ı Bemenet: Kimenet: ´tmeneti v´ltoz´k: A a o GY −1 : ( − 1)-elem} gyakori mint´k u a

J : Az -elem} jel¨ltek, u o ˆ : potenci´lis jel¨ltek halmaza J a o

for all gy ∈ GY −1 do for all gy ∈ GY −1 , gy gy do if( gy es gy illeszthet}) ´ o { Jˆ = minim´lis_val´di_fels}_korl´t(gy, gy ); a o o a ˆ for all j ∈ Jˆ ˆ if( minden_r´szhalmaz_gyakori( j, GY −1 ) ) e ˆ J ← j; } 5.3. abra. Jel¨ ltek el˝ all´t´ sa ´ o o´ ı a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

90

5.4.2. Z´ rt mint´ k kinyer´ se, az APRIORI-CLOSE algoritmus a a e
A z´ rt mint´ k jelent˝ s´ g´ t az 5.2.1 r´ szben m´ r t´ rgyaltuk. Itt most k´ t feladat megold´ s´ val a a oe e e a a e aa foglalkozunk. Megn´ zz¨ k, hogy az osszes gyakori mint´ b´ l hogyan tudjuk el˝ all´tani a z´ rtakat, ile u ¨ a o o´ ı a letve bemutatjuk az APRIORI-CLOSE [128–130] algoritmust, amely m´ r eleve csak a z´ rt mint´ kat a a a hat´ rozza meg. Mindk´ t m´ dszerhez az al´ bbi eszrev´ telt haszn´ ljuk fel : a e o a ´ e a ´ 5.17. eszrev´ tel. Ha az m minta nem z´ rt, akkor van olyan m-et tartalmaz´ eggyel nagyobb m´ ret˝ e a o e u minta, amelynek t´ mogatotts´ ga megegyezik m t´ mogatotts´ g´ val. a a a a a Tegy¨ k fel, hogy a legnagyobb m´ ret˝ gyakori minta m´ rete k. A GYk elemei z´ rtak. Egy egyszer˝ u e u e a u algoritmus menete a k¨ vetkez˝ : o o N´ zz¨ k sorban GYk−1 , GYk−2 , . . . , GY0 elemeit. Ha m ∈ GY -hez tal´ lunk olyan m ∈ GY +1 elee u a met, amelynek t´ mogatotts´ ga megegyezik m t´ mogatotts´ g´ val, akkor m nem z´ rt. Ha nincs ilyen a a a a a a tulajdons´ g´ m , akkor m z´ rt. a u a Az APRIORI-CLOSE menete teljes m´ rt´ kben megegyezik az APRIORI algoritmus menet´ vel. e e e Az egyetlen k¨ l¨ nbs´ g, hogy az -elem˝ gyakori mint´ k meghat´ roz´ sa ut´ n t¨ rli az ( − 1)-elem˝ uo e u a a a a o u nem z´ rtakat. Miut´ n eld¨ nt¨ tte, hogy az -elem˝ m minta gyakori, megvizsg´ lja az osszes ( − 1)a a o o u a ¨ elem˝ r´ szmint´ j´ t m-nek. Amennyiben van olyan r´ szhalmaz, aminek t´ mogatotts´ ga egyenl˝ m u e aa e a a o t´ mogatotts´ g´ val, akkor ez a r´ szminta nem z´ rt, ellenkez˝ esetben z´ rt. a a a e a o a

´ 5.5. Sorozat t´pusu bemenet ı
A leg´ ltal´ nosabb eset le´r´ s´ n´ l nem tett¨ nk semmi megk¨ t´ st a bemenet t´pus´ ra es a a a ıaa a u oe ı a ´ t´ mogatotts´ gi f¨ ggv´ nyre vonatkoz´ an. Az esetek t¨ bbs´ ge azonban egy speci´ lis csal´ dba tartozik. a a u e o o e a a Ennek a probl´ macsal´ dnak a jellemz˝ je, hogy a bemenet egy v´ ges sorozat, es a t´ mogatotts´ got e a o e ´ a a azon elemek sz´ ma adja, amelyek valamilyen m´ don illeszkednek a mint´ ra 2 . Az illeszked´ st egy a o a e illeszked´ si predik´ tummal adhjuk meg, melynek ertelmez´ si tartom´ nya a mintat´ r. e a ´ e a e bemenet : S = s1 , s2 , . . . , sn A t´ mogatotts´ g deﬁn´ci´ ja megk¨ veteli, hogy ha egy minta illeszkedik egy sorozatelemre, akkor a a ı o o minden r´ szmint´ ja is illeszkedjen. A legt¨ bb esetben a sorozat elemei megegyeznek a mintat´ r elee a o e meivel es az m minta akkor illeszkedik egy sorozatelemre, ha annak m a r´ szmint´ ja. ´ e a A szakirodalomban igen elterjedt a sorozatok helyett a halmazokkal le´rt bemenet, ahol minden ı egyes elem egyedi azonos´t´ val van ell´ tva. A jegyzetben a sorozatos le´r´ st fogjuk haszn´ lni, akinek ıo a ıa a ez szokatlan, az tekintse azonos´t´ knak a sorozat elemeinek sorsz´ m´ t. ıo a a Az m minta gyakoris´ g´ t (jel¨ l´ sben : f reqS (m), ami a frequency sz´ ra utal) az m t´ mogatotts´ ga a a oe o a a supp es az S hossz´ nak h´ nyados´ val deﬁni´ ljuk. A gyakoris´ gi k¨ sz¨ b¨ t ( min|S| ) k¨ vetkezetesen ´ a a a a a u o o o min f req-el jel¨ lj¨ k. Az ertelmesen megv´ lasztott gyakoris´ gi k¨ sz¨ b mindig 0 es 1 k¨ z¨ tt van. Az o u ´ a a u o ´ o o esetek t¨ bbs´ g´ ben t´ mogatotts´ gi k¨ sz¨ b helyett gyakoris´ gi k¨ sz¨ b¨ t adnak meg. o e e a a u o a u o o Sorozat t´pus´ bemenet eset´ n mer¨ l fel azon elv´ r´ s az algoritmusokkal szemben, hogy ne leı u e u aa gyen erz´ keny a bemenet homogenitas´ ra. Intuit´ve akkor homog´ n egy bemenet, ha nincsenek olyan ´ e ı e ´ a
csak a matematikai deﬁn´ci´ kat tekintj¨ k, akkor t¨ rekedhett¨ nk volna a legegyszer˝ bb le´r´ sra es haszn´ lhattunk ı o u o u u ıa ´ a volna sorozatok helyett multihalmazokat. A val´ s´ gban azonban a bemenet t´ nyleg sorozatok form´ j´ ban adott, ´gy nem oa e aa ı tehetj¨ k fel, hogy az azonos bemeneti elemek ossze vannak vonva. u ¨
2 Ha

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

91

r´ szei, amelyben valamely minta gyakoris´ ga nagyon elt´ r a teljes bemenet alapj´ n sz´ m´tott gyae a e a a ı koris´ g´ t´ l. Sok alkalmaz´ sban ez a felt´ tel nem all fenn, ´gy azokat az algoritmusokat kedvelj¨ k, a ao a e ´ ı u amelyek hat´ konys´ ga f¨ ggetlen a bemenet homogenit´ s´ t´ l. K¨ nny˝ atgondolni, hogy az APRIORI e a u a ao o u´ algoritmus rendelkezik ezzel a tulajdons´ ggal. a

5.5.1. APRIORI
Amennyiben a t´ mogatotts´ got illeszked´ si predik´ tum alapj´ n deﬁni´ ljuk, akkor az APRIORI a a e a a a algoritmus a bemeneti elemeken egyes´ vel v´ gigmegy es n¨ veli azon jel¨ ltek sz´ ml´ l´ j´ t, amee e ´ o o a aoa lyek illeszkednek az eppen aktu´ lis bemeneti elemre. Azonos bemeneti elemekn´ l ez a m˝ velet ´ a e u ugyanazt fogja csin´ lni ez´ rt c´ lszer˝ az azonos bemeneti elemeket osszegy˝ jteni es csak egyszer a e e u ¨ u ´ megh´vni az elj´ r´ st. A bemenet azonban t´ l nagy lehet, ez´ rt ezt gyors´t´ si l´ p´ st csak akkor szok´ s ı aa u e ıa e e a elv´ gezni, amikor m´ r rendelkez´ s¨ nkre allnak az egyelem˝ gyakori mint´ k. Ezek alapj´ n tov´ bbi e a eu ´ u a a a sz˝ r´ seket lehet v´ gezni. P´ ld´ ul elemhalmaz/elemsorozat t´pus´ bemeneti elemekn´ l t¨ r¨ lj¨ k a halue e e a ı u e oo u mazb´ l/sorozatb´ l a ritka elemeket. Ez dupl´ n hasznos, hiszen cs¨ kkentj¨ k a mem´ riafogyaszt´ st es o o a o u o a ´ mivel az azonos sz˝ rt elemek sz´ ma nagyobb lehet, mint az azonos elemek sz´ ma a t´ mogatotts´ gok u a a a a meghat´ roz´ sa m´ g kevesebb id˝ be fog telni. a a e o Vannak olyan mint´ k, amelyekn´ l a illeszked´ s eld¨ nt´ se dr´ ga m˝ velet. P´ ld´ ul gr´ f t´pus´ a e e o e a u e a a ı u mint´ kn´ l az illeszked´ s meghat´ roz´ s´ hoz egy r´ szgr´ f izomorﬁa feladatot kell eld¨ nteni, ami bia a e a aa e a o zony´tottan NP-teljes. Ilyen mint´ kn´ l hasznos, ha minden jel¨ ltn´ l rendelkez´ s¨ nkre allnak azon beı a a o e eu ´ meneti elemek sorsz´ mai, amelyekre illeszkednek a gener´ torok (nevezz¨ k ezt a halmazt illeszked´ si a a u e halmaznak). Az illeszked´ si predik´ tum anti-monoton tulajdons´ g´ b´ l k¨ vetkezik, hogy a jel¨ lt csak e a a a o o o azon bemeneti elemekre illeszkedhet, amelyekre gener´ toraik is illeszkednek. A t´ mogatotts´ g mega a a hat´ roz´ sa sor´ n a jel¨ ltek illeszked´ si halmaz´ t is meg kell hat´ roznunk hiszen a jel¨ ltek lesznek a a a o e a a o a gener´ torok a k¨ vetkez˝ iter´ ci´ ban. Term´ szetesen a gener´ torok illeszked´ si list´ it t¨ r¨ lhetj¨ k a o o a o e a e a oo u miut´ n meghat´ roztuk a jel¨ ltek illeszked´ si list´ it. a a o e a DIC A DIC (Dynamic Itemset Counting) algoritmus [26] az APRIORI tov´ bbfejleszt´ se. Gyakori a e elemhalmazok kinyer´ s´ re javasolt´ k, de minden olyan gyakori mint´ kat keres˝ feladatban alkalmazee a a o hat´ , amelyben a bemenet sorozat t´pus´ , es a t´ mogatotts´ got illeszked´ si predik´ tum alapj´ n deﬁo ı u ´ a a e a a ni´ ljuk. Az algoritmus nem tiszt´ n sz´ less´ gi bej´ r´ st val´ s´t meg ; a k¨ l¨ nb¨ z˝ elemsz´ m´ mint´ k a a e e aa oı uo o o a u a egy¨ tt vannak jelen a jel¨ ltek k¨ z¨ tt. Ha k a legnagyobb gyakori minta m´ rete, akkor v´ rhat´ an (k+ u o o o e a o +)-n´ l kevesebbszer, de legrosszabb esetben (k + 1)-szer kell v´ gigolvasni a bemenetet. e e A DIC algoritmusban – szemben az APRIORI-val – nem v´ lik sz´ t az egyes iter´ ci´ kban a jel¨ ltek a e a o o el˝ all´t´ sa, a t´ mogatotts´ gok meghat´ roz´ sa es a ritka mint´ k t¨ rl´ se. Mik¨ zben vessz¨ k a bemeneti o´ ı a a a a a ´ a o e o u elemeket es hat´ rozzuk meg a jel¨ ltek t´ mogatotts´ g´ t, uj jel¨ lteket vehet¨ nk fel es t¨ r¨ lhet¨ nk (azaz ´ a o a a a ´ o u ´ oo u dinamikus elemsz´ ml´ l´ st alkalmazunk, ahogyan erre az algoritmus neve is utal). Akkor vesz¨ nk fel a aa u egy mint´ t a jel¨ ltek k¨ z´ , ha minden val´ di r´ szmint´ j´ r´ l kider¨ lt, hogy gyakori. Ak´ rhol vesz¨ nk a o o e o e aao u a u fel egy jel¨ ltet, egy iter´ ci´ val k´ s˝ bb ugyanott, ahol felvett¨ k, t¨ r¨ ln¨ nk kell a jel¨ ltek k¨ z¨ l, hio a o eo u oo u o o u szen a pontos t´ mogatotts´ g meghat´ roz´ s´ hoz a teljes bemenetet at kell n´ zn¨ nk. Ha a t¨ r¨ lt jel¨ lt a a a aa ´ e u oo o gyakori, akkor term´ szetesen a mint´ t felvessz¨ k a gyakori mint´ k halmaz´ ba. Minden jel¨ l eset´ n e a u a a o e t´ rolnunk kell, hogy h´ nyadik bemeneti elemn´ l lett jel¨ lt. A kiindul´ si allapotban minden egyelem˝ a a e o a ´ u minta jel¨ lt es akkor er v´ get az algoritmus, amikor nincs egyetlen jel¨ lt sem. o ´ ´ e o

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

92

Elemhalmazok p´ ld´ j´ t n´ zve, ha az A es B elemek olyan sokszor fordulnak el˝ , hogy e aa e ´ o t´ mogatotts´ guk, m´ r a bemenet egyharmad´ nak atolvas´ sa ut´ n el´ ri min supp-ot, akkor az {A, B} a a a a ´ a a e k´ t elem˝ halmaz m´ r ekkor jel¨ lt lesz, es el˝ fordul´ sait el kell kezdeni osszesz´ molni. A bemenet e u a o ´ o a ¨ a v´ gigolvas´ sa ut´ n ism´ t az els˝ bemeneti elemre l´ p¨ nk es az egyelem˝ jel¨ ltek t¨ rl´ se ut´ n folytate a a e o e u ´ u o o e a juk a jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ s´ t. Az A, B jel¨ ltet a bemenet egyharmad´ n´ l t¨ r¨ lj¨ k o a a a a aa o a a oo u a jel¨ ltek k¨ z¨ l. Ha nincs m´ s jel¨ lt, akkor az algoritmus v´ get er. L´ that´ , hogy ekkor a DIC algoo o u a o e ´ a o ritmus 1+1/3-szor olvassa v´ gig a bemenetet, amit az APRIORI k´ tszer tesz meg. e e Az algoritmus h´ tr´ nya, hogy minden bemeneti elemn´ l meg kell vizsg´ lni, hogy vannak-e a a e a t¨ rlend˝ jel¨ ltek. Ez k¨ lts´ ges m˝ velet ez´ rt c´ lszer˝ allom´ sokat” l´ trehozni. P´ ld´ ul minden o o o o e u e e u ´ a e e a ” ezredik bemeneti elem lehet egy allom´ s. Csak az allom´ sokn´ l n´ zz¨ k meg, hogy egy jel¨ lt ´ a ´ a a e u o t´ mogatotts´ ga el´ rte-e min supp-ot, ´gy csak allom´ sn´ l vesz¨ nk fel, illetve t¨ rl¨ nk jel¨ lteket. a a e ı ´ a a u o u o A DIC algoritmus, szemben az APRIORI-val, erz´ keny az adatok homogenit´ s´ ra. Amennyiben ´ e aa egy minta a felsz´ ll´ hely´ t˝ l nagyon t´ vol koncentr´ lva gyakori, akkor az osszes, ot r´ szmintak´ nt a o eo a a ¨ ˝ e e tartalmaz´ minta is csak sok´ ra lesz jel¨ lt. Ekkor a DIC hat´ konys´ ga rosszabb APRIORI algorito a o e a mus´ n´ l, hiszen ugyanannyiszor j´ rja v´ gig a bemenetet, mint az APRIORI, de ek¨ zben olyan munk´ t e a a e o a is v´ gez, amit az APRIORI nem (minden allom´ sn´ l ellen˝ rzi, hogy mely jel¨ lteket kell t¨ r¨ lni). e ´ a a o o oo ¨ Osszess´ g´ ben elmondhatjuk, hogy a DIC csak abban az esetben lesz gyorsabb az APRIORI-n´ l, e e a ha a bemenet olyan nagy, hogy a fut´ si id˝ ben nagy szerepet j´ tszik a bemenet beolvas´ sa. A mai a o a a mem´ riakapacit´ sok mellett ez ritk´ n all fenn. o a a ´ A k¨ vetkez˝ kben olyan algoritmusokat ismertet¨ nk, amelyek sorozat t´pus´ bemenet es illeszo o u ı u ´ ked´ s alap´ t´ mogatotts´ g eset´ n tudj´ k meghat´ rozni a gyakori mint´ kat. e u a a e a a a

5.5.2. Zaki m´ dszere o
Zaki m´ dszere [191] szint´ n jel¨ lteket haszn´ l a keres´ si t´ r bej´ r´ s´ hoz, de a bej´ r´ s t´pusa o e o a e e aaa aa ı – szemben az APRIORI-val – m´ lys´ gi. A M K = (M, ) mintak¨ rnyezet eset´ n csak ake e o e kor haszn´ lhat´ , ha tudjuk deﬁni´ lni a -nek egy line´ ris kiterjeszt´ s´ t, ugyanis az algoritmus a o a a ee ep´t˝ elemei a preﬁxek. ´ ıo A preﬁx alapj´ n deﬁni´ lhatunk egy ekvivalencia rel´ ci´ t. Adott eset´ n k´ t minta ekvivalens, ha a a a o e e -elem˝ preﬁx¨ k megegyezik. A P preﬁx˝ mint´ k halmaz´ t [P]-vel jel¨ lj¨ k. A preﬁxek seg´ts´ g´ vel u u u a a o u ı e e a mint´ k halmaz´ t diszjunkt r´ szekre osztjuk, azaz a feladatot kisebb r´ szfeladatokra vezetj¨ k vissza. a a e e u N´ zz¨ k p´ ld´ ul az elemhalmazok eset´ t. Legyen I = {A, B, C, D} es M = (2 I , ⊆), akkor I e u e a e ´ I , ha |I | < |I | vagy, ha |I | = |I | es I lexikograﬁkusan megel˝ zi I -t. P´ ld´ ul {D} {A, C} es ´ o e a ´ {A, B, D} {B, C, D}. Amennyiben = 1, akkor p´ ld´ ul a {A, B}, {A, C}, {A, D} egy ekvivalencia e a oszt´ lyba tartozik, aminek p´ ld´ ul a {B,C} nem eleme. a e a A preﬁx mellett Zaki m´ dszer´ nek k¨ zponti fogalma az illeszked´ si lista. Egy mint´ hoz tartoz´ o e o e a o illeszked´ si lista t´ rolja a minta illeszked´ seit. Az illeszked´ si lista k´ t fontos tulajdons´ ggal b´r : e a e e e a ı I. Az illeszked´ si list´ b´ l k¨ nnyen megkaphat´ a t´ mogatotts´ g. e a o o o a a II. Egy jel¨ lt illeszked´ si list´ ja megkaphat´ a gener´ torainak illeszked´ si list´ ib´ l. o e a o a e a o P´ ld´ ul elemhalmaz t´pus´ mint´ k eset´ ben (ha az illeszked´ st a tartalmaz´ si rel´ ci´ alapj´ n e a ı u a e e a a o a deﬁni´ ljuk) egy elemhalmaz illeszked´ si list´ ja egy olyan lista lesz, amely a bemeneti soa e a rozat azon elemeinek sorsz´ m´ t t´ rolja, amelyeknek r´ sze az adott elemhalmaz. P´ ld´ ul a a a e e a {A, D}, {A, C}, {A, B, C, D}, {B}, {A, D}, {A, B, D}, {D} bemenet eset´ n az {A, C} illeszked´ si e e list´ ja : {1,2} . a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE Zaki algoritmus´ nak pszeudok´ dja az al´ bbi. a o a Bemenet: B : min supp : Kimenet: GY : ´tmeneti v´ltoz´k: A a o J : ILL(J) : bemeneti adat, t´mogatotts´gi k¨sz¨b, a a u o gyakori mint´k, a jel¨ltek, o jel¨ltek illeszked´si list´ja, o e a

93

J ← 1-elem} mint´k; u a ILL(J) ← ILL_fel´p´t´s( B, J ); e ı e for all j ∈ J do if( |ILL( j)| ≥ min supp ) then GY1 ← j; zaki_seg´d( GY, ILL(GY ), min supp ); e

/ // GY = [0]+

5.4. abra. Zaki m´ dszere ´ o El˝ sz¨ r fel´ p´tj¨ k az egyelem˝ mint´ k illeszked´ si list´ it. Ezek alapj´ n meghat´ rozzuk a gyakori o o e ı u u a e a a a mint´ kat. A k´ s˝ bbiekben nem haszn´ ljuk a bemenetet csak az illeszked´ si list´ kat, ezekb˝ l ugyanis a eo a e a o a t´ mogatotts´ gok egy´ rtelm˝ en meghat´ rozhat´ k. Az algoritmus l´ nyege a zaki seg´d rekurzi´ s a a e u a o e e o elj´ r´ s, amelynek pszeudok´ dja az 5.5 abr´ n l´ that´ . aa o ´ a a o A Zaki f´ le jel¨ lt el˝ all´t´ snak k´ t feladata van. Term´ szetesen az egyik a jel¨ ltek el˝ all´t´ sa, e o o´ ı a e e o o´ ı a de emellett az illeszked´ si list´ kat is el˝ alltja. A jel¨ lt-el˝ all´t´ s megegyezik az APRIORI jel¨ lt e a o´ o o´ ı a o el˝ all´t´ s´ nak els˝ l´ p´ s´ vel (potenci´ lis jel¨ ltek el˝ all´t´ sa). A m´ sodik l´ p´ st nem is tudn´ nk o´ ı a a o e ee a o o´ ı a a e e a elv´ gezni, ugyanis nem all rendelkez´ s¨ nkre az osszes r´ szminta, ´gy nem is tudjuk ellen˝ rizni, hogy e ´ eu ¨ e ı o az osszes r´ szminta gyakori-e. ¨ e N´ zz¨ nk erre egy gyors p´ ld´ t. Amennyiben a mint´ kat elemhalmazok form´ j´ ban keress¨ k, e u e a a aa u akkor az APRIORI es Zaki m´ dszere is el˝ sz¨ r meghat´ rozza a gyakori elemeket. Legyenek ezek ´ o o o a az A, C, D, G, M elemek. Az APRIORI ezek ut´ n el˝ all´tana 5 darab jel¨ ltet, majd meghat´ rozn´ a o´ ı o a a 2 t´ mogatotts´ gaikat. Zaki ehelyett csak az A preﬁx˝ k´ telem˝ halmazok t´ mogatotts´ g´ t vizsg´ lja. Ha a a u e u a a a a ezek k¨ z¨ l gyakori p´ ld´ ul az {A, C}, {A, G}, akkor a k¨ vetkez˝ kben az {A,C,G}-t n´ zi, es mivel o u e a o o e ´ tov´ bbi jel¨ ltet nem tud el˝ all´tani, ugrik a C preﬁx˝ elemhalmazok vizsg´ lat´ ra, es ´gy tov´ bb. a o o´ ı u a a ´ ı a L´ tnunk kell, hogy Zaki m´ dszere csak t¨ bb jel¨ ltet all´that el˝ , mint az APRIORI. A m´ lys´ gi a o o o ´ ı o e e bej´ r´ s miatt ugyanis egy jel¨ lt el˝ all´t´ s´ n´ l nem all rendelkez´ s¨ nkre az osszes r´ szminta. Az el˝ z˝ aa o o´ ı a a a ´ eu ¨ e o o p´ lda eset´ ben p´ ld´ ul az {A,C,G} t´ mogatotts´ g´ t hamarabb vizsg´ lja, mint a {C,G} halmaz´ t, e e e a a a a a e holott ez ut´ bbi ak´ r ritka is lehet. Ebben a tekintetben teh´ t Zaki m´ dszere rosszabb az APRIORIo a a o n´ l, ugyanis t¨ bb hamis jel¨ ltet all´t el˝ . a o o ´ ı o Zaki m´ dszer´ nek igazi ereje a jel¨ ltek t´ mogatotts´ g´ nak meghat´ roz´ s´ ban van. A mint´ k ilo e o a a a a aa a leszked´ si list´ inak el˝ all´t´ sa egy rendk´v¨ l egyszer˝ es nagyon gyors m˝ velet lesz. Emellett ahogy e a o´ ı a ı u u´ u haladunk egyre m´ lyebbre a m´ lys´ gi bej´ r´ s sor´ n, ugy cs¨ kken az illeszked´ si list´ k hossza, es e e e aa a ´ o e a ´ ezzel a t´ mogatotts´ g meghat´ roz´ s´ nak ideje is. a a a aa A bemenet sz˝ r´ s´ nek otlet´ t az APRIORI algoritmusn´ l is els¨ thetj¨ k, de nem ilyen m´ rt´ kben. uee ¨ e a u u e e Ha ismerj¨ k a gyakori egyelem˝ mint´ kat, akkor t¨ r¨ lhetj¨ k azon sorozatelemeket, amelyek nem u u a oo u

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE [P]+ : P prefix}, P-n´l eggyel nagyobb gyakori mint´k u e a + ) : [P]+ -beli mint´k illeszked´si lis´tja, ILL([P] a e a min supp : t´mogatotts´gi k¨sz¨b, a a u o Kimenet: GY : P prefix} osszes gyakori minta, u ¨ ´tmeneti v´ltoz´k: A a o J : jel¨ltek, o ILL(J) : jel¨ltek illeszked´si list´ja, o e a Bemenet: for all m ∈ [P]+ do { for all m ∈ [P]+ , m m do { J, ILL(J) ← minim´lis_val´di_fels}_korl´t( m, m , ILL(m, m ) ); a o o a for all j ∈ J do if( |ILL( j)| ≥ min supp ) then GY ← j; } zaki_seg´d( GY , ILL(GY ), min supp ); e GY ← GY ∪ GY ; } 5.5. abra. zaki seg´ d elj´ r´ s ´ e aa

94

illeszkednek egyetlen gyakori egyelem˝ mint´ ra sem. S˝ t ezt a gondolatot altal´ nos´thatjuk is : az u a o ´ a ı -edik l´ p´ sben t¨ r¨ lhetj¨ k a bemeneti sorozat azon elemeit, amelyek nem illeszkednek egyetlen ( − e e oo u − 1)-elem˝ mint´ ra sem. Ez a fajta bemeneti t´ r sz˝ k´t´ s azonban nem lesz olyan hat´ kony, mint u a e u ıe e amilyen a Zaki m´ dszer´ ben. Ott ugyanis egyszerre csak 1 preﬁxet vizsg´ lunk, az APRIORI-n´ l o e a a azonban altal´ ban sok olyan minta van, aminek csak az ures minta a k¨ z¨ s r´ szmint´ ja. ´ a ¨ o o e a ¨ Osszess´ g´ ben teh´ t az APRIORI kevesebb jel¨ ltet gener´ l, mint Zaki m´ dszere, de a jel¨ ltek e e a o a o o ´ a t´ mogatotts´ g´ nak meghat´ roz´ sa t¨ bb id˝ t vesz ig´ nybe. Altal´ noss´ gban nem lehet megmondani, a a a a a o o e a hogy melyik a jobb m´ dszer. Egyes adatb´ zisok eset´ n az APRIORI, m´ sokn´ l a Zaki m´ dszer. S˝ t o a e a a o o k¨ nnyen lehet olyan p´ ld´ t mutatni, amikor az egyik algoritmus nagys´ grendileg t¨ bb id˝ t¨ lt a feladat o e a a o o o megold´ s´ val, mint a m´ sik. aa a Zaki m´ dszer´ n´ l k¨ nny˝ kezelni a anti-monoton es a preﬁx anti-monoton k´ nyszereket. A nem o e e o u ´ e gyakori mint´ k t¨ rl´ sekor t¨ r¨ lj¨ k azokat a mint´ kat is, amelyek nem el´ g´tenek ki minden antia o e oo u a e ı monoton k´ nyszert. A preﬁx anti-monoton k´ nyszereket a jel¨ ltek el˝ all´t´ sa ut´ n kell ﬁgyelembe e e o o´ ı a a venn¨ nk : t¨ r¨ lhetj¨ k azokat a gener´ torokat, amelyekre nem teljes¨ l az anti-monoton k´ nyszer. A u oo u a u e zaki seg´d elj´ r´ sb´ l k¨ vetkezik, hogy ilyen m mint´ t legfeljebb olyan jel¨ lt el˝ all´t´ s´ n´ l fogunk e aa o o a o o´ ı a a a felhaszn´ lni, aminek m a preﬁxe. Term´ szetesen itt is bajban vagyunk, ha t¨ bb preﬁx anti-monoton a e o k´ nyszer van adva, hiszen ezek -nek k¨ l¨ nb¨ z˝ line´ ris kiterjeszt´ seit haszn´ lhatj´ k. e uo o o a e a a

5.5.3. Mintan¨ vel˝ algoritmusok o o
A mintan¨ vel˝ (pattern growth) algoritmus olyan mintakeres´ s eset´ n alkalmazhat´ , amikor a o o e e o bemenet mint´ k sorozatak´ nt van megadva, es az illeszked´ st a tartalmaz´ s alapj´ n deﬁni´ ljuk, a e ´ e a a a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

95

ertelmezhet˝ a preﬁx, es a mint´ k egy´ rtelm˝ en n¨ velhet˝ k. P´ ld´ ul a n¨ vel´ s m˝ velet halmazok ´ o ´ a e u o o e a o e u eset´ n az uni´ , sorozatok eset´ ben a konkaten´ ci´ k´ pz´ s´ nek felel meg (´ s ebb˝ l l´ tszik, hogy a e o e a o e ee e o a n¨ vel´ s m˝ velete nem felt´ tlen¨ l kommutat´v). o e u e u ı 5.18. deﬁn´ci´ . Az M K = (M, ) mintak¨ rnyezet mint´ i egy´ rtelm˝ en n¨ velhet˝ k, ha l´ tezik egy ı o o a e u o o e olyan + n¨ vel˝ ” m˝ velet, amellyel az M f´ lcsoportot alkot. o o u e ” A n¨ vel´ s inverze a cs¨ kkent´ s, jel¨ l´ se : -. Az m−m m˝ velet eredm´ nye az az m minta, amivel m -t o e o e oe u e n¨ velve m-et kapjuk. o A mintan¨ vel˝ m´ dszerek csak egyelem˝ jel¨ lteket haszn´ lnak, es emellett a bemeneten v´ geznek o o o u o a ´ e olyan m˝ veleteket, amelyek eredm´ nyek´ nt megkapjuk a gyakori mint´ kat. A k´ t m˝ velet a sz ur´ s es u e e a e u ˝ e ´ a vet´t´ s, amelyek az eredeti S bemenetb˝ l egy kisebb” S bemenetet all´tanak el˝ . A sz˝ r´ s a gyakori ıe o ´ ı o ue ” egyelem˝ mint´ kat haszn´ lja es olyan S bemenetet all´t el˝ amelyben a gyakori mint´ k megegyeznek u a a ´ ´ ı o a az S-beli gyakori mint´ kkal. Az S bemenet m mint´ ra vet´t´ se (jel¨ l´ sben S|m) pedig olyan S bemea a ıe oe netet all´t el˝ , amelyre igaz, hogy ha m-et az S -beli gyakori mint´ kkal n¨ velj¨ k, akkor megkapjuk az ´ ı o a o u S-beli, m-et tartalmaz´ gyakori mint´ kat. A m-et tartalmaz´ gyakori mint´ k meghat´ roz´ s´ hoz csak o a o a a aa azokra a bemeneti elemekre van sz¨ ks´ g, amelyekre illeszkedik m, ez´ rt a vet´t´ s els˝ l´ p´ se mindig u e e ıe o e e ezen elemek meghat´ roz´ sa lesz. a a Ha p´ ld´ ul a bemenet elemei elemhalmazok es akkor illeszkedik egy elemhalmaz a bee a ´ menet egy elem´ re, ha annak r´ sze, akkor sz˝ r´ s m˝ velet az lesz, hogy a bemeneti elee e ue u mekb˝ l t¨ r¨ lj¨ k a ritka elemeket. Nyilv´ nval´ , hogy ritka elem nem j´ tszik szerepet a gyao oo u a o a kori elemek meghat´ roz´ s´ ban. A bemenet X halmazra vet´t´ s´ t megkapjuk, ha t¨ r¨ lj¨ k azon a aa ıe e oo u bemeneti elemeket, amelyeknek nem r´ sze X , majd a kapott elemekb˝ l t¨ r¨ lj¨ k X -et. Lee o oo u gyen S = {A, C, F}, {B, G}, {A, C, D}, {A, C}, {B, C}, {C, D, E}, {A, B, C} amelynek sz˝ r´ se 2-es ue ˜ = {A, C}, {B}, {A, C, D}, {A, C}, {B, C}, {C, D}, {A, B, C} sot´ mogatotts´ gi k¨ sz¨ b eset´ n az S a a u o e rozat es S|{A, C} = {D}, {B} . ´ ˜ A mintan¨ vel˝ m´ dszer rendk´v¨ l egyszer˝ , tulajdonk´ ppen a feladatot rekurz´van kisebb o o o ı u u e ı r´ szfeladat megold´ s´ ra vezeti vissza. A rekurzi´ s elj´ r´ st a bemenet sz˝ r´ s´ vel es k¨ l¨ nb¨ z˝ e aa o aa uee ´ uo o o mint´ kra vett vet´t´ seivel h´vja meg, mik¨ zben a mintateret is cs¨ kkenti. Jel¨ lj¨ k M \ m-el azt a mina ıe ı o o o u ¯ tateret, amit ugy kapunk M-b˝ l, hogy t¨ r¨ lj¨ k azon mint´ kat, amelynek m r´ szmint´ ja (m). Ha az m ´ o oo u a e a ¯ minta t´ mogatotts´ ga S-ben suppS (m) es az m ∈ M \ m t´ mogatotts´ ga S|m-ben suppS|m (m ), akkor a a ´ ¯ a a m + m t´ mogatotts´ ga is suppS|m (m ). A m´ dszer pszeudok´ dja az 5.6 abr´ n l´ that´ . a a o o ´ a a o A m´ dszer el˝ nye abban rejlik, hogy sz˝ r´ st, vet´t´ st es az egyelem˝ jel¨ ltek t´ mogatotts´ g´ t o o ue ıe ´ u o a a a hat´ konyan tudjuk megval´ s´tani. A hat´ konys´ g n¨ vel´ se erdek´ ben a vet´tett tranzakci´ k azonos e oı e a o e ´ e ı o elemeit csak egyszer t´ roljuk, altal´ ban egy fa-szer˝ strukt´ r´ ban. a ´ a u ua Az anti-monoton k´ nyszerek kezel´ se a mintan¨ vel˝ algoritmusok eset´ ben is egyszer˝ . Ne folye e o o e u tassuk a rekurzi´ t, ha a minta nem el´ g´t ki minden anti-monoton k´ nyszert. o e ı e Az egyes mintat´pusok eset´ ben ugy fogjuk megadni a n¨ vel´ s m˝ veletet, hogy tetsz˝ leges minta ı e ´ o e u o cs¨ kkent´ se a minta preﬁx´ t fogja adni. Ez azt eredm´ nyezi, hogy t¨ r¨ lhetj¨ k azt a mint´ t, amelyik o e e e oo u a nem el´ g´ti ki a preﬁx anti-monoton k´ nyszert, es le´ llhatunk a rekurzi´ val. Hasonl´ an az APRIORI e ı e ´ a o o es a Zaki m´ dszer´ hez itt sincs m´ d t¨ bb preﬁx anti-monoton k´ nyszer hat´ kony kezel´ s´ re. Az ´ o e o o e e ee algoritmus menet´ t ugyanis egy´ rtelm˝ en megadja a n¨ vel´ s m˝ velet, amit a preﬁx anti-monoton e e u o e u k´ nyszerben felhaszn´ lt teljes rendez´ s alapj´ n deﬁni´ lunk. e a e a a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE B : min supp : M : Kimenet: GY : ´tmeneti v´ltoz´k: A a o J1 : Bemenet:

96

bemeneti adat, t´mogatotts´gi k¨sz¨b, a a u o mintat´r, e gyakori mint´k, a egyelem} jel¨ltek, u o

J1 ← 1-elem} mint´k; u a t´mogatotts´g_meghat´roz´s( B, J1 ); a a a a GY1 ← gyakoriak_kiv´logat´sa( J1 , min supp ); a a ˜ ← sz}r´s(B); B u e forall gy ∈ GY 1 { ˜ ¯ GY ← Mintan¨vel} m´dszer(B|gy, min supp, M \ gy); o o o forall gy ∈ GY GY ← gy + gy ; } 5.6. abra. Mintan¨ vel˝ m´ dszer ´ o o o

5.5.4. K´ tl´ pcs˝ s technik´ k e e o a
A sz´ less´ gi bej´ r´ st megval´ s´t´ algoritmusok az adatb´ zist legal´ bb annyiszor olvass´ k v´ gig, e e aa o ıo a a a e amekkora a legnagyobb gyakori minta m´ rete. El˝ fordulhatnak olyan alkalmaz´ sok, amelyekn´ l az e o a e adatb´ zis el´ r´ se dr´ ga m˝ velet. Ilyenre lehet p´ lda, amikor az adatb´ zis egy elosztott h´ l´ zatban a ee a u e a ao tal´ lhat´ , vagy lass´ el´ r´ s˝ h´ tt´ rt´ rol´ n. a o u eeu a e a o A k´ tl´ pcs˝ s algoritmusok [146, 171] a teljes adatb´ zist legfeljebb k´ tszer olvass´ k v´ gig. I/O e e o a e a e tekintet´ ben teh´ t legy˝ zik p´ ld´ ul az APRIORI algoritmust, azonban olyan fut´ si k¨ rnyezetben, ahol e a o e a a o a fut´ si id˝ t nem szinte kiz´ r´ lag az I/O m˝ veletek hat´ rozz´ k meg (ha a bemenet elf´ r a mem´ ri´ ban a o ao u a a e o a akkor ez a helyzet all fenn), az APRIORI algoritmus gyorsabban ad eredm´ nyt. ´ e Naiv mintav´ telez˝ algoritmus e o Olvassuk be a teljes bemenet egy r´ sz´ t a mem´ ri´ ba (a r´ sz nagys´ g´ ra n´ zve l´ sd 75.oldal). Erre e e o a e a a e a a u o a kis r´ szre futtassuk le az APRIORI algoritmust az eredeti min f req gyakoris´ gi k¨ sz¨ bbel. A kis e r´ szben megtal´ lt gyakori mint´ k lesznek a jel¨ ltek a m´ sodik f´ zisban, amelynek sor´ n a jel¨ ltek e a a o a a a o t´ mogatotts´ g´ t a teljes adatb´ zisban meghat´ rozzuk. Ez´ ltal ki tudjuk sz˝ rni azokat a mint´ kat, a a a a a a u a amelyek ritk´ k, de a kis r´ szben gyakoriak. El˝ fordulhat azonban a ford´tott helyzet, azaz a kis a e o ı adatb´ zisban egy minta ritka, viszont glob´ lisan gyakori, teh´ t nem ker¨ l a jel¨ ltek k¨ z´ , es ´gy a a a u o o e ´ ı nem is tal´ lhatjuk azt gyakorinak. Jav´thatunk a helyzeten, ha cs¨ kkentj¨ k a kis r´ szben a gyakoa ı o u e ris´ gi k¨ sz¨ b¨ t, amivel n¨ velj¨ k a jel¨ ltek sz´ m´ t, de cs¨ kkentj¨ k annak vesz´ ly´ t, hogy egy gyakori a u o o o u o a a o u e e mint´ t ritk´ nak tal´ lunk. a a a Ennek az egyszer˝ algoritmusnak k´ t h´ tr´ nya van. Egyr´ szt nem ad arra garanci´ t, hogy minden u e a a e a gyakori mint´ t megtal´ lunk (azaz nem teljes), m´ sr´ szt a gyakoris´ gi korl´ t cs¨ kkent´ se miatt a hamis a a a e a a o e jel¨ ltek sz´ ma t´ lzottan nagy lehet. A fenti k´ t probl´ m´ t k¨ sz¨ b¨ li ki a part´ci´ s, illetve a Toivoneno a u e e a u o o ı o

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

97

f´ le algoritmus. e Mivel a k´ tl´ pcs˝ s algoritmusok egy kis r´ sz kiv´ laszt´ s´ n alapulnak, ´gy nagyon erz´ kenyek az e e o e a aa ı ´ e adatb´ zis homogenit´ s´ ra. Gondoljunk itt a szezon´ lis elemekre, amelyek lok´ lisan gyakoriak, de a aa a a glob´ lisan ritk´ k. P´ ld´ ul a keszty˝ k elad´ sa t´ l elej´ n nagy, de m´ gis a keszty˝ onmag´ ban ritka a a e a u a e e e u ¨ a elem. Amennyiben a kis r´ sz kiv´ laszt´ sa a bemenet egy v´ letlen pontj´ r´ l t¨ rt´ n˝ szekvenci´ lis e a a e ao o e o a olvas´ st jelentene, akkor az nagy es´ llyel sok hamis es hi´ nyz´ jel¨ ltet eredm´ nyezne. a e ´ a o o e Part´ci´ s algoritmus ı o A part´ci´ s algoritmus [146] k´ tszer olvassa v´ gig a teljes adatb´ zist. P´ ronk´ nt diszjunkt r´ szekre ı o e e a a e e osztja a bemenetet (S = S1 , S2 . . . , Sr ), majd az egyes r´ szekre megh´vja az APRIORI algoritmust, e ı ami megadja az egyes r´ szekben gyakori mint´ kat (h´vjuk oket lok´ lisan gyakori mint´ knak). A e a ı ˝ a a m´ sodik v´ gigolvas´ sn´ l egy minta akkor lesz jel¨ lt, ha valamelyik r´ szben gyakori volt. K¨ nnyen a e a a o e o l´ that´ , hogy az algoritmus teljes, hiszen egy gyakori mint´ nak legal´ bb egy r´ szben gyakorinak kell a o a a e lennie, es ezt az APRIORI ki fogja sz˝ rni (mivel az APRIORI is teljes). ´ u K´ rd´ s, hogy h´ ny r´ szre osszuk a teljes adatb´ zist. Nyilv´ nval´ , hogy min´ l nagyobb az egyes e e a e a a o e r´ szhalmazok m´ rete, ann´ l jobb k´ pet ad a teljes adatb´ zisr´ l, teh´ t ann´ l kevesebb lesz a hamis e e a e a o a a jel¨ lt. A r´ szek nagy m´ rete azonban azt eredm´ nyezi, hogy azok nem f´ rnek el a mem´ ri´ ban, es o e e e e o a ´ ´gy az APRIORI algoritmus sok id˝ t t¨ lt el part´ci´ r´ szek ideiglenes h´ tt´ rbe m´ sol´ s´ val es visszaolı o o ı oe a e a aa ´ vas´ s´ val. Hab´ r glob´ lisan csak k´ tszer olvassuk v´ gig a teljes adatb´ zist, azonban az egyes part´ci´ k aa a a e e a ı o I/O ig´ ny´ nek osszege legal´ bb akkora, mintha a teljes adatb´ zisra futtatn´ nk le az APRIORI algorite e ¨ a a a must. V´ geredm´ nyben a m´ sodik v´ gigolvas´ s miatt a part´ci´ s algoritmus I/O ig´ nye nagyobb lesz, e e a e a ı o e mint az APRORI algoritmus´ . e Ha az egyes r´ szek elf´ rnek a mem´ ri´ ban, akkor nem l´ p fel a fenti probl´ ma, hisz az APRIORI e e o a e e algoritmus nem fog I/O m˝ veletet ig´ nyelni (felt´ ve, ha a jel¨ ltek a sz´ ml´ l´ ikkal egy¨ tt is elf´ rnek u e e o a ao u e m´ g a mem´ ri´ ban). T´ l kis m´ ret v´ laszt´ sa azonban azt eredm´ nyezheti, hogy a part´ci´ nem ad h˝ e o a u e a a e ı o u k´ pet a teljes adatb´ zisr´ l, ´gy a lok´ lis gyakori mint´ k m´ sok (is !) lesznek, mint a glob´ lis gyakori e a o ı a a a a mint´ k, ami t´ l sok hamis jel¨ ltet eredm´ nyezhet. a u o e A helyes part´ci´ m´ ret teh´ t a rendelkez´ s¨ nkre all´ mem´ ri´ t´ l f¨ gg. Legyen min´ l nagyobb, de ı o e a eu ´ o o ao u e ugy, hogy a jel¨ ltek sz´ ml´ l´ ikkal egy¨ tt is elf´ rjenek a mem´ ri´ ban. Term´ szetesen a jel¨ ltek sz´ ma ´ o a ao u e o a e o a a gyakori mint´ k m´ ret´ t˝ l f¨ gg, amir˝ l a part´ci´ m´ ret meghat´ roz´ sakor m´ g nincs pontos k´ p¨ nk. a e eo u o ı o e a a e e u A part´ci´ s algoritmus szint´ n erz´ keny a bemenet homogenit´ s´ ra. Ezt az erz´ kenys´ get ı o e ´ e aa ´ e e cs¨ kkenthetj¨ k, ha m´ dos´tjuk egy kicsit az algoritmust. Ha egy m minta gyakori az S i r´ szben, ako u o ı e kor a r´ k¨ vetkez˝ Si+1 , Si+2 , . . . Si+ r´ szekben is hat´ rozzuk meg a t´ mogatotts´ g´ t eg´ szen addig, a o o e a a a a e am´g f req∪i+ S j (m) ≥ min f req. Ha ezalatt eljutunk az utols´ r´ szig, akkor vegy¨ k fel m-et a m´ sodik ı o e u a j=i v´ gigolvas´ s jel¨ ltjei k¨ z´ . Ellenkez˝ esetben felejts¨ k el, hogy m gyakori volt ezen r´ szekben. Ha e a o o e o u e egy mint´ t az osszes r´ szben vizsg´ ltunk, akkor ezt szint´ n sz¨ ks´ gtelen felvenni jel¨ ltnek a m´ sodik a ¨ e a e u e o a v´ gigolvas´ sn´ l, hiszen t´ mogatotts´ ga megegyezik az egyes r´ szt´ mogatotts´ gok osszeg´ vel. e a a a a e a a ¨ e A part´ci´ s algoritmus tov´ bbi el˝ nye, hogy remek¨ l p´ rhuzamos´that´ . Saj´ t mem´ ri´ val rendelı o a o u a ı o a o a kez˝ feldolgoz´ egys´ gek v´ gezhetik az egyes r´ szek gyakori mintakeres´ s´ t, es ez´ ltal mind az els˝ , o o e e e ee ´ a o mind a m´ sodik f´ zis t¨ red´ k id˝ alatt elv´ gezhet˝ . a a o e o e o Toivonen algoritmusa Az na´v mintav´ telez˝ algoritmus nagy h´ tr´ nya, hogy m´ g cs¨ kkentett min f req mellett sem ı e o a a e o lehet¨ nk biztosak abban, hogy nem vesztett¨ nk el gyakori mint´ t. Toivonen algoritmusa [171] az u u a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

98

adatb´ zist egyszer olvassa v´ gig, es ha jelenti, hogy minden mint´ t megtal´ l, akkor bizony´that´ , hogy a e ´ a a ı o ez igaz. Az algoritmus nem m´ s, mint a na´v mintav´ telez˝ algoritmus tov´ bbfejlesztett v´ ltozata. Az a ı e o a a egyszer˝ algoritmusn´ l azonban t¨ bb inform´ ci´ t ad, ugyanis jelenti, ha biztos abban, hogy minden u a o a o gyakori mint´ t el˝ all´tott, es azt is jelenti, amikor lehets´ ges, hogy van hi´ nyz´ jel¨ lt (olyan gyaa o´ ı ´ e a o o kori minta, ami nem jel¨ lt, es ´gy nem tal´ lhatjuk azt gyakorinak). A lehets´ ges hi´ nyz´ jel¨ ltekr˝ l o ´ ı a e a o o o inform´ ci´ t is k¨ z¨ l. a o o o Alap¨ tlete az, hogy ne csak a kis r´ szben tal´ lhat´ gyakori mint´ k el˝ fordul´ s´ t sz´ moljuk ossze o e a o a o aa a ¨ a teljes adatb´ zisban, hanem azok minim´ lis val´ di fels˝ korl´ tait is. Mit jelent az, hogy az m mina a o o a ta tetsz˝ leges M ⊆ M mintahalmaz minim´ lis val´ di fels˝ korl´ tai k¨ z´ tartozik (jel¨ l´ sben m ∈ o a o o a o e oe ∈ MV FK(M)) ? El˝ sz¨ r is a val´ di fels˝ korl´ t form´ lisan : m o o o o a a m minden m ∈ M. A minimalit´ s a pedig azt jelenti, hogy nem l´ tezik olyan m minta, amely M-nek val´ di fels˝ korl´ tja es m e o o a ´ m. A gyakori mint´ k minim´ lis val´ di fels˝ korl´ tjai azok a ritka mint´ k, amelyek minden r´ szmint´ ja a a o o a a e a gyakori. P´ ld´ ul elemhalmaz t´pus´ minta eset´ n, ha M = 2{A,B,C,D,E,F} es M = e a ı u e ´ = {{A}, {B}, {C}, {F}, {A, B}, {A, C}, {A, F}, {C, F}, {A, C, F}}, akkor MV FK(M) = = {{B, C}, {B, F}, {D}, {E}}. Toivonen algoritmus´ ban a teljes adatb´ zisb´ l egy kis r´ szt vesz¨ nk. Ebben meghat´ rozzuk a a o e u a a gyakori mint´ k halmaz´ t es ennek minim´ lis val´ di fels˝ korl´ tj´ t. A teljes adatb´ zisban ezek a a ´ a o o a a a t´ mogatotts´ g´ t vizsg´ ljuk, es gy˝ jtj¨ k ki a glob´ lisan gyakoriakat. A k¨ vetkez˝ egyszer˝ t´ tel ad a a a a ´ u u a o o u e inform´ ci´ t arr´ l, hogy ez az algoritmus mikor teljes, azaz mikor lehet¨ nk biztosak abban, hogy mina o o u den gyakori mint´ t meghat´ roztunk. a a 5.19. t´ tel. Legyen S az S bemeneti sorozat egy r´ sze. Jel¨ lj¨ k GY -vel az S-ben, GY -vel az S e e o u ∗ -al azokat az S-ben gyakori mint´ kat, amelyek benne vannak GY ∪ ben gyakori mint´ kat es GY a a ´ ∗ = GY ∩ (GY ∪ MV FK(GY ))). Amennyiben ∪ MV FK(GY )-ben (GY GY ∗ ∪ MV FK(GY ∗ ) ⊆ GY ∪ MV FK(GY ) teljes¨ l, akkor S-ben a gyakori mint´ k halmaza pontosan a GY ∗ , teh´ t GY ∗ ≡ GY . u a a Bizony´t´ s: Indirekt tegy¨ k fel, hogy l´ tezik m ∈ GY , de m ∈ GY ∗ , es a felt´ tel teljes¨ l. A GY ∗ ıa u e ´ e u deﬁn´ci´ ja miatt ekkor m ∈ GY ∪ MV FK(GY ). Vizsg´ ljuk azt a legkisebb m´ ret˝ m ı o a e u m-t, amire m ∈ GY es m ∈ GY ∗ (ilyen m -nek kell lennie, ha m´ s nem, ez maga az m minta). Az m minima´ a lit´ s´ b´ l k¨ vetkezik, hogy minden val´ di r´ szmint´ ja eleme GY ∪MV FK(GY )-nek es gyakori. Ebb˝ l aa o o o e a ´ o k¨ vetkezik, hogy m minden r´ szmint´ ja eleme GY ∗ -nak, amib˝ l kapjuk, hogy m ∈ MV FK(GY ∗ ). Ez o e a o ellentmond´ st jelent, hiszen a felt´ telnek teljes¨ lnie kell, azonban van olyan elem (m ), amely eleme a e u a bal oldalnak, de nem eleme a jobb oldalnak.

Tetsz˝ leges GY halmaz eset´ n az MV FK(GY ) ∪ GY -t k¨ nny˝ el˝ all´tani. S˝ t, amennyiben a gyao e o u o´ ı o kori mint´ kat APRIORI algoritmussal hat´ rozzuk meg, akkor MV FK(GY ) elemei pontosan a ritka a a jel¨ ltek lesznek (hiszen a jel¨ lt minden r´ sze gyakori). o o e N´ zz¨ nk egy p´ ld´ t Toivonen algoritmus´ ra. Legyen a mintat´ r a {A,B,C,D} hatv´ nyhalmaza. A e u e a a e a kis r´ szben az {A},{B},{C} elemhalmazok gyakoriak. Ekkor a minim´ lis val´ di fels˝ korl´ t elemei e a o o a az {A,B},{A,C},{B,C},{D} halmazok. Teh´ t ennek a 7 elemhalmaznak fogjuk a t´ mogatotts´ g´ t a a a a meghat´ rozni a teljes adatb´ zisban. Ha p´ ld´ ul az {A},{B},{C} {A,B} halmazokat tal´ ljuk gyakoria a e a a nak a teljes adatb´ zisban, akkor a t´ telbeli tartalmaz´ si rel´ ci´ fenn´ ll, hiszen az {A},{B},{C},{A,B} a e a a o a

´ ´ 5. FEJEZET. GYAKORI MINTAK KINYERESE

99

halmaz minim´ lis val´ di fels˝ korl´ tai k¨ z¨ l mind szerepel a 7 jel¨ lt k¨ z¨ tt. Nem mondhat´ a o o a o u o o o o ez, ha {D}-r˝ l der¨ l ki, hogy gyakori. Ekkor Toivonen algoritmusa jelenti, hogy el˝ fordulhat, o u o hogy nem biztos, hogy minden gyakori elemhalmazt megtal´ lt. Az esetleg kimaradtak csak ( !) az a {A,D},{B,D},{C,D} halmazok lehetnek.

Tagadhatatlan, hogy a z´ rt mint´ kon alapul´ mem´ riacs¨ kkent´ s egy sz´ p elm´ leti eredm´ ny. Ne a a o o o e e e e foglaljunk helyet a mem´ ri´ ban a gyakori, nem z´ rt mint´ knak, hiszen a z´ rt, gyakori mint´ kb´ l az o a a a a a o osszes gyakori minta meghat´ rozhat´ . ¨ a o Ez a technika ritk´ n alkalmazhat´ azon esetekben, amikor a bemenet sorozat form´ j´ ban adott, a a o aa ´ mint azt m´ r eml´tett¨ k, a t´ mogatotts´ got pedig egy illeszked´ si predik´ tum alapj´ n deﬁni´ ljuk. Es, a a e a a a a ı u legt¨ bbsz¨ r ez all fenn. o o ´ Ennek oka, hogy gyakori mint´ kat altal´ ban nagy, zajokkal terhelt adatb´ zisokban keresnek. Ilyen a ´ a a adatb´ zisban szinte az osszes elemhalmaz z´ rt, ´gy a m´ dszerrel nem nyer¨ nk semmit. Gondoljuk a ¨ a ı o u meg, hogy ha egy adatb´ zist ugy terhel¨ nk zajjal, hogy v´ letlenszer˝ en besz´ runk egy-egy uj elemet, a ´ u e u u ´ akkor folyamatosan n¨ vekszik az es´ lye annak, hogy egy minta z´ rt lesz. A nemz´ rts´ g teh´ t egy o e a a a a s´ r¨ l´ keny” tulajdons´ g. Tetsz˝ leges nem z´ rt m mint´ t z´ rtt´ tehet¨ nk egyetlen olyan tranzakci´ eue a o a a a a u o ” hozz´ ad´ s´ val, amely illeszkedik m-re, de nem illeszkedik egyetlen olyan mint´ ra sem, amelynek m a aa a val´ di r´ szmint´ ja. o e a

5.5.5. A z´ rt mint´ k t¨ r´ kenys´ ge” a a o e e ”

5.5.6. Dinamikus gyakori mintab´ ny´ szat a a
Nagy adatb´ zisok eset´ n a gyakori mint´ k kinyer´ se m´ g a leggyorsabb algoritmusokat fela e a e e haszn´ lva is lass´ m˝ velet. Az adatb´ zisok t¨ bbs´ g´ ben a t´ rolt adatok nem alland´ ak, hanem a u u a o e e a ´ o v´ ltoznak : uj elemeket vesz¨ nk fel, egyeseket m´ dos´tunk, vagy t¨ rl¨ nk. Ha azt szeretn´ nk, hogy a ´ u o ı o u e a kinyert gyakori mint´ k konzisztensek legyenek az adatb´ zisban t´ rolt adatokkal, akkor bizonyos a a a id˝ k¨ z¨ nk´ nt a gyakori mint´ k adatb´ zis´ t is friss´teni kell. o o o e a a a ı A konzisztenci´ t el´ rhetj¨ k ugy, hogy lefuttatjuk valamelyik ismert (APRIORI, Zaki stb.) algorita e u ´ must minden m´ dos´t´ s ut´ n. Ennek az a h´ tr´ nya, hogy lass´ , hiszen semmilyen eddig kinyert tud´ st o ıa a a a u a nem haszn´ l fel. Sz¨ ks´ g van teh´ t olyan algoritmusok kifejleszt´ s´ re [13, 35, 36, 124, 145, 166], ami a u e a ee felhaszn´ lja az adatb´ zis el˝ z˝ allapot´ ra vonatkoz´ inform´ ci´ kat es ´gy gyorsabban ad eredm´ nyt, a a o o´ a o a o ´ ı e mint egy null´ r´ l indul´ , hagyom´ nyos algoritmus. ao o a Itt most azt az esetet n´ zz¨ k, amikor csak b˝ v´thetj¨ k a bemenetet, de a le´rt m´ dszerek k¨ nnyen e u o ı u ı o o altal´ nos´that´ k arra az esetre, amikor t¨ r¨ lhet¨ nk is a bemenetb˝ l. Adott teh´ t S bemeneti soro´ a ı o oo u o a zat, amelyben ismerj¨ k a gyakori mint´ kat (GY S ) es azok t´ mogatotts´ g´ t. Ezen k´v¨ l adott az uj u a ´ a a a ı u ´ S,S ) es azok bemeneti elemek sorozata S . A feladat a S, S -ben tal´ lhat´ gyakori mint´ k (GY a o a ´ t´ mogatotts´ g´ nak meghat´ roz´ sa. a a a a a FUP algoritmus A FUP (Fast Update) [35] a legegyszer˝ bb szab´ ly- karbantart´ algoritmus. Tulajdonk´ ppen nem u a o e m´ s, mint az APRIORI algoritmus m´ dos´t´ sa. a o ıa K´ tf´ le jel¨ ltet k¨ l¨ nb¨ ztet¨ nk meg : az els˝ csoportba azok a mint´ k tartoznak, melyek az e e o uo o u o a eredeti adatb´ zisban gyakoriak voltak, a m´ sodikba azok, amelyek nem. Nyilv´ nval´ , hogy az uj a a a o ´


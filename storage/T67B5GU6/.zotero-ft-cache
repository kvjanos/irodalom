Advanced Data Mining Technologies in Bioinformatics
Hui-Huang Hsu Tamkang University, Taipei, Taiwan

IDEA GROUP PUBLISHING
Hershey • London • Melbourne • Singapore

Acquisitions Editor: Development Editor: Senior Managing Editor: Managing Editor: Copy Editor: Typesetter: Cover Design: Printed at:

Michelle Potter Kristin Roth Amanda Appicello Jennifer Neidig Nicole Dean Marko Primorac Lisa Tosheff Integrated Book Technology

Published in the United States of America by Idea Group Publishing (an imprint of Idea Group Inc.) 701 E. Chocolate Avenue Hershey PA 17033 Tel: 717-533-8845 Fax: 717-533-8661 E-mail: cust@idea-group.com Web site: http://www.idea-group.com and in the United Kingdom by Idea Group Publishing (an imprint of Idea Group Inc.) 3 Henrietta Street Covent Garden London WC2E 8LU Tel: 44 20 7240 0856 Fax: 44 20 7379 0609 Web site: http://www.eurospanonline.com Copyright © 2006 by Idea Group Inc. All rights reserved. No part of this book may be reproduced, stored or distributed in any form or by any means, electronic or mechanical, including photocopying, without written permission from the publisher. Product or company names used in this book are for identification purposes only. Inclusion of the names of the products or companies does not indicate a claim of ownership by IGI of the trademark or registered trademark. Library of Congress Cataloging-in-Publication Data Advanced data mining technologies in bioinformatics / Hui-Hwang Hsu, editor. p. cm. Summary: "This book covers research topics of data mining on bioinformatics presenting the basics and problems of bioinformatics and applications of data mining technologies pertaining to the field"--Provided by publisher. Includes bibliographical references and index. ISBN 1-59140-863-6 (hardcover) -- ISBN 1-59140-864-4 (softcover) -- ISBN 1-59140-865-2 (ebook) 1. Bioinformatics. 2. Data mining. I. Hsu, Hui-Huang, 1965QH324.2.A38 2006 572.8'0285--dc22 2006003556 British Cataloguing in Publication Data A Cataloguing in Publication record for this book is available from the British Library. All work contributed to this book is new, previously-unpublished material. The views expressed in this book are those of the authors, but not necessarily of the publisher.

Advanced Data Mining Technologies in Bioinformatics Table of Contents

Preface .......................................................................................................................... vi

Chapter I Introduction to Data Mining in Bioinformatics .............................................................1 Hui-Huang Hsu, Tamkang University, Taipei, Taiwan Chapter II Hierarchical Profiling, Scoring and Applications in Bioinformatics ........................ 13 Li Liao, University of Delaware, USA Chapter III Combinatorial Fusion Analysis: Methods and Practices of Combining Multiple Scoring Systems ......................................................................................................... 32 D. Frank Hsu, Fordham University, USA Yun-Sheng Chung, National Tsing Hua University, Taiwan Bruce S. Kristal, Burke Medical Research Institute and weill Medical College of Cornell University, USA Chapter IV DNA Sequence Visualization ...................................................................................... 63 Hsuan T. Chang, National Yunlin University of Science and Technology, Taiwan

Chapter V Proteomics with Mass Spectrometry .......................................................................... 85 Simon Lin, Northwestern University, USA Salvatore Mungal, Duke University Medical Center , USA Richard Haney, Duke University Medical Center , USA Edward F. Patz, Jr., Duke University Medical Center , USA Patrick McConnell, Duke University Medical Center, USA Chapter VI Efficient and Robust Analysis of Large Phylogenetic Datasets ............................... 104 Sven Rahmann, Bielefeld University, Germany Tobias Müller, University of Würzburg, Germany Thomas Dandekar, University of Würzburg, Germany Matthias Wolf, University of Würzburg, Germany Chapter VII Algorithmic Aspects of Protein Threading .............................................................. 118 Tatsuya Akutsu, Kyoto University, Japan Chapter VIII Pattern Differentiations and Formulations for Heterogeneous Genomic Data through Hybrid Approaches ...................................................................................... 136 Arpad Kelemen, The State University of New York at Buffalo, USA & Niagra University, USA Yulan Liang, The State University of New York at Buffalo, USA Chapter IX Parameterless Clustering Techniques for Gene Expression Analysis ................... 155 Vincent S. Tseng, National Cheng Kung University, Taiwan Ching-Pin Kao, National Cheng Kung University, Taiwan Chapter X Joint Discriminatory Gene Selection for Molecular Classification of Cancer ....... 174 Junying Zhang, Xidian University, China Chapter XI A Haplotype Analysis System for Genes Discovery of Common Diseases .............. 214 Takashi Kido, HuBit Genomix, Inc., Japan Chapter XII A Bayesian Framework for Improving Clustering Accuracy of Protein Sequences Based on Association Rules ................................................................... 231 Peng-Yeng Yin, National Chi Nan University, Taiwan Shyong-Jian Shyu, Ming Chuan University, Taiwan Guan-Shieng Huang, National Chi Nan University, Taiwan Shuang-Te Liao, Ming Chuan University, Taiwan

vii

Chapter XIII In Silico Recognition of Protein-Protein Interactions: Theory and Applications .... 248 Byung-Hoon Park, Oak Ridge National Laboratory, USA Phuongan Dam, University of Georgia, USA Chongle Pan, University of Tennessee, USA Ying Xu, University of Georgia, USA Al Geist, Oak Ridge National Laboratory, USA Grant Heffelfinger, Sandia National Laboratories, USA Nagiza F. Samatova, Oak Ridge National Laboratory, USA Chapter XIV Differntial Association Rules: Understanding Annotations in Protein Interaction Networks ................................................................................................................... 269 Christopher Besemann, North Dakota State University, USA Anne Denton, North Dakota State University, USA Ajay Yekkirala, North Dakota State University, USA Ron Hutchison, The Richard Stockton College of New Jersey, USA Marc Anderson, North Dakota State University, USA Chapter XV Mining BioLiterature: Toward Automatic Annotation of Genes and Proteins ........ 283 Francisco M. Couto, Universidade de Lisboa, Portugal Mário J. Silva, Universidade de Lisboa, Portugal Chapter XVI Comparative Genome Annotation Systems ............................................................... 296 Kwangmin Choi, Indiana University, USA Sun Kim, Indiana University, USA About the Authors ..................................................................................................... 314 Index ........................................................................................................................ 324

vi

Preface

Bioinformatics is the science of managing, analyzing, extracting, and interpreting information from biological sequences and molecules. It has been an active research area since late 1980’s. After the human genome project was completed in April 2003, this area has drawn even more attention. With more genome sequencing projects undertaken, data in the field such as DNA sequences, protein sequences, and protein structures are exponentially growing. Facing this huge amount of data, the biologist cannot simply use the traditional techniques in biology to analyze the data. In order to understand the mystery of life, instead, information technologies are needed. There are a lot of online databases and analysis tools for bioinformatics on the World Wide Web. Information technologies have made a tremendous contribution to the field. The database technology helps collect and annotate the data. And the retrieval of the data is made easy. The networking and Web technology facilitates data and information sharing and distribution. The visualization technology allows us to investigate the RNA and protein structures more easily. As for the analysis of the data, online sequence alignment tools are quite mature and ready for use all the time. But to conquer more complicated tasks such as microarray data analysis, protein-protein interaction, gene mapping, biochemical pathways, and systems biology, sophisticated techniques are needed. Data mining is defined as uncovering meaningful, previously unknown information from a mass of data. It is an emerging field since mid 1990’s boosted by the flood of data on the Internet. It combines traditional databases, statistics, and machine learning technologies under the same goal. Computer algorithms are also important in speeding up the process while dealing with a large amount of data. State-of-the-art techniques in data mining are, for example, information retrieval, data warehousing, Bayesian learning, hidden Markov model, neural networks, fuzzy logic, genetic algorithms, and support vector machines. Generally, data mining techniques deal with three major problems, i.e., classification, clustering, and association. In analyzing biological data, these three kinds of problems can be seen quite often. The technologies in data mining have been applied to bioinformatics research in the past few years with quite a success. But

vii

more research in this field is necessary since a lot of tasks are still undergoing. Furthermore, while tremendous progress has been made over the years, many of the fundamental problems in bioinformatics are still open. Data mining will play a fundamental role in understanding the emerging problems in genomics and proteomics. This book wishes to cover advanced data mining technologies in solving such problems. The audiences of this book are senior or graduate students majoring in computer science, computer engineering, or management information system (MIS) with interests in data mining and applications to bioinformatics. Professional instructors and researchers will also find that the book is very helpful. Readers can benefit from this book in understanding basics and problems of bioinformatics, as well as the applications of data mining technologies in tackling the problems and the essential research topics in the field. The uniqueness of this book is that it covers important bioinformatics research topics with applications of data mining technologies on them. It includes a few advanced data mining technologies. Actually, in order to solve bioinformatics problems, there is plenty of room for improvement in data mining technologies. This book covers basic concepts of data mining and technologies from data preprocessing like hierarchical profiling, information fusion, sequence visualization, and data management, to data mining algorithms for a variety of bioinformatics problems like phylogenetics, protein threading, gene discovery, protein sequence clustering, protein-protein interaction, protein interaction networks, and gene annotations. The summaries of all chapters of the book are as follows. Chapter I introduces the concept and the process of data mining, plus its relationship with bioinformatics. Tasks and techniques of data mining are also presented. At the end, selected bioinformatics problems related to data mining are discussed. It provides an overview on data mining in bioinformatics. Chapter II reviews the recent developments related to hierarchical profiling where the attributes are not independent, but rather are correlated in a hierarchy. It discusses in detail several clustering and classification methods where hierarchical correlations are tackled with effective and efficient ways, by incorporation of domain specific knowledge. Relations to other statistical learning methods and more potential applications are also discussed. Chapter III presents a method, called Combinatorial Fusion Analysis (CFA), for analyzing combination and fusion of multiple scoring systems. Both rank combination and score combination are explored as to their combinatorial complexity and computational efficiency. Information derived from the scoring characteristics of each scoring system is used to perform system selection and to decide method combination. Various applications of the framework are illustrated using examples in information retrieval and biomedical informatics. Chapter IV introduces various visualization (i.e., graphical representation) schemes of symbolic DNA sequences, which are basically represented by character strings in conventional sequence databases. Further potential applications based on the visualized sequences are also discussed. By understanding the visualization process, the researchers will be able to analyze DNA sequences by designing signal processing algorithms for specific purposes such as sequence alignment, feature extraction, and sequence clustering.

viii

Chapter V provides a rudimentary review of the field of proteomics as it applies to mass spectrometry, data handling and analysis. It points out the potential significance of the field suggesting that the study of nuclei acids has its limitations and that the progressive field of proteomics with spectrometry in tandem with transcription studies could potentially elucidate the link between RNA transcription and concomitant protein expression. Furthermore, the chapter describes the fundamentals of proteomics with mass spectrometry and expounds the methodology necessary to manage the vast amounts of data generated in order to facilitate statistical analysis. Chapter VI considers the prominent problem of reconstructing the basal phylogenetic tree topology when several subclades have already been identified or are well-known by other means, such as morphological characteristics. Whereas most available tools attempt to estimate a fully resolved tree from scratch, the profile neighbor-joining (PNJ) method focuses directly on the mentioned problem and has proven a robust and efficient method for large-scale data sets, especially when used in an iterative way. The chapter also describes an implementation of this idea, the ProfDist software package, and applies the method to estimate the phylogeny of the eukaryotes. Chapter VII provides an overview of computational problems and techniques for protein threading. Protein threading can be modeled as an optimization problem. This chapter explains the ideas employed in various algorithms developed for finding optimal or near optimal solutions. It also gives brief explanations of related problems: protein threading with constraints, comparison of RNA secondary structures, and protein structure alignment. Chapter VIII introduces hybrid methods to tackle the major challenges of power and reproducibility of the dynamic differential gene temporal patterns. Hybrid clustering methods are developed based on resulting profiles from several clustering methods. The developed hybrid analysis is demonstrated through an application to a time course gene expression data from interferon-β-1a treated multiple sclerosis patients. The resulting integrated-condensed clusters and overrepresented gene lists demonstrate that the hybrid methods can successfully be applied. Chapter IX discusses the issue of parameterless clustering technique for gene expression analysis. Two novel, parameterless and efficient clustering methods that fit for analysis of gene expression data are introduced. The unique feature of the methods is that they incorporate the validation techniques into the clustering process so that high quality results can be obtained. Through experimental evaluation, these methods are shown to outperform other clustering methods greatly in terms of clustering quality, efficiency, and automation on both of synthetic and real data sets. Chapter X introduces gene selection approaches in microarray data analysis for two purposes: cancer classification and tissue heterogeneity correction. In the first part, jointly discriminatory genes which are most responsible to classification of tissue samples for diagnosis are searched for. In the second part, tissue heterogeneity correction techniques are studied. Also, non-negative matrix factorization (NMF) is employed to computationally decompose molecular signatures based on the fact that the expression values in microarray profiling are non-negative. Throughout the chapter, a real world gene expression profile data was used for experiments. Chapter XI introduces computational methods for detecting complex disease loci with haplotype analysis. It argues that the haplotype analysis, which plays a major role in

ix

the study of population genetics, can be computationally modeled and systematically implemented as a means for detecting causative genes of complex diseases. The explanation of the system and some real examples of the haplotype analysis not only provide researchers with better understanding of current theory and practice of genetic association studies, but also present a computational perspective on the gene discovery research for the common diseases. Chapter XII presents a Bayesian framework for improving clustering accuracy of protein sequences based on association rules. Most of the existing protein-clustering algorithms compute the similarity between proteins based on one-to-one pairwise sequence alignment instead of multiple sequences alignment. Furthermore, the traditional clustering methods are ad-hoc and the resulting clustering often converges to local optima. The experimental results manifest that the introduced framework can significantly improve the performance of traditional clustering methods. Chapter XIII reviews high-throughput experimental methods for identification of protein-protein interactions, existing databases of protein-protein interactions, computational approaches to predicting protein-protein interactions at both residue and protein levels, various statistical and machine learning techniques to model protein-protein interactions, and applications of protein-protein interactions in predicting protein functions. Intrinsic drawbacks of the existing approaches and future research directions are also discussed. Chapter XIV discusses the use of differential association rules to study the annotations of proteins in one or more interaction networks. Using this technique, the differences in the annotations of interacting proteins in a network can be found. The concept is extended to compare annotations of interacting proteins across different definitions of interaction networks. Both cases reveal instances of rules that explain known and unknown characteristics of the network(s). By taking advantage of such data mining techniques, a large number of interesting patterns can be effectively explored that otherwise would not be. Chapter XV introduces the use of Text Mining in scientific literature for biological research, with a special focus on automatic gene and protein annotation. The chapter describes the main approaches adopted and analyzes systems that have been developed for automatically annotating genes or proteins. To illustrate how text-mining tools fit in biological databases curation processes, the chapter also presents a tool that assists protein annotation. At last, it presents the main open problems in using textmining tools for automatic annotation of genes and proteins. Chapter XVI surveys systems that can be used for annotating genomes by comparing multiple genomes and discusses important issues in designing genome comparison systems such as extensibility, scalability, reconfigurability, flexibility, usability, and data mining functionality. Further issues in developing genome comparison systems where users can perform genome comparison flexibly on the sequence analysis level are also discussed.

x

Acknowledgments

I would like to thank all the authors for contributing their thoughts and research results to this book. Without their contributions, this book would not be possible. They are all experts of data mining in bioinformatics. I did learn a lot from them. Further thanks go to the authors who also served as a reviewer for other chapters. Their comments and suggestions are really valuable in improving the manuscripts. Next, I would like to acknowledge the efforts of the staffs at Idea Group Inc. Special thanks go to Renee Davies for inviting me to initiate this project, Dr. Mehdi KhosrowPour for reviewing and approving the project, Jan Travers for supervising the production of the book, and Kristin Roth for coordinating the production of the book. Kristin helped me a lot in answering authors’ questions and providing me needed documents and solutions. She made the whole process much easier for me. I am also grateful to two of my colleagues at Tamkang University. Prof. Timothy K. Shih is a senior professor of computer science and information engineering and a long time friend of mine. Thanks to his encouragement on the initiation of this project. I appreciate his help and friendship throughout the years. Prof. Chien-Chung Cheng of chemistry and life science has been helping me understand biological problems. Cooperation with him in the past two years has been a great pleasure. Finally, I would like to express my appreciations to my wife Maggie. Without her support and patience, this work would not have been done smoothly. Hui-Huang Hsu, PhD Tamsui, Taipei, Taiwan December 2005

Introduction to Data Mining in Bioinformatics 1

Chapter I

Introduction to Data Mining in Bioinformatics
Hui-Huang Hsu, Tamkang University, Taipei, Taiwan

Abstract
Bioinformatics uses information technologies to facilitate the discovery of new knowledge in molecular biology. Among the information technologies, data mining is the core. This chapter first introduces the concept and the process of data mining, plus its relationship with bioinformatics. Tasks and techniques of data mining are then presented. At the end, selected bioinformatics problems related to data mining are discussed. Data mining aims at uncovering knowledge from a large amount of data. In molecular biology, advanced biotechnologies enable the generation of new data in a much faster pace. Data mining can assist the biologist in finding new knowledge from piles of biological data at the molecular level. This chapter provides an overview on the topic.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

2 Hsu

Introduction
Progress of information technologies has made the storage and distribution of data much easier in the past two decades. Huge amounts of data have been accumulated at a very fast pace. However, pure data are sometimes not-that-useful and meaningful because what people want is the knowledge/information hidden in the data. Knowledge/information can be seen as the patterns or characteristics of the data. It is much more valuable than data. Thus, a new technology field has emerged in the mid 1990’s to deal with the discovery of knowledge/information from data. It is called knowledge discovery in databases (KDD) or simply data mining (DM) (Chen et al., 1996; Fayyad et al., 1996). Although knowledge and information can sometimes be distinguished, we will treat them as the same term in this chapter. Data pile up like a mountain. But most of them are not that useful, just like earths and rocks in a mountain. The valuables are metals like gold, iron, or diamond. Just like the miner wants to dig out the valuables from the earth and rock, the data miner uncovers useful knowledge/information by processing a large amount of data. Formal definitions of KDD and DM have been given in different ways. Here are three examples: “Knowledge discovery in databases is the nontrivial process of identifying valid, novel, potentially useful, and ultimately understandable patterns in data” (Fayyad, 1996, p. 20). And, “Data mining is the process of extracting valid, previously unknown, comprehensible, and actionable information from large databases and using it to make crucial business decisions” (Simoudis, 1996, p. 26). Or, to be simpler, “data mining is finding hidden information in a database” (Dunhum, 2003, p. 3). Uncovering hidden information is the goal of data mining. But, the uncovered information must be: 1. 2. 3. 4. New: Common sense or known facts are not what is searched for. Correct: Inappropriate selection or representation of data will lead to incorrect results. The mined information needs to be carefully verified by domain experts. Meaningful: The mined information should mean something and can be easily understood. Applicable: The mined information should be able to be utilized in a certain problem domain.

Also, in Simoudis (1996), crucial business decision making is emphasized. That is because the cost of data mining is high and was first applied in business problems, e.g., customer relationship management, personalized advertising, and credit card fraud detection. There is actually a slight difference between KDD and DM. Data mining is the algorithm/ method used to find information from the data. Meanwhile, KDD is the whole process including data collection, data preprocessing, data mining, and information interpretation. So DM is the core of KDD. However, data preprocessing and information interpretation are also very important. Without proper preprocessing, the quality of data might be too bad to find meaningful information. Also, without correct interpretation, the mined information might be mistakenly used. Thus, the cooperation between data mining

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Introduction to Data Mining in Bioinformatics 3

technicians and problem domain experts is very much needed when a data mining task is performed. In real life, the terms KDD and DM are used interchangeably. Data mining is more frequently referred to because it is shorter and easier to comprehend. With the goal of uncovering information from data, data mining uses technologies from different computer and information science fields. The three major ones are databases, machine learning, and statistics. Database technology manages data for convenient selection of the data. Machine learning technology learns information or patterns from data in an automatic way, and statistics finds characteristics or statistical parameters of the data. Besides, information retrieval deals with selecting related documents by keywords. It is more related to text processing and mining. Also, algorithms and parallel processing are essential in data mining for a large amount of data. They speed up the search for useful information. But they will not be discussed in this chapter. Interested readers are referred to books of those two topics in computer science. With the advent of high-throughput biotechnologies, biological data like DNA, RNA, and protein data are generated faster than ever. Huge amounts of data are being produced and collected. The biologist needs information technology to help manage and analyze such large and complex data sets. Database and Web technologies are used to build plenty of online data banks for data storage and sharing. Most of the data collected have been put on the World Wide Web and can be shared and accessed online. For example, GenBank (http://www.ncbi.nlm.nih.gov/Genbank/), EMBL Nucleotide Sequence Database (http://www.ebi.ac.uk/embl/), and Protein Data Bank (PDB) (http://www.rcsb.org/ pdb/). To know the updated numbers of complete genomes, nucleotides, and protein coding sequences, the reader can check the Genome Reviews of EMBL-EBI (http:// www.ebi.ac.uk/GenomeReviews/stats/). The reader is also referred to Protein Data Bank for the number of known protein structures. As for the analysis of the data, data mining technologies can be utilized. The mystery of life hidden in the biological data might be decoded much faster and more accurately with the data mining technologies. In the following, what kind of problems data mining can deal with, both in general and specifically in bioinformatics, are introduced. Some classical techniques of data mining are also presented.

Data Mining Process
This section gives an overview of the whole process of data mining. As emphasized in the introduction section, data mining methods is the core of the process, but other phases of the process are also very important. Each phase of data mining needs interaction with human experts because the objective is usually inexact. This might be time-consuming, but will ensure that the mined information is accurate and useful. The process consists of four phases: data collection, data preprocessing, data mining, and information interpretation. Throughout the process, visualization also plays an important role. Next, further explanations of each phase and visualization issues are presented.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

4 Hsu

Figure 1. KDD process
Data Collection Attributes Selection Data Preprocessing Outlier Removal & Transformation Data Mining Algorithms & Model Information Interpretation Expert Evaluation & Applications

Visualization/Graphical Representation

•

Data collection: Data is the raw material for mining information. Only with proper data can useful information be mined. Domain experts are needed for the selection of data for certain problems. So after raw data of a certain problem are collected, those fields/attributes directly related to the target information are selected. Data preprocessing: After data are carefully selected, preprocessing is needed. That would include removal of erroneous data and transformation of data. Erroneous data, or so called outliers in statistics, should be detected and deleted. Otherwise, they would result in incorrect results. Also, transformation of data to a suitable representation is needed. For example, data can be encoded into a vector representation. Also, data can be transformed from a high dimensional space to a lower dimension to find more important features and to reduce the data mining effort at the next phase. Data mining: This phase usually involves building a model for the data. Different algorithms and techniques can be used here. However, for a certain task, suitable techniques should be chosen. The characteristics of different tasks and the stateof-the-art techniques for those tasks will be presented in the next two sections. Information interpretation: First, the mined information needs to be interpreted by human experts. The interpreted results are then evaluated by their novelty, correctness, comprehensibility, and usefulness. Only the information passing through this filtering process can be used in real applications. Visualization: Visualization technology demonstrates the data or the mined information in graphics to let the user (miner) more easily capture the patterns residing in the data or information. It can be used throughout the data mining process incorporating with data preprocessing, data mining, and information interpretation. This is very important for the presentation of data and information to the user because it enhances the comprehensibility and thus the usefulness. Readers interested in information visualization are referred to the book edited by Fayyad et al. (2002).

•

•

•

•

It should be noticed that data mining is costly. Therefore, besides going through the above mentioned steps with care, an estimate of the data mining project in advance is necessary. Although certain degree of uncertainty is always involved in a data mining project, with the cooperation of the data mining expert and the domain expert, better

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Introduction to Data Mining in Bioinformatics 5

understanding of the problem with a clearer objective can be achieved. This increases the possibility of success of the data mining project.

Data Mining Tasks
Typical tasks of data mining are discussed in this section. The list might not be complete. We can say that any form of interesting pattern or information that can be discovered from the data can formulate a specific data mining task. But, of course, some of them might overlap with others. In the following, four major data mining tasks, namely, classification, clustering, association, and summarization, are presented with examples. Text mining handles textual data. It is not a unique task comparable with the four tasks. However, text mining is included and discussed in this section because it is essential in mining information from the huge biological/medical literature.

Classification
Classification decides the class/group for each data sample. There should be at least two classes and the classes are predefined. The input of a classification model is the attributes of a data sample and the output is the class that data sample belongs to. In machine learning, it takes supervised learning to build such a model. That is, a set of data with known classes (training data) is needed to estimate the parameters of the classification model. After the parameters are set, the model can be used to automatically classify any new data samples. For example, iris species can be classified based on their measurement. The input attributes are petal length, petal width, sepal length, and sepal width. The output classes are setosa, versicolor, and verginica. Prediction is also a type of classification. To predict if it will rain tomorrow, it is like classifying the weather into two classes: Raining and Not Raining. Furthermore, to predict the value of a stock would be a classification of “many” classes within a certain range (possible values). In statistics, regression is a way to build a predictive model with a polynomial. Prediction is often applied to time series analysis. From the previously known patterns of change, future trends can be decided. Another kind of classification is deviation analysis. It is for the detection of “significant” change. So there are two classes for such analysis: Significant change and Insignificant change. Credit card fraud detection is a case of deviation detection. When the buying behavior of a customer is suddenly changed, it might be that the credit card is stolen and needs to be detected right away to avoid possible losses.

Clustering
Clustering is to group similar data into a finite set of separate clusters/categories. This task is also referred to as segmentation. In machine learning, it requires unsupervised

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

6 Hsu

learning. That is, the number of clusters and the categories are not known in advance. A clustering tool simply measures the similarity of the data based on their attribute values and put similar data into the same cluster. For example, Amazon.com groups its customers into different clusters according to the books they buy. Customers in the same cluster should have the same taste in book reading. So the most bought books by the customers in one cluster can be recommended to the customers in the same cluster, who have not bought the books. It is sometimes confusing between clustering and classification. Both of them put data/ examples into different groups. The difference is that in classification ,the groups are predefined and the task is to decide which group a new data sample should belong to. In clustering the types of groups and even the number of groups are not known and the task is to find the best way to segment all the data. The major problem of clustering is the decision of the number of clusters. For some methods, the number of clusters needs to be specified first. For example, to use the KMeans algorithm, the user should input the number of clusters first. The centers of the clusters are chosen arbitrarily. Then, the data iteratively move between clusters until they converge. If the user is not satisfied with the results, another clusters number is then tried. So this kind of method is a trial-and-error process. Another solution to the decision of the number of clusters is to use hierarchical clustering. There are two approaches for this: the top-down approach and the bottomup approach. For the top-down approach, the data are separated into different clusters based on different criteria of the similarity measurement. At first, the whole data belong to a big cluster. At last, each data sample is a single cluster. There will be different levels of clustering in between the two. For the bottom-up approach, the data are group into different clusters from clusters of single data sample until all the data are of one cluster.

Association
Another task of data mining is to search for a set of data within which a subset is dependent on the rest of the set. This task is also referred to as link analysis or affinity analysis. An association rule can be written as A ð B where both A and B are a data set. If such an association rule is identified, it means that when A is seen, B will also be seen with a high probability. For example, in a supermarket transaction database, an association rule Diapers ð Beer was discovered from the transactions on Friday night. That means people who bought diapers on Friday nights also bought beer. This kind of relationship between products is very helpful to marketing decision making. And the process is called market basket analysis. An association rule A ð B can be identified when both the support and the confidence of the rule are larger than respective thresholds. The support of the association rule is the ratio of the number of transactions containing both A and B over the total number of transactions in the database. The confidence of the association rule is the proportion of the number of transactions containing both A and B over the total number of

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Introduction to Data Mining in Bioinformatics 7

transactions containing A. The two thresholds are actually difficult to decide and need domain expertise. The size of the transaction database and the number of product items will affect the setting of proper thresholds. Another important issue of association rule mining is how to speed up the identification procedure of association rules. Different algorithms have been developed (Chen et al., 1996).

Summarization
A simple description of a large data set is called its summarization or characterization. It is desirable that representative information of a data set can be obtained, so that we can easily have a general view of the data set. The representative information can be a subset or general properties/characteristics of the data. For example, in a class of students, the average height 176.5 cm or a student with the height can be used to characterize the students in the class. With a diversity of data, it is somewhat difficult to find good representative information. Classical statistics can be applied to find some useful parameters to represent the data. However, summarization is not so popular or frequently used as classification, clustering, and association.

Text Mining
When the data to be mined are text instead of numerical data, the task is called text mining. It is originated from information retrieval (IR) of the library science. Keywords are used to find related documents from a document database. It is based on the similarity measures between the keywords and the documents. These similarity measures can also be applied to the comparison of a document with all other documents. In the Internet era, IR technique is also used for search engine to find related Web pages. It is also referred to as Web content mining. For more advanced applications of text mining; classification, clustering, and association techniques are utilized. The relationship between documents or terms within the documents can be investigated via these techniques. Natural language processing (NLP) is also involved for semantic understanding of neighboring words (phrases or sentences). Online question-answering systems have been developed based on natural language processing and text mining. If a user asks a question in natural language, the system can search a lot of Web pages to find possible answers to it. Text mining is also important for bioinformatics. Plenty of publications in biology have been accumulated for more than a century. It is desired that new research findings can be combined or crossreferenced with “known” facts in the literature. However, in the biology literature, different terms in different documents might refer to the same thing. Also, the amount of biology literature is really huge. To overcome these problems, new technologies need to be developed and utilized. In all, text mining can facilitate the re-examination of the biology literature to link the facts that were already known.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

8 Hsu

Data Mining Techniques
Many concepts and techniques are useful for the same goal of mining hidden information from data. Among them algorithms, databases, statistics, machine learning, and information retrieval are essential. Algorithms and parallel processing techniques are mainly to accelerate the mining process. Information retrieval techniques can be applied to text mining and is introduced in the subsection of text mining. Here, we will concentrate on databases, statistics, and machine learning.

Databases and Data Warehousing
Database techniques arrange data in a structured form. This facilitates the retrieval of a subset of the data according to the user query. To organize data in a structured form definitely helps the data mining process. But in data mining tasks, the data are usually in semi-structured or unstructured forms. Also, data mining is aimed at uncovering information like “customers of a certain background usually have a good credit,” not like “customers with last name Bush.” The goals of databases and data mining are quite different. But the well-developed database technologies are very useful and efficient in storage and preprocessing of the collected data. Data warehousing technologies were developed to accommodate the operational data of a company. For a large amount of data from heterogeneous databases, a data warehouse is a repository of operational databases and is used to extract needed information. It is said to contain informational data comparing to the operational data in the database. The information is a combination of historical data and can be used to support business decision making.

Statistics
Statistics has sound theoretical ground developed since the 16th century. It estimates various parameters to provide a general view of the data. It is essential in “characterizing” the data. Also, the parameters can be helpful to decide if the discovered information is significant. In the following, we introduce some basic concepts of statistics that are related to data mining (Kantardzic, 2003). To characterize or summarize a set of data, there are some parameters that the reader should be familiar with. They are mean, median, mode, variance, and standard deviation. Also, a box plot is a graphical representation of the distribution of the data. The range of the data is divided into four parts (quartiles). Each part has the same number of data. Data outside a certain range from the median can then be viewed as outliers. Next, we would like to discuss the Bayesian classifier. It is based on the well-known Bayes theorem — P(Y|X) = [P(X|Y) P(Y)]/ P(X) where P(Y) is the prior probability and P(Y|X) is the posterior probability. The classification of a new data sample can be decided

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Introduction to Data Mining in Bioinformatics 9

by estimating the probabilities of the classes (Y i) given the new data sample (X), respectively. The class with the highest probability is the predicted class of the new data sample. Regression is to build a mathematical model for some known temporal data and use the model to predict the upcoming values. This task would be very difficult because the “trend” of the data is usually nonlinear and very complicated. Many parameter estimates are involved if the model is nonlinear. Therefore, to simplify the problem, a linear model is usually used. A linear model is to use a straight line to estimate the trend of the data. This is called linear regression. For a set of data with a nonlinear nature, it can be assumed that the data trend is piecewise linear. That is, in a small period, the data trend is about a straight line. Although statistical theories are widely used in data mining, the philosophies of data mining and statistics are different. In statistics, hypotheses are usually made first and they are proved to be valid or invalid by applying the theories on the data. On the contrary, data mining does not exactly know what it is looking for.

Machine Learning
Machine learning is a long-developed field in artificial intelligence (AI). It focuses on automatic learning from a data set. A suitable model with many parameters is built first for a certain domain problem and an error measure is defined. A learning (training) procedure is then used to adjust the parameters according to the predefined error measure. The purpose is to fit the data into the model. There are different theories for the learning procedure, including gradient decent, expectation maximization (EM) algorithms, simulated annealing, and evolutionary algorithms. The learning procedure is repeated until the error measure reaches zero or is minimized. After the learning procedure is completed with the training data, the parameters are set and kept unchanged and the model can be used to predict or classify new data samples. Different learning schemes have been developed and discussed in the machine learning literature. Important issues include the learning speed, the guarantee of convergence, and how the data can be learned incrementally. There are two categories of learning schemes: (1) supervised learning and (2) unsupervised learning. Supervised learning learns the data with an answer. Meaning, the parameters are modified according to the difference of the real output and the desired output (the expected answer). The classification problem falls into this category. On the other hand, unsupervised learning learns without any knowledge of the outcome. Clustering belongs to this category. It finds data with similar attributes and put them in the same cluster. Various models like neural networks (NN), decision trees (DT), genetic algorithms (GA), fuzzy systems, and support vector machines (SVM) have proved very useful in classification and clustering problems. But machine learning techniques usually handles relatively small data sets because the learning procedure is normally very time-consuming. To apply the techniques to data mining tasks, the problem with handling large data sets must be overcome.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

10 Hsu

Bioinformatics Problems Related to Data Mining
In this section, selected bioinformatics problems that are suitable for using data mining technologies are introduced. Various bioinformatics problems and their trends and possible solutions via data mining technologies are presented and discussed in the rest of the book. Here, only a few typical problems are chosen to illustrate the relationship between bioinformatics and data mining technologies. For an introduction to all kinds of bioinformatics problems, the reader is referred to Lesk (2002).

Protein Structure Prediction
With so many known proteins, the functions of most proteins are still waiting for further investigation. A protein’s function depends upon its structure. If the structure of a protein is known, it would be easier for the biologist to infer the function of the protein. However, it is still costly to decide the structure of a protein via biotechnologies. On the contrary, protein sequences are relatively easy to obtain. Therefore, it is desirable that a protein’s structure can be decided from its sequence through computational methods. A protein sequence is called the primary structure of the protein. Hydrogen bonding of the molecules results in certain substructures called the secondary structure. Interactions between secondary structures assemble them into the tertiary structure. If a protein is composed by more than one unit, it is a quaternary structure. Researchers had produced pretty good results in predicting secondary structures from a protein sequence. However, it is still difficult and imprecise to determine the tertiary and quaternary structures. Two major approaches have been taken for such structure prediction. The first one is to use machine learning algorithms to learn the mapping function from the sequence segments to the secondary structures. With the learned mapping function, the secondary structures can be induced from the sequence segments of a new protein. With the knowledge of secondary structures, the tertiary structure of the protein can be further inferred. This kind of problem is exactly a prediction/classification problem in data mining. The second approach applies the physical laws of the forces between different molecules of the protein. Angle constraints of the chemical bonds are formulated and an optimization process can be used to find the optimal solution of the angles and thus the tertiary structure can be decided.

Gene Finding
A gene is a possible protein-coding region. Genes only compose a small part of the whole genome. With a complete genome, we would like to know where the genes are located. It is to identify the beginnings and endings of genes. It is also called gene annotation. There are also two approaches for this problem. The first one is to use machine learning

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Introduction to Data Mining in Bioinformatics 11

techniques to learn from the patterns of subsequences of known genes and then predict/ classify the genome into genes and non-genes. The second approach, called ab initio methods, concentrates more on the properties of the DNA sequences. Machine learning can also be applied in this approach. The two approaches can be combined to produce better prediction results. Current computational methods on gene finding are more accurate on bacterial/prokaryotic genomes. The reason is that bacterial/prokaryotic genes are continuous. In contrast, eukaryotic genes are much more complicated because many introns, which will not express, reside in a gene. A splicing procedure is needed to result in a continuous gene. But, the splicing mechanism is not easy to understand. So it is still hard to annotate genes of a eukaryotic genome.

Protein-Protein Interaction
There are many different kinds of proteins within a cell of an organism. To understand the physiological functions of the cell, we need to know first how the proteins interact with each other and what the products of the interactions are. The interactions can be physical or functional. High-throughput biotechnologies were developed for such a task. Also, computational methods were investigated. With the information of protein interactions, a protein interaction network can be built. This kind of network is very essential in understanding the regulation of metabolic pathways and thus can be applied to the design of new drugs. To identify the interactions among proteins, various statistical or machine learning techniques can be used. Furthermore, to gain more information from a lot of known protein interaction networks is another important task. These are association problems in data mining.

Phylogenetics
People have been interested in finding out the relationships between different species. A tree structure can be used to illustrate such a relationship. Besides the appearances of the species, studies in anatomy and physiology have contributed to this taxonomy. However, with the knowledge of the species at the molecular level, in other words, the DNA and protein data, new findings are expected from this knowledge. And the field has advanced from the comparison of phenotypes to the comparison of genotypes. By comparing certain DNA or protein sequence data, the “distance” of two species can be determined. Species with shorter distances should be put in the same group because they are closer to each other. This is a classical problem of clustering. Hierarchical clustering can be used here to build a phylogenetic tree for some species with known corresponding DNA or protein sequences. Viruses from animals cause a lot of human diseases. Such diseases have been a serious problem for human beings. Some of them are deadly and even incurable. For example, AIDS was from apes, new variant Creutzfeldt-Jacob disease (CJD) was from cows (Mad Cow Disease or Bovine Spongiform Encephalopathy, BSE), Foot-and-Mouth disease

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

12 Hsu

was from pigs, and Bird Flu/Avian Flu was from chickens and birds. Comparison of corresponding genes of different species might be able to help invent new methods or drugs for the control of such diseases. Thus, finding the relationship of different species at the genomic level has become an important issue.

Summary
Data can be collected much more easily nowadays and are abundant everywhere. But, what is lacking is knowledge. How to dig useful knowledge from large amount of data is really essential. Technologies of different disciplines have emerged under the same goal of mining knowledge from data in the past 10 years. They have been applied to problems of different fields with success. On the other hand, accomplishment of the human genome project in 2003 began a new era for biological research. With plenty of DNA, RNA, and protein data, it would be difficult for the biologist to uncover the knowledge residing in the data with traditional methods. Information technologies can be very helpful in the tasks. Thus, the term bioinformatics became popular. Among the technologies, data mining is the core. In this chapter, basic concepts of data mining and its importance and relationship with bioinformatics were introduced. These provide a brief overview to the topic so that the reader can go on to more advanced technologies and problems in the subsequent chapters.

References
Chen, M.-S., Han, J., & Yu, P. S. (1996). Data mining: An overview from a database perspective. IEEE Trans. on Knowledge and Data Eng., 8(6), 866-883. Dunham, M. H. (2003). Data mining: Introductory and advanced topics. Upper Saddle River, NJ: Prentice Hall. Fayyad, U. M., Piatetsky-Shapiro, G., Smyth, P., & Uthurusamy, R. (Ed.). (1996). Advances in knowledge discovery and data mining. Menlo Park; Cambridge, MA: AAAI/ MIT Press. Fayyad, U. M. (1996). Data mining and knowledge discovery: Making sense out of data. IEEE Expert, 11(5), 20-25. Fayyad, U., Grinstein, G. G., & Wierse, A. (Eds.). (2002). Information visualization in data mining and knowledge discovery. San Francisco: Morgan Kaufmann. Kantardzic, M. (2003). Data mining: Concepts, models, methods, and algorithms. Piscataway, NJ: IEEE Press. Lesk, A. M. (2002). Introduction to bioinformatics. New York: Oxford University Press. Simoudis, E. (1996). Reality check for data mining. IEEE Expert, 11(5), 26-33.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

13

Chapter II

Hierarchical Profiling, Scoring and Applications in Bioinformatics
Li Liao, University of Delaware, USA

Abstract
Recently, clustering and classification methods have seen many applications in bioinformatics. Some are simply straightforward applications of existing techniques, but most have been adapted to cope with peculiar features of the biological data. Many biological data take a form of vectors, whose components correspond to attributes characterizing the biological entities being studied. Comparing these vectors, aka profiles, are a crucial step for most clustering and classification methods. We review the recent developments related to hierarchical profiling where the attributes are not independent, but rather are correlated in a hierarchy. Hierarchical profiling arises in a wide range of bioinformatics problems, including protein homology detection, protein family classification, and metabolic pathway clustering. We discuss in detail several clustering and classification methods where hierarchical correlations are tackled in effective and efficient ways, by incorporation of domain-specific knowledge. Relations to other statistical learning methods and more potential applications are also discussed.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

14 Liao

Introduction
Profiling entities based on a set of attributes and then comparing these entities by their profiles is a common, and often effective, paradigm in machine learning. Given profiles, frequently represented as vectors of binary or real numbers, the comparison amounts to measuring “distance” between a pair of profiles. Effective learning hinges on proper and accurate measure of distances. In general, given a set A of N attributes, A = {a i |i = 1, …, N}, profiling an entity x on A gives a mapping p(x) → ℜN, namely, p(x) is an N vector of real values. Conveniently, we also use x to denote its profile p(x), and xi the i-th component of p(x). If all attributes in A can only have two discrete values 0 and 1, then p(x) → {0,1} N yields a binary profile. The distance between a pair of profiles x and y is a function: D(x, y) → ℜ. Hamming distance is a straightforward, and also one of the most commonly used, distance measures for binary profiles; it is a simple summation of difference at each individual component: D (x, y) = Σin d(i) (1)

where d(i) = | xi - yi |. For example, given x = (0, 1, 1, 1, 1) and y = (1, 1, 1, 1, 1), then D(x, y) = Σi=15 d(i) = 1+0+0+0+0 = 1. A variant definition of d(i), which is also very commonly used, is that d(i) = 1 if xi = y i and d(i) = -1 if otherwise. In this variant definition, D(x, y) = Σ i=15 d(i) = -1+1+1+1+1 = 3. The Euclidean distance, defined as D = ∑ in (x i − yi )2 , has a geometric representation: a profile is mapped to a point in a vector space where each coordinate corresponds to an attribute. Besides using Euclidean metric, in vector space the distance between two profiles is also often measured as dot product of the two corresponding vectors: x ⋅ y = Σin x i y i. Dot product is a key quantity used in Support Vector Machines (Vapnik 1997, Cristianini & Shawe-Taylor 2000, Scholkopf & Smola 2002). Many clustering methods applicable to vectors in Euclidean space can be applied here, such as K-means. While Hamming distance and Euclidean distance are the commonly adopted measures of profile similarity, both of them imply an underlying assumption that the attributes are independent and contribute equally in describing the profile. Therefore, the distance between two profiles is simply a sum of distance (i.e., difference) between them at each attribute. These measures become inappropriate when the attributes are not equally contributing, or not independent, but rather correlated to one another. As we will see, this is often the case in the real-world biological problems. Intuitively, nontrivial relations among attributes complicate the comparisons of profiles. An easy and pragmatic remedy is to introduce scores or weighting factors for individual attributes to adjust their apparently different contribution to the Hamming or Euclidean “distance” between profiles. That is, the value of d(i) in equation (1) now depends not only on the values of xi and yi, but also on the index i. Often, scoring schemes of this type are also used for situations where attributes are correlated, sometimes in a highly nonlinear way. Different scoring schemes thereby are invented in order to capture the

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

15

relationships among attributes. Weighting factors in these scoring schemes are either preset a priori based on domain knowledge about the attributes, or fixed from the training examples, or determined by a combination of both. To put into a mathematical framework, those scoring based approaches can be viewed as approximating the correlations among attributes, which, without loss of generality, can be represented as a polynomial function. In general, a formula that can capture correlations among attributes as pairs, triples, quadruples, and so forth, may look like the following: D’ = Σ in d(i) + Σi≠jn d(i)c(i,j)d(j) + Σi≠j≠kn d(i)d(j)d(k)c(i,j,k) + … (2)

where the coefficients c(i,j), c(i,j,k), …, are used to represent the correlations. This is much like introducing more neurons and more hidden layers in an artificial neural network approach, or introducing a nonlinear kernel functions in kernel-based methods. Because the exact relations among attributes are not known a priori, an open formula like equation (2) is practically useless: as the number of these coefficients grows exponentially with the profile size, solving it would be computationally intractable, and there would not be enough training examples to fit these coefficients. However, it was found that the situation would become tractable when these correlations could be structured as a hierarchy — a quite loose requirement and readily met in many cases as we shall see later. In general, a hierarchical profile of entity x can be defined as p(x) → {0,1}L, where L stands for the set of leaves in a rooted tree T. A hierarchical profile is no longer a plain string of zeros and ones. Instead, it may be best represented as a tree with the leaves labeled by zeros and ones for binary profiles, or by real value numbers for real value profiles. As the main part of this chapter, we will discuss in detail several clustering and classification methods where hierarchical profiles are coped with effectively and efficiently, noticeably due to incorporation of domain specific knowledge. Relations to other statistical learning methods, e.g., as kernel engineering, and more possible applications to other bioinformatics problems are also discussed, towards the end of this chapter.

Hierarchical Profilings in Bioinformatics
Functional Annotations
Hierarchical profiling arises naturally in many bioinformatics problems. The first example is probably from the phylogenetic profiles of proteins and using them to assign functions to proteins (Pellegrini et al., 1999). To help understand the key concepts and motivations, and also to introduce some terminologies for later discussions, we first briefly review the bioinformatics methodologies for functional annotation. Determining protein functions, also called as functional annotation, has been and remains a central task in bioinformatics. Over the past 25 years many computational

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

16 Liao

methodologies have been developed toward solving this task. The development of these computational approaches can be generally broken into four stages by both the chronological order and algorithmic sophistication (Liao & Noble, 2002). For our purpose here, we can categorize these methods into three levels according to the amount and type of information used. The methods in level one compare a pair of proteins for sequence similarity. Among them are the landmark dynamic programming algorithm by Smith and Waterman (1980) and its heuristic variations BLAST (Altschul et al., 1990) and FASTA (Pearson, 1990). The biological reason behind these methods is protein homology; two proteins are homologous if they share a common ancestor. Therefore, homologous proteins are similar to each other in the primary sequence and keep the same function as their ancestor’s, until the evolutionary divergence — mutations, deletions, or insertions from the ancestral protein (or gene, to be more precise) is significant enough to cause any change. A typical way to annotate a gene with unknown function is to search against a database of genes whose functions are already known, such as GenBank (http://www.ncbi.nlm.nih.gov/Genbank), and assign to the query gene the function of a homologous gene found in the database. The next level’s methods use multiple sequences from a family of proteins with same or similar functions, in order to collect aggregate statistic for more accurate/reliable annotation. Profiles (Gribskov et al., 1987) and hidden Markov models (Krogh et al., 1994; Durbin et al., 1998) are two popular methods to capture and represent these aggregate statistics from whole sequences for protein families. More refined and sophisticated methods using aggregate statistics are developed, such as PSI-BLAST (Altschul et al., 1997), SVM-Fisher (Jaakkola et al., 1999, 2000), Profile-Profile (Sadreyev & Grishi, 2003; Mittelman et al., 2003), SVM-Pairwise (Liao & Noble, 2002, 2003). The aggregate statistic may also be represented as patterns or motifs. Methods based on patterns and motifs include BLOCKs (Henikoff & Henikoff, 1994), MEME (Bailey & Elkan, 1995), MetaMEME (Grundy et al., 1997), and eMotif (Nevill-Manning et al., 1998). The third level’s methods go beyond sequence similarity to utilize information such as DNA Microarray gene expression data, phylogenetic profiles, and genetic networks. Not only can these methods detect distant homologues — homologous proteins with sequence identity below 30%, but they also can identify proteins with related functions, such as those found in a metabolic pathway or a structural complex. Given a protein, its phylogenetic profile is represented as a vector, where each component corresponds to a genome and takes a value of either one or zero, indicating respectively the presence or absence of a homologous protein in the corresponding genome. Protein phylogenetic profiles were used in Pellegrini, Marcotte, Thompson, Eisenberg, and Yeates (1999) to assign protein functions based on the hypothesis that functionally linked proteins, such as those participating in a metabolic pathway or a structural complex, tend to be preserved or eliminated altogether in a new species. In other words, these functionally linked proteins tend to co-evolve during evolution. In Pellegrini et al. (1999), 16 then-fully-sequenced genomes were used in building the phylogenetic profiles for 4290 proteins in E. coli genome. The phylogenetic profiles, expressed as 16-vector, were clustered as following; proteins with identical profiles are grouped and considered to be functionally linked, and two groups are called neighbors when their phylogenetic profiles differ by one bit. The results based on these simple clustering rules supported the functional linkage hypothesis. For instance, homologues

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

17

of ribosome protein RL7 were found in 10 out of 11 eubacterial genomes and in yeast but not in archaeal genomes. They found that more than half of the E. coli proteins with the RL7 profile or profiles different from RL7 by one bit have functions associated with the ribosome, although none of these proteins share significant sequence similarity with the RL7 protein. That is, these proteins are unlikely to be annotated as RL7 homologues by using sequence similarity based methods. There are some fundamental questions regarding the measure of profile similarity that can affect the results from analysis of phylogenetic profiles. Can we generalize the definition of similar profiles? In other words, can we devise a measure so we can calculate similarity for any pair of profiles? What threshold should be adopted when profile similarity is used to infer functional linkage? A simple measure for profile similarity first brought up was Hamming distance. In Marcotte, Xenarios, van Der Bliek, and Eisenberg (2000), phylogenetic profiles are used to identify and predict subcellular locations for proteins; they found mitochondrial and non-mitochondrial proteins. The first work that recognizes phylogenetic profiles as a kind of hierarchical profiling is Liberles, Thoren, von Heijne, and Elofsson (2002), a method that utilizes the historical evolution of two proteins to account for their similarity (or dissimilarity). Evolutionary relationships among organisms can be represented as a phylogenetic tree where leaves correspond to the current organisms and internal nodes correspond to hypothetical ancient organisms. So, rather than simply counting the presence and absence of the proteins in the current genomes, a quantity called differential parsimony is calculated that minimize the number of times when changes have to be made at tree branches to reconcile the two profiles.

Comparative Genomics
Another example of hierarchical profiling arises from comparing genomes based on their metabolic pathway profiles. A main goal of comparing genomes is to reveal the evolutionary relationships among organisms, which can be represented as phylogenetic trees. Originally phylogenetic trees were constructed based on phenotypic — particularly morphological — features of organisms. Nowadays, molecular reconstruction of phylogenetic trees is most commonly based on comparisons of small sub-unit ribosomal RNA (16S rRNA) sequences (Woese, 1987). The small sub-unit rRNAs is orthodoxly used as gold standard for phylogeny study, mainly due to two factors: their ubiquitous presence and relative stability during evolution. However, the significance of phylogenies based on these sequences have been recently questioned with growing evidence for extensive lateral transfer of genetic material, a process which results in blurring the boundaries between species. Phylogenetic trees based on individual protein/gene sequence analysis — thus called gene tree — are not all congruent with species trees based on 16S rRNA (Eisen, 2000). Attempts of building phylogenetic trees based on different information levels, such as pathways (Dandekar et al., 1999; Forst & Schulten, 2001) or some particular molecular features such as folds (Lin & Gerstein 2000), have also led to mixed results of congruence with the 16S rRNA-based trees.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

18 Liao

Figure 1. Binary matrix encoding the presence/absence of pathways in genomes; O1 to Om represent m genomes, and P 1 to Pn represent n pathways
P1 O1 O2 0 1 P2 1 1

... ...
.. .

Pn 0 1

From a comparative genomics perspective, it makes more sense to study evolutionary relationships based on genome-wide information, instead of a piece of the genome, be it an rRNA or a gene. As more and more genomes are fully sequenced, such genome-wide information becomes available. One particularly interesting type of information is the entire repertoire of metabolic pathways in an organism, as the cellular functions of an organism are carried out via these metabolic pathways. A metabolic pathway is a chain of biochemical reactions, together fulfilling certain cellular functions. For example, Glycolysis is a pathway existed in most cells, which consists of 10 sequential reactions converting glucose to pyruvate while generating the energy that the cell needs. Because most of these reactions require enzymes as catalyst, therefore in an enzyme centric scheme, pathways are represented as sequences of component enzymes. It is reasonable to set the necessary condition for a pathway to exist in an organism as that all the component enzymes of that pathway are available. Enzymes are denoted by enzyme commission (EC) numbers which specifies the substrate specificity. Most enzymes are proteins. Metabolic pathways in a completely sequenced genome are reconstructed by identifying enzyme proteins that are required for a pathway (Gaasterland & Selkov, 1995; Karp et al., 2002). The information about presence and absence of metabolic pathways in genomes can be represented as a binary matrix, as shown in Figure 1, where an entry (i,j) = 1/0 represents whether pathway j is present/absent in genome i. Therefore, each row serves as a profile of the corresponding genome (termed metabolic pathway profiles), and each column serves as a profile of the corresponding pathway (termed phyletic profiles). It is reasonable to believe that valuable information about evolution and co-evolution is embedded in these profiles, and comparison of profiles would reveal, to some degree, the evolutionary relations among entities (either genomes or pathways) represented by these profiles. Once again, the attributes used for building these profiles are not independent but correlated to each other. Because different metabolic pathways may be related to one another in terms of physiological functions, e.g., one pathway’s absence/presence may be correlated with another pathway’s absence/presence in a genome, these relationships

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

...
Om 0

...
1

...
1

...

Hierarchical Profiling, Scoring and Applications in Bioinformatics

19

among pathways, as attributes of metabolic pathway profiles, should be taken into account when comparing genomes based on their MPPs. The relationships among various pathways are categorized as a hierarchy in the WIT database (Overbeek et al., 2000), which can be found at the following URL (http://compbio.mcs.anl.gov/puma2/cgibin/functional_overview.cgi).

Comparing Hierarchical Profiles
In the last section, we showed that the data and information in many bioinformatics problems can be represented as hierarchical profiles. Consequently, the clustering and classification of such data and information need to account for the hierarchical correlations among attributes when measuring the profile similarity. While a generic formula like equation (2) posits to account for arbitrary correlations theoretically, its demand of exponentially growing amount of training examples and lacking of an effective learning mechanism render the formula practically useless. In hierarchical profiles, however, the structure of relations among attributes is known, and sometimes the biological interpretation of these relations is also known. As a result, the learning problems will become rather tractable.

P-Tree Approach
Realizing that the hierarchical profiles contain information not only in the vector but also in the hierarchical correlations, it is natural to first attempt at treating them as trees. How to compare trees is itself an interesting topic with wide applications, and has been the subject of numerous studies. In Liao, Kim, and Tomb, (2002), a p-tree based approach was proposed to measure the similarity of metabolic pathway profiles. The relationships among pathways are adopted from the WIT database and represented as a Master tree. About 3300 known metabolic pathways are collected in the WIT database and these pathways are represented as leaves in the Master tree. Then, for each genome, a p-Tree is derived from the Master tree by marking off leaves whose corresponding pathways are absent from the organism. In this representation, a profile is no longer a simple string of zeros and ones, where each bit is treated equally and independently. Instead, it is mapped into a p-Tree so that the hierarchical relationship among bits is restored and encoded in the tree. The comparison of two p-Trees thus evaluates the difference between the two corresponding profiles. To take into account the hierarchy, a scoring scheme ought to weight (mis)matches at bits i and j according to their positions in the tree, such as i and j are sibling, versus i and j are located distantly in the tree. For that, the (mis)matches scores are transmitted bottom-up to the root of the Master tree in four steps: (1) overlay the two p-Trees; (2) score mismatches and matches between two p-Trees and label scores at the corresponding leaves on the master tree; (3) average scores from siblings (weight breadth) and assign the score to the parent node; (4) iterate step 3 until the root is reached.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

20 Liao

Figure 2. A comparison of two organisms orgi and orgj, with respect to the three pathways p1, p2, and p3 (weighted scoring scheme, Case 1); Panel A featuring the master tree, where each pathway is represented by a circle and each square represents an internal node; in Panel B, the presence(absence) of a pathway is indicated by 1(0); Panel C features the p-trees, where a filled (empty) circle indicates the presence (absence) of the pathway; Panel D, the bottom-up propagation of the scores is illustrated; a cross (triangle) indicates a mismatch (match)
A. Master Tree B. Profiles for orgi and orgj p1 orgi p3 orgj p1 p2 0 1 1 1 p2 0 p3 1

C. p-Trees of orgi and orgj

D. Scoring (0+1)/2=1 (-1-1)/2=0 1

-1

-1

Figure 3. Case 2: A comparison of two organisms orgi and orgj, with respect to the three pathways p1, p2, and p3 (weighted scoring scheme, Case 2); the same legends as in Figure 2

A. Master Tree

B. Profiles for orgi and orgj p1 orgi 1 1 p2 1 1 p3 0 1

p3 orgj p1 p2

C. p-Trees of orgi and orgj

D. Scoring (1-1)/2=0 (1+1)/2=1 -1

1

1

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

21

An algorithm implementing these steps is quite straightforward and has a time complexity linear with the size of the Master tree. To demonstrate how the algorithm works, let us look at an example of two organisms, orgi and orgj, and three pathways p 1, p 2, and p3. Two hypothetical cases are considered and are demonstrated in Figures 2 and 3 respectively. In case one, orgi contains pathways p1 and p3, and orgj contains p2 and p3. The metabolic pathway profiles for orgi and org j are shown in panel B and their corresponding p-Trees are displayed in panel C. In the panel D, two p-Trees are superposed. Matches and mismatches are scored at the leaves and the scores are propagated up to the root. In case two, orgi contains pathways p1 and p2, whereas orgj contains all three pathways, and similar calculation is shown in Figure 3. In this example, given the topology of the master tree, the two cases have the same final score 0 in the p-Tree scoring scheme. This is in contrast to the variant Hamming scoring scheme, where the score for case 1 equals to (-1-1+1) = -1 and the score for case 2 equals to (1+1-1) = 1. Evidently, the p-Tree scoring scheme has taken into account the pathway relationships present in the Master tree: p1 and p2, being in the same branch, are likely to have a similar biochemical or physiological role, which is distinct from the role of the p3 pathway. Using pathway hierarchical categories in the WIT database and the scoring scheme described above, we compared 31 genomes based on their metabolic pathway profiles

Figure 4. MPP-based tree and 16S rRNA-based tree for 31 genomes; neighbor-joining program from Phylip package is used to generate these trees

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

22 Liao

(MPP) (see Figure 4). Relations among 31 genomes are represented as a MPP-based tree and are compared with the phylogeny based on 16s rRNA. While the MPP-based tree is congruent with the 16S rRNA-based tree at several levels, some interesting discrepancies were found. For example, the extremely radiation resistant organism, D. radiodurans is positioned in E. coli metabolic lineage. The noted deviation from the classical 16s rRNA phylogeny suggests that pathways have undergone evolution transcending the boundaries of species and genera. The MPP-based trees can be used to suggest alternative production platform for metabolic engineering. A different approach to this problem on the same dataset was later proposed in Heymans and Singh (2003).

Parameterized Tree Distance
Evolution of pathways and the interaction with evolution of the host genomes can be further investigated by comparing the columns (phyletic profiles) in the binary matrix in Figure 1. The intuition is that the co-occurrence pattern of pathways in a group of organisms would coincide with the evolutionary path of these host organisms, for instance, as a result of the emergence of enzymes common to those pathways. Therefore, such patterns would give useful information, e.g., organism-specific adaptations. These co-occurrences can be detected by clustering pathways based on their phyletic profiles. Again, the phyletic profiles here are hierarchical profiles, and the distance measure between them should be calculated using the scheme that we developed above. In Zhang, Liao, Tomb, and Wang (2002), 2719 pathways selected from 31 genomes in the WIT database were clustered into 69 groups of pathways, and pathways in each group cooccur in the organisms. Further insights were achieved by studying the evolution of enzymes that are components in co-occurred pathways. For completely sequenced genomes, sequences of these enzymes are available and can be used to build individual gene trees (in contrast to species trees). Comparisons of the gene trees of component enzymes in co-occurred pathways would serve as a basis for investigating how component enzymes evolve and whether they evolve in accordance with the pathways. For example, two pathways p1 = (e1, e2, e3) and p2 = (e4, e5) co-occur in organisms o1, o2, and o3. For component enzyme e1 of pathway p1, a gene tree Te1 is built with e1’s homologues in organisms o1, o2 and o3, by using some standard tree reconstruction method such as neighbor joining algorithm (Felsenstein, 1989). This can be done for other component enzymes e2 to e5 as well. If, as an ideal case, gene trees Tei for i = 1 to 5 are identical, we would then say that the pathway co-occurrence is congruent to speciation. When gene trees for component enzymes in co-occurred pathways are not identical, comparisons of gene trees may reveal how pathways evolve differently, possibly due to gene lateral transfer, duplication or loss. Recent work also shows that analysis of metabolic pathways may explain causes and evolution of enzymes dispensability. To properly address tree comparisons, several algorithms were developed and tested (Zhang et al., 2002). One similarity measure is based on leaf overlap. Let T1 and T2 be two trees. Let S1 be the set of leaves of T1 and S2 be the set of leaves of T2. The leaf-overlapbased distance is defined as

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

23

Dx(T1, T2) = |S1 ∩ S2 | / |S1 ∪ S2 |,

(3)

where |.| denotes the set cardinality. A more elaborated metric, called parameterized distance as an extension from the editing distance between two unordered trees, was proposed to account for the structural difference between ordered and rooted trees. A parameter c is introduced to balance the cost incurred at different cases such as deleting, inserting, and matching subtrees. A dynamic programming algorithm is invoked to calculate the optimal distance. For example, in Figure 5, the distance between D1 and p is 1.875 and the distance between D2 and p is 1.813 when the parameter c is set at value of 0.5. On the other hand, the editing distance between D1 and p and between D2 and p are both 6, representing the cost of deleting the six nodes not touched by the dotted mapping lines in Figure 5. Noting that D1 differs from D2 topologically, this example shows that the parameterized distance better reflects the structural difference between trees than the editing distance. In Zhang (2002), the 523 component enzymes of these 2719 pathways were clustered, based on parameterized tree distance with c being set at 0.6, into exactly the same 69 clusters based on pathway co-occurrence. This suggests that our hypothesis about using co-occurrence to infer evolution is valid, at least approximately.

Figure 5. Illustration of parameterized distances between trees. Red dotted lines map tree P to trees D1 and D2, the parameter C = 1 gives the editing distances; the editing distance between D1 and P is 6, because six deletions of nodes other than a, b, and c in D1 will make D1 identical to tree P, although D1 and D2 are topologically different, their editing distances to P are both equal to 6

e a

D1
g

P
c k b

a

f

b

c

h
e a

k

a

D2

f

b

c

k

P

b

c

g k

h

dy() D1, P D2, P

C=1 6 6

C=0.5 1.875 1.8125

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

24 Liao

Tree Kernel Approach
As shown before, use of phylogenetic profiles for proteins has led to methods more sensitive to detect remote homologues. In the following we discuss classifiers using support vector machines to explore similarity among phylogenetic profiles as hierarchical profiles. As a powerful statistical learning method, support vector machines (SVMs) have recently been applied with remarkable success in bioinformatics problems, including remote protein homology detection, microarrray gene expression analysis, and protein secondary structure prediction. SVMs have been applied to problems in other domains, such as face detection and text categorization. SVMs possess many nice characteristics a good learning method shall have: it is expressive; it requires fewer training examples; it has an efficient learning algorithm; it has an elegant geometric interpretation; and above all, it generalizes well. The power of SVMs comes partly from the data representation, where an entity, e.g., a protein, is represented by a set of attributes instead of a single score. However, how those attributes contribute to distinguishing a true positive (filled dot in Figure 6) from a true negative (empty circle) may be quite complex. In other words, the boundary line between the two classes, if depicted in a vector space, can be highly nonlinear (dashed line in the left panel of Figure 6), and nonetheless, it is the goal of a classifier to find this boundary line. The SVMs method will find a nonlinear mapping that transform the data from the original space, called input space, into a higher dimensional space, called feature space, where the data can be linearly separable (right panel of Figure 6). The learning power of SVMs comes mostly from the use of kernel functions, which define how the dot product between two points in the feature space can be calculated as a function of their corresponding vectors in the input space. As the dot product between vectors is the only quantity needed to find a class boundary in the

Figure 6. Schematic illustration of nonlinear mapping of data from input space to feature space for a SVM

F( ) F(xj) F(xi )

xi xj

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

25

feature space, kernel functions therefore contain sufficient information, and more importantly they avoid explicit mapping to high dimensional feature space; high dimensionality often poses difficult problems for learning such as overfitting, thus termed the curse of dimensionality. The other mechanism adopted by SVMs is to pick the boundary line that has the maximum margin to both classes. A maximum margin boundary line has low Vapnik-Chervonenkis dimension, which ensures good generalization. Because of the central role played by kernel functions, how to engineer kernel functions to incorporate domain specific information for better performance has been an active research activity. It is worth noting that, as compared to other similar learning methods such as artificial neural networks, the SVMs require fewer training examples, which is a great advantage in many bioinformatics applications. Vert (2002) proposed a tree kernel to compare not just the profiles themselves but also their global patterns of inheritance reflected in the phylogenetic tree. In other words, the tree kernel takes into account phylogenetic histories for two genes — when in evolution they transmitted together or not – rather than by just comparing phylogenetic profiles organism per organism, at the leaves of the phylogenetic tree. A kernel function is thus defined as K(x, y) = Σi=1 to D Φi(x) Φi(y) (4)

where Φi(x) is an inheritance pattern i for profile x. An inheritance pattern of x gives an explanation of x, that is, the presence (1) or absence (0) of gene x at each current genome is the result of a series of evolutionary events happened at the ancient genomes. If we assume a gene is possessed by the ancestral genome, at each branch of the phylogenetic tree which corresponds to a speciation, the gene may either be retained or get lost. An inheritance pattern corresponds to a series of assignments of retain or loss at all branches such that the results at leaves match the profile of x. Because of the stochastic property of these evolutionary events, we cannot be certain whether a gene is retained or lost. Rather, the best we know may be the probability of either case. Let F i(x) = Φ(x | i), which is the probability that profile x can be interpreted by the inheritance pattern i, then K (x, y) = Σ i=1 to D P(x|i) P(y|i) is the joint probability that both profiles x and y are resulted from all possible pattern i. Intuitively, not all possible inheritance patterns occur at the same frequency. Let P(i) be the probability that pattern i actually occurs during the evolution, then the so called tree kernel is refined as K (x, y) = Σi=1 to D P(i) P(x|i) P(y|i) (5)

The formalism of using joint probability as kernels first appeared in other applications, such as convolution kernels (Watkins, 1999; Haussler, 1999). Because the number of patterns D grows exponentially with the size of the phylogenetic tree, an efficient algorithm is needed to compute the kernel. Such an algorithm was developed in Vert (2002), which uses post-order traversals of the tree and has a time complexity linear with respect to the tree size.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

26 Liao

To test the validity of the tree kernel method, phylogenetic profiles were generated for 2465 yeast genes, whose accurate functional classification are already known, by BLAST search against 24 fully-sequenced genomes. For each gene, if a BLAST hit with E-value less than 1.0 is found in a genome, the corresponding bit for that genome is then assigned as 1, otherwise is assigned as 0. The resulting profile is a 24-bit string of zeros and ones. Two assumptions were made in calculating the tree kernel for a pair of genes x and y. Although their exact probabilities may never be known, it is reasonable to assume that losing a gene or obtaining a new gene is relatively rare as compared to keeping the status quo. In Vert, the probability that an existing gene is retained at a tree branch (i.e., speciation) is set at 0.9, and the probability that a new gene is created at a branch is set at 0.1. It was further assumed that such a distribution remains the same at all branches for all genes. Even with these crude assumptions, in the cross validation experiments on those 2465 yeast genes, the tree kernel’s classification accuracy already significantly exceed that of a kernel using just the dot product x ⋅ y = Σi=1 to 24 x i yi.

Extended Phylogenetic Profiles
The tree-kernel approach’s improvement at classification accuracy is mainly due to engineering the kernel functions. In Narra and Liao (2004, 2005) further improvement is attained by both data representations and kernel engineering. As the reader should have been convinced by now, these phylogenetic profiles contain more information than just the string of zeros and ones; the phylogenetic tree provides relationships among the bits in these profiles. In Narra and Liao, a two-step procedure is adopted to extend phylogenetic profiles with extra bits encoding the tree structure: (1) a score is assigned at each internal tree node; (2) the score labeled tree is then flatten into an extended vector. For an internal tree node in a phylogenetic tree, as it is interpreted as ancestor of the nodes underneath it, one way to assign a score for it is to take the average of the scores from its children nodes. This scoring scheme works top-down recursively until the leaves are reached: the score at a leaf is just the value of the corresponding component in the hierarchical profile. The same scoring scheme was also used in p-tree approach. Unlike p-Tree approach that keeps just the score the root node and thus inevitably causes information loss, the scores at all internal nodes are retained and then mapped into a vector via a post-order tree traversal. This vector is then concatenated to the original profile vector forming an extended vector, which is called tree-encoded profile. The scheme works for both binary and real-valued profiles. In order to retain information, real value profiles for yeast genes are used; the binary profiles for tree-kernel are derived real value profiles by imposing a cutoff at E-values Given a pair of tree-encoded profiles x and y, the polynomial kernel is used classification: K(x, y) = [1+ s D(x, y)]d (6)

where s and d are two adjustable parameters. Unlike ordinary polynomial kernels, D(x, y) is not the dot product of vectors x and y, but rather, a generalized Hamming distance for real value vectors:

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

27

D(x, y) = Σi=1 to n (S(|xi-yi|)

(7)

where the ad hoc function S has value 7 for a match, 5 for a mismatch by a difference less then 0.1, 3 for a mismatch by a difference less than 0.3, and 1 for a mismatch by a difference less than 0.5. The values in the ad hoc function S are assigned based on the E-value distribution of the protein dataset. The methods are tested on the same data set by using the same cross-validation protocols as in Vert. The classification accuracy of using the extended phylogenetic profiles with E-values and polynomial kernel generally outperforms the tree-kernel approach at most of the 133 functional classes of 2465 yeast genes in Vert.

More Applications and Future Trends
We have seen in the last two sections some problems in bioinformatics and computational biology where relationships can be categorized as hierarchy, and how such hierarchical structure can be utilized to facilitate the learning. Because of the central role played by evolution theory in biology, and the fact that phylogeny is natively expressed as a hierarchy, it is no surprise that hierarchical profiling arises in many biological problems. In Siepel and Haussler (2004), methods are developed that combine phylogenetic and hidden Markov models for biosequence analysis. Hidden Markov models, first studied as a tool for speech recognition, were introduced to bioinformatics field around 1994 (Krogh et al., 1994). Since then, hidden Markov models have been applied to problems in bioinformatics and computational biology including gene identification, protein homology detection, secondary structure prediction, and many more. In sequence modeling, hidden Markov models essentially simulate processes along the length of the sequence, mostly ignoring the evolutionary process at each position. On the other hand, in phylogenetic analysis, the focus is on the variation across sequences at each position, mostly ignoring correlations from position to position along their length. From a hierarchical profiling viewpoint, each column in a multiple sequence alignment is a profile, not binary but 20ary, and provides a sampling for the current sequences. It is a very attractive idea to combine these two apparently orthogonal models. In Siepel and Haussler, a simple and efficient method was developed to build higher-order states in the HMM, which allows for context-sensitive models of substitution, leading to significant improvements in the fit of a combined phylogenetic and hidden Markov model. Their work promises to be a very useful tool for some important biosequence analysis applications, such as gene finding and secondary structure prediction. Hierarchical relations also exist in applications where phylogeny is not the subject. For example, in Holme, Huss, and Jeong (2003), biochemical networks are decomposed into sub-networks. Because of the inherent non-local features possessed by these networks, a hierarchical analysis was proposed to take into account the global structure while doing

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

28 Liao

decomposition. In another work (Gagner et al., 2004), the traditional way of representing metabolic networks as a collection of connected pathways is questioned: such representation suffers the lack of rigorous definition, yielding pathways of disparate content and size. Instead, they proposed a hierarchical representation that emphasizes the gross organization of metabolic networks in largely independent pathways and sub-systems at several levels of independence. While hierarchical relations are widely existed, there are many applications where the topology of the data relation can not be described as a hierarchy but rather as a network. Large scale gene expression data are often analyzed by clustering genes based on gene expression data alone, though a priori knowledge in the form of biological networks is available. In Hanish, Zien, Zimmer, and Lengauer (2002), a co-clustering method is developed that makes use of this additional information and has demonstrated considerably improvements for exploratory analysis.

Summary
As we have seen, hierarchical profiling can be applied to many problems in bioinformatics and computational biology, from remote protein homology detection, to genome comparisons, to metabolic pathway clustering, wherever the relations among attribute data possess structure as a hierarchy. These hierarchical relations may be inherent or as an approximation to more complex relationships. To properly deal with such relationships is essential for clustering and classification of biological data. It is advisable to heed the relations that bear artificially hierarchical structure; hierarchical profiling on these relations may yield misleading results. In many cases, the hierarchy, and the biological insight wherein embodied, can be integrated into the framework of data mining. It consequently facilitates the learning and renders meaningful interpretation of the learning results. We have reviewed the recent developments in this respect. Some methods treat hierarchical profile scoring as a tree comparison problem, some as an encoding problem, and some as a graphical model with a Bayesian interpretation. The latter approach is of particular interest, since most biological data are stochastic by nature. A trend is seen in bioinformatics that combines different methods and models so the hybrid method can achieve a better performance. In the tree-kernel method, the hierarchical profiling and scoring are incorporated as kernel engineering task of the support vector machines. In sequence analysis, the phylogenetic techniques and hidden Markov models are combined to account for the relationships exhibited in sequences that either method alone can not handle properly. As more and more biological data with complex relationships being generated, it is reasonable to believe the hierarchical profiling will see more applications, either serve by itself as a useful tool for analyzing these data, or serve as a prototype for developing more sophisticated and powerful data mining tools.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

29

References
Altschul, S. F., Gish, W., Miller, W., Myers, E., & Lipman, D. J. (1990). Basic local alignment search tool. Journal of Molecular Biology, 215, 403-410. Altschul, S. F., Madden, T. L., Schäffer, A. A., Zhang, J., Zhang, Z., Miller, W., et al. (1997). Gapped BLAST and PSI-BLAST: A new generation of protein database search programs. Nucleic Acids Res., 25, 3389-3402. Bailey, T. L., & Elkan, C. P. (1995). Unsupervised learning of multiple motifs in biopolymers using EM. Machine Learning, 21(1-2), 51-80. Burges, C. J. C. (1998). A tutorial on support vector machines for pattern recognition. Data Mining and Knowledge Discovery, 2, 121-167. Cristianini, N., & Shawe-Taylor, J. (2000). An introduction to support vector machines and other kernel-based learning methods. Cambridge, UK: Cambridge University Press. Dandekar, T., Schuster, S., Snel, B., Huynen, M., & Bork, P. (1999). Pathway alignment: application to the comparative analysis of glycolytic enzymes. Biochemical Journal, 343, 115-124. Durbin, R., Eddy, S., Krogh, A., & Mitchison, G. (1998). Biological sequence analysis: Probabilistic models of proteins and nucleic acids. Cambridge, UK: Cambridge University Press. Eisen, J. A. (2000). Horizontal gene transfer among microbial genomes: New insights from complete genome analysis. Current Opinion in Genetics & Development, 10, 606611. Felsenstein, J. (1989). PHYLIP — Phylogeny Inference Package (Version 3.2). Cladistics, 5, 164-166. Forst, C. V., & Schulten, K. (2001). Phylogenetic analysis of metabolic pathways. Journal of Molecular Evolution, 52, 471-489. Gaasterland, T., & Selkov, E. (1995). Reconstruction of metabolic networks using incomplete information. In Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (pp. 127-135). Menlo Park, CA: AAAI Press. Gagneur, J., Jackson, D., & Casar, G. (2003). Hierarchical analysis of dependence in metabolic networks. Bioinformatics, 19, 1027-1034. Gribskov, M., McLachlan, A. D., & Eisenberg, D. (1987). Profile analysis: Detection of distantly related proteins. Proc. Natl. Acad. Sci. USA, 84 (pp. 4355-4358). Grundy,W. N., Bailey, T. L., Elkan, C. P., & Baker, M. E. (1997). Meta-MEME: Motif-based hidden Markov Models of biological sequences. Computer Applications in the Biosciences, 13(4), 397-406. Hanisch, D., Zien, A., Zimmer, R., & Lengauer, T. (2002). Co-clustering of biological networks and gene expression data. Bioinformatics, 18, S145-S154.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

30 Liao

Haussler, D. (1999). Convolution kernels on discrete structures (Technical Report UCSC-CRL-99-10). Santa Cruz: University of California. Henikoff, S., & Henikoff, J.G. (1994). Protein family classification based on search a database of blocks. Genomics, 19, 97-107. Heymans, M., & Singh, A. J. (2003). Deriving phylogenetic trees from the similarity analysis of metabolic pathways. Bioinformatics, 19, i138-i146. Holme, P., Huss, M., & Jeong, H. (2003). Subnetwork hierarchies of biochemical pathways. Bioinformatics, 19, 532-538. Jaakkola, T., Diekhans, M., & Haussler, D. (1999). Using the Fisher Kernel Method to detect remote protein homologies. In Proceedings of the Seventh International Conference on Intelligent Systems for Molecular Biology (pp. 149-158). Menlo Park, CA: AAAI Press. Jaakkola, T., Diekhans, M., & Haussler, D. (2000). A discriminative framework for detecting remote protein homologies. Journal of Computational Biology, 7, 95114. Karp, P.D., Riley, M., Saier, M., Paulsen, I. T., Paley, S. M., & Pellegrini-Toole, A. (2000). The EcoCyc and MetaCyc databases. Nucleic Acids Research, 28, 56-59. Krogh, A., Brown, M., Mian, I. S., Sjolander, K., & Haussler, D. (1994). Hidden Markov models in computational biology: Applications to protein modeling. Journal of Molecular Biology, 235, 1501-1531. Liao, L., Kim, S., & Tomb, J-F. (2002). Genome comparisons based on profiles of metabolic pathways”, In The Proceedings of The Sixth International Conference on Knowledge-Based Intelligent Information & Engineering Systems (pp. 469-476). Crema, Italy: IOS Press. Liao, L., & Noble, W. S. (2003). Combining pairwise sequence similarity and support vector machines for detecting remote protein evolutionary and structural relationships. Journal of Computational Biology, 10, 857-868. Liberles, D. A., Thoren, A., von Heijne, G., & Elofsson, A. (2002). The use of phylogenetic profiles for gene predictions. Current Genomics, 3, 131-137. Lin, J., & Gerstein, M. (2002). Whole-genome trees based on the occurrence of folds and orthologs: Implications for comparing genomes on different levels. Genome Research, 10, 808-818. Marcotte, E. M., Xenarios, I., van Der Bliek, A. M., & Eisenberg, D. (2000). Localizing proteins in the cell from their phylogenetic profiles. Proc. Natl. Acad. Sci. USA, 97, (pp. 12115-12120). Mittelman, D., Sadreyev, R., & Grishin, N. (2003). Probabilistic scoring measures for profile-profile comparison yield more accurate shore seed alignments. Bioinformatics, 19, 1531-1539. Narra, K., & Liao, L. (2004). Using extended phylogenetic profiles and support vector machines for protein family classification. In The Proceedings of the Fifth International Conference on Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing (pp. 152-157). Beijing, China: ACIS Publication.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Hierarchical Profiling, Scoring and Applications in Bioinformatics

31

Narra, K., & Liao, L. (2005). Use of extended phylogenetic profiles with E-values and support vector machines for protein family classification. International Journal of Computer and Information Science, 6(1). Nevill-Manning, C. G., Wu, T. D., & Brutlag, D. L.(1998). Highly specific protein sequence motifs for genome analysis. Proc. Natl. Acad. Sci. USA, 95(11), 5865-5871. Noble, W. (2004). Support vector machine applications in computational biology. In B. Scholkopf, K. Tsuda, & J-P. Vert. (Eds.), Kernel methods in computational biology (pp. 71-92). Cambridge, MA: The MIT Press. Overbeek, R., Larsen, N., Pusch, G. D., D’Souza, M., Selkov Jr., E., Kyrpides, N., Fonstein, M., Maltsev, N., & Selkov, E. (2000). WIT: Integrated system for high throughput genome sequence analysis and metabolic reconstruction. Nucleic Acids Res., 28, 123-125. Pearson, W. (1990). Rapid and sensitive sequence comparison with FASTP and FASTA. Meth. Enzymol., 183, 63-98. Pellegrini, M., Marcotte, E. M., Thompson, M. J., Eisenberg, D., & Yeates, T. O. (1999). Assigning protein functions by comparative genome analysis: Protein phylogenetic profiles. Proc. Natl. Acad. Sci. USA, 96, (pp. 4285-4288). Rabiner, L. R. (1989). A tutorial on hidden Markov models and selected applications in speech recognition. Proc. IEEE, 77, 257-286. Sadreyev, R., & Grishin, N. (2003). Compass: A tool for comparison of multiple protein alignments with assessment of statistical significance. Journal of Molecular Biology, 326, 317-336. Scholkopf, B., & Smola, A. J. (2001). Learning with kernels: Support vector machines, learning). Cambridge, MA: The MIT Press. Siepel, A., & Haussler, D. (2004). Combining phylogenetic and hidden Markov Models in biosequence analysis. J. Comput. Biol., 11(2-3), 413-428. Smith, T. F., & Waterman, M. S.(1981). Identification of common molecular subsequences. Journal of Molecular Biology, 147, 195-197. Vapnik, V. (1998). Statistical Learning Theory: Adaptive and learning systems for signal processing, communications, and control. New York: Wiley. Vert, J-P. (2002). A tree kernel to analyze phylogenetic profiles. Bioinformatics, 18, S276S284. Watkins, C. (1999). Dynamic alignment kernels. In A. J. Smola, P. Bartlett, B. SchÄolkopf, & C. Schuurmans (Ed.), Advances in large margin classifiers. Cambridge, MA: The MIT Press. Woese, C. (1987). Bacterial evolution. Microbial Rev., 51, 221-271. Zhang, K., Wang, J. T. L., & Shasha, D. (1996). On the editing distance between undirected acyclic graphs. International Journal of Foundations of Computer Science, 7, 43-58. Zhang, S., Liao, L., Tomb, J-F., Wang, J. T. L. (2002). Clustering and classifying enzymes in metabolic pathways: Some preliminary results. In ACM SIGKDD Workshop on Data Mining in Bioinformatics, Edmonton, Canada (pp. 19-24).

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

32 Hsu, Chung, & Kristal

Chapter III

Methods and Practices of Combining Multiple Scoring Systems
D. Frank Hsu, Fordham University, USA Yun-Sheng Chung, National Tsing Hua University, Taiwan Bruce S. Kristal, Burke Medical Research Institute and Weill Medical College of Cornell University, USA

Combinatorial Fusion Analysis:

Abstract
Combination methods have been investigated as a possible means to improve performance in multi-variable (multi-criterion or multi-objective) classification, prediction, learning, and optimization problems. In addition, information collected from multi-sensor or multi-source environment also often needs to be combined to produce more accurate information, to derive better estimation, or to make more knowledgeable decisions. In this chapter, we present a method, called Combinatorial Fusion Analysis (CFA), for analyzing combination and fusion of multiple scoring. CFA characterizes each Scoring system as having included a Score function, a Rank function, and a Rank/score function. Both rank combination and score combination are explored as to their combinatorial complexity and computational efficiency.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

33

Information derived from the scoring characteristics of each scoring system is used to perform system selection and to decide method combination. In particular, the rank/ score graph defined by Hsu, Shapiro and Taksa (Hsu et al., 2002; Hsu & Taksa, 2005) is used to measure the diversity between scoring systems. We illustrate various applications of the framework using examples in information retrieval and biomedical informatics.

Introduction
Many problems in a variety of applications domains such as information retrieval, social / welfare / preference assignments, internet/intranet search, pattern recognition, multisensor surveillance, drug design and discovery, and biomedical informatics can be formulated as multi-variable (multi-criterion or multi-objective) classification, prediction, learning, or optimization problems. To help obtain the maximum possible (or practical) accuracy in calculated solution(s) for these problems, many groups have considered the design and integrated use of multiple, (hopefully) complementary scoring schemes (algorithms or methods) under various names such as multiple classifier systems (Ho, 2002; Ho, Hull, & Srihari, 1992, 1994; Melnik, Vardi, & Zhang 2004; Xu, Krzyzak, & Suen, 1992; Kittler & Alkoot, 2003), social choice functions (Arrow, 1963; Young, 1975; Young & Levenglick, 1978), multiple evidences, Web page scoring systems or meta searches (Aslam, Pavlu, & Savell, 2003; Fagin, Kumar, & Sivakumar, 2003; Diligenti, Gori, & Maggini, 2004), multiple statistical analysis (Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, Kao, & Hsu, 2004; Kuriakose et al., 2004), cooperative multi-sensor surveillance systems (Collins, Lipton, Fujiyoshi, & Kanade, 2001; Hu, Tan, Wang, & Maybank, 2004), multi-criterion ranking (Patil & Taillie, 2004), hybrid systems (Duerr, Haettich, Tropf, & Winkler, 1980; Perrone & Cooper, 1992), and multiple scoring functions and molecular similarity measurements (Ginn, Willett, & Bradshaw, 2000; Shoichet, 2004; Yang, Chen, Shen, Kristal, & Hsu, 2005). For convenience and without loss of generality, we use the term multiple scoring systems (MSS) to denote all these aforementioned schemes, algorithms, or methods. We further note the need for the word “hopefully” above — there are limited practical means of predicting which combinations will be fruitful — the problem we address in the remainder of this report. The main purpose in constructing multiple scoring systems is to combine those MSS’s in order to improve the efficiency and effectiveness or increase the sensitivity and specificity of the results. This purpose has been met; it has been demonstrated that combining MSS’s can improve the optimization results. Combination of multiple scoring systems has been studied under different names such as classification ensemble (Ho, 2002; Ho et al., 1992, 1994; Kittler & Alkoot, 2003; Tumer & Ghosh, 1999; Xu et al., 1992), evidence combination (Belkin, Kantor, Fox, & Shaw, 1995; Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004), data / information fusion (Dasarathy, 2000; Hsu & Palumbo, 2004; Hsu et al., 2002; Hsu & Taksa, 2005; Ibraev, Ng, & Kantor, 2001; Kantor, 1998; Kuriakose et al., 2004; Lee, 1997; Ng & Kantor, 1998, 2000), rank aggregation (Dwork, Kumar, Naor, & Sivakumar, 2001; Fagin et al., 2003), consensus scoring (Ginn et al., 2000; Shoichet, 2004; Yang et al., 2005), and cooperative surveillance (Collins et

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

34 Hsu, Chung, & Kristal

al., 2001; Hu et al., 2004). In addition, combination of MSS’s has been also used in conjunction with other machine learning or evolutional computation approaches such as neural network and evolutional optimization (Garcia-Pedrajas, Hervas-Martinez, & Ortiz-Boyer, 2005; Jin & Branke, 2005). We use the term combinatorial fusion to denote all the aforementioned methods of combination. Combination of multiple approaches (multiple query formulation, multiple retrieval schemes or systems) to solving a problem has been shown to be effective in data fusion in information retrieval (IR) and in internet meta search (Aslam et al., 2003; Belkin et al., 1995; Dwork et al., 2001; Fagin et al., 2003; Hsu et al., 2002; Hsu & Taksa, 2005; Lee, 1997; Ng & Kantor, 1998, 2000; Vogt & Cottrell, 1999). In performing classifier combination in the pattern recognition (PR) domain, rules are used to combine the output of multiple classifiers. The objective is to find methods (or rules) for building a hybrid classifier that would outperform each of the individual classifiers (Ho, 2002; Ho et al., 1992, 1994; Melnik et al., 2004). In protein structure prediction (PSP), results from different features are combined to improve the accurate predictions of secondary classes or 3-D folding patterns (C.-Y. Lin et al., 2005; K.-L. Lin et al., 2005a, 2005b). Biology may well represent a major area of future needs with respect to combinatorial fusion and related concepts. The last decade has seen an explosion in two data-driven concepts, so-called -omics level studies and in silico approaches to modeling. Omics approaches are approaches that attempt to take snapshots of an organism at a specific level, for example, simultaneously measuring all the metabolites in a tissue and reconstructing pathways. The -omics levels studies range from the four major areas (e.g., genomics — the omics field of DNA analysis; transcriptomics — the omics field of RNA analysis; proteomics—the omics field of protein analysis; metabolomics — the omics field of metabolite analysis) to very specific subareas, such as glycomics (omics approaches to glycated proteins). Omics approaches represent a shift for two reasons: (1) the amount of data inherent either prevents or forces modifications in traditional data analysis approaches (e.g., t-tests being replaced by t-tests with false discovery rate calculations); and (2) these omics level approaches lead to data-driven and/or hypothesis-generating analyses, not (at least generally) to the testing of specific hypotheses. Most importantly, by offering greatly improved ability to consider systems as a whole and identify unexpected pieces of information, these approaches have opened new areas of investigation and are, perhaps too optimistically, expected to offer fundamentally new insights into biological mechanisms and fundamentally new approaches to issues such as diagnostics and medical classification. In silico simulations are also becoming a major focus of some biological studies. There are at least two broad areas of simulation studies that are already playing major roles in biological investigations: • • in silico ligand-receptor (or drug-target) binding studies, and; in silico simulations of physiological systems.

In each of these cases, the great advantage lies not in the qualitative change empowered by technological advances, but in the quantitative savings of time and money. For

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

35

example, obtaining and testing a small chemical library for binding or inhibition can readily cost between $1 and $100 and up (per compound), considering assay costs and obtaining (or synthesizing) the compounds. In contrast, once basic algorithms and binding site models are in place, in silico screening is limited only by computational costs, which are dropping exponentially. Similarly, in silico models of physiological systems can be somewhat costly to develop, but they are capable of identifying potential targets for intervention and to determine that other targets cannot work, saving tens or hundreds of millions of dollars in failed trials. Fully utilizing the potential power of these omics and in silico based approaches, however, is heavily dependent on the quantity and quality of the computer resources available. The increases in hardware capacity, readily available software tools, database technology, and imaging and scanning techniques, have given the biomedical research community large scale and diversified data sets and the ability to begin to utilize these sets. The problem of how to manipulate, analyze, and interpret information from these biomedical data is a challenging and daunting task. Gradually biologists are discovering tools such as clustering, projection analyses, neural nets, genetic algorithms, genetic programs, and other machine learning and data mining techniques built in other fields, and these tools have found their way to the biomedical informatics domain. A major issue here lies in the choice of appropriate tools; there is, for example, no clear “informatics pipeline” for omics level studies. One can readily pick up many of software tools, but their applicability for a given problem can be difficult to determine a priori. For example, clustering is often powerful for microarray experiments, but we have shown it is very limiting within some metabolomics experiments (Shi, et al., 2002a, 2002b). Similarly, principal components analyses and its supervised cousin, Soft Independent Modeling of Class Analogy (SIMCA) seem to work very well within defined cohorts, but they breakdown in complex multi-cohort studies (Shi et al., 2002a, 2002b, 2004), a problem apparently solvable using discriminant-based projection analyses (Paolucci, VigneauCallahan, Shi, Matson, & Kristal, 2004). Thus, the choice of an analysis method must often be determined empirically, in a slow, laborious step-wise manner. For the purpose of this article, we will break these biological studies into two broad areas, one of description (i.e., how do we best understand the data in front of us) and one of prediction (i.e., how can we use this information to make predictions about, for example, which ligand will bind or which person will become ill — questions which in many ways are mathematically equivalent). The report focuses on mathematical issues related to the latter of these two broad issues, i.e., “can we use CFA to improve prediction accuracy?” The goal is a complex zero-sum game — we ideally want to further save time by reducing both false positives and false negatives, while simultaneously increasing accuracy on continuous measurements (e.g. binding strengths). In practice, it is almost certain that some trade-offs will have to be made. To be useful we must, at a minimum, identify an approach which enables some a priori decisions to be made about whether such fusion approaches are likely to succeed. Otherwise we have done nothing but to add a layer of complexity between where we are and where we need to be, without removing the time-consuming, laborious, and inherently limited stages of empirical validation. The system we choose to focus on is in virtual screening (VS), the use of in silico approaches to identify potentially optimal binding ligands. VS is an area in which consensus scoring has been used in drug design

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

36 Hsu, Chung, & Kristal

and discovery and molecular similarity measurement for years, and in which data fusion approaches have recently been a major focus of efforts. (see Shoichet, 2004; Yang et al., 2005; and their references). In this chapter, we present a method called combinatorial fusion analysis (CFA) which uses the Cayley network Cay(Sn, Tn) on the symmetric group Sn with generating set Tn (Biggs & White, 1979; Grammatikakis, Hsu, & Kraetzl, 2001; Heydemann, 1997; Marden, 1995). We study the fusion and combination process in the set Rn, called score space, where R is the set of real numbers, and in the set Sn, called rank space. In the next section, we define rank and score functions and describe the concept of a rank/score graph defined by Hsu, Shapiro and Taksa (Hsu et al., 2002; Hsu & Taksa, 2005). The combination of two scoring systems (each with rank and score functions) is discussed and analyzed in the context of a Cayley network. The next section also entails the property of combined scoring system, performance evaluation and diversity issues, and various kinds of fusion algorithms on rank functions. The section “Data Mining Using Combinatorial Fusion” deals with mining and searching databases and the Web, and includes examples from application domains in biomedical informatics, in particular in virtual screening of chemical libraries and protein structure prediction. Then, in section “Conclusion and Discussion”, we summarize our results with some discussion and future work.

Combinatorial Fusion
Multiple Scoring Systems
Successfully turning raw data into useful information and then into valuable knowledge requires the application of scientific methods to the study of the storage, retrieval, extraction, transmission, diffusion, fusion/combination, manipulation, and interpretation at each stage of the process. Most scientific problems are multi-faceted and can be quantified in a variety of ways. Among many methodologies and approaches to solve complex scientific problems and deal with large datasets, we only mention three: (a) classification, (b) clustering, and (c) similarity measurement. Hybrid methods combining (a), (b), and (c) have been used. Large data sets collected from multi-sensor devices or multi-sources or generated by experiments, surveys, recognition and judging systems are stored in a data grid G(n, m, q) with n objects in D = {d1, d2, …, dn}, m features/attributes/indicators/cues in G = {a1, a2, …, am} and, possibly, q temporal traces in T = {t1, t 2, …, tq}. We call this threedimensional grid the data space (see Figure 1). Since both m and q can be very big and the size of the datasets may limit the utility of single informatics approaches, it is difficult to use/design a single method/system because of the following reasons: 1. Different methods/systems are appropriate for different features / attributes / indicators / cues and different temporal traces. There have been a variety of

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

37

Figure 1. Data space G(n, m, q) tq t1 d1 d2 DATA SPACE dn t2 a1 a2 am

different methods/systems used/proposed in the past decades such as statistical analysis and inference (e.g., t-test, non-parametric t-test, linear regression, analysis of variance, Bayesian systems), machine learning methods and systems (e.g., neural networks, self-organizing map, support vector machines), and evolutional computations (e.g., genetic algorithms, evolutionary programming). 2. Different features / attributes / indicators / cues may use different kinds of measurements. Many different measurements have been used such as variates, intervals, ratio-scales, and binary relations between objects. So in the data grid, each column on the D-G plane aj can be an assignment of a score or a rank to each object di. For example, M(i, j) is the score or rank assigned to object di by feature/ attribute/indicator/cue aj. Different methods/systems may be good for the same problem with different data sets generated from different information sources/experiments. When different data sets generated from different information sources or experiments, different methods/systems should be used according to the style of the source and the nature of the experiment. Different methods/systems may be good for the same problem with the same data sets generated or collected from different devices/sources. Even when the data sets are the same in the same experiments, different methods/systems should be adopted according to a variety of multi-sensor/multi-sources.

3.

4.

Due to the complexity of the problem involved, items (3) and (4) indicate that each single system/method, when applied to the problem, can be improved in performance to some extent, but it is difficult to become perfect. Item (1) indicates that performance of a single system / method may be optimal for some features/attributes/indicators/cues, but may downgrade its performance for other features/attributes/indicators/cues.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

38 Hsu, Chung, & Kristal

Recently, it has been demonstrated that combination of multiple systems/methods improves the performance of accuracy, precision, and true positive rate in several domains such as pattern recognition (Brown et al, 2005; Duerr et al., 1980; Freund, Iyer, Schapire, & Singer, 2003; Garcia-Pedrajas et al., 2005; Ho, 2002; Ho et al., 1992, 1994; Jin & Branke, 2005; Kittler & Alkoot, 2003; Perrone & Cooper, 1992; Triesch & von der Malsburg, 2001; Tumer & Ghosh, 1999; Xu et al., 1992), microarray gene expression analysis (Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004; Kuriakose et al., 2004), information retrieval (Aslam et al., 2003; Belkin et al., 1995; Diligenti et al., 2004; Dwork et al., 2001; Fagin et al., 2003; Hsu et al., 2002; Hsu & Taksa, 2005; Kantor, 1998; Lee, 1997; Ng & Kantor, 1998, 2000), virtual screening and drug discovery (Shoichet, 2004; Yang et al., 2005; and references in both), and protein structure prediction (C.-Y. Lin et al., 2005; K.-L. Lin et al., 2005a, 2005b). There have been special meetings (such as the Workshop on Multiple Classifier Systems), conferences (such as International Conference on Information Fusion), societies (such as International Society of Information Fusion), and journals (e.g.: Information Fusion [Dasarathy, 2000]) dedicated to the scientific study of fusion/ combination. The main title of the featured article “The Good of the Many Outweighs the Good of the One,” by Corne, Deb, Fleming, & Knowles (2003) in IEEE Neural Networks Society typifies the scientific and philosophical merits of and motivations for fusion/ combination. Each system/method offers the ability to study different classes of outcomes, e.g., class assignment in a classification problem or similarity score assignment in the similarity measurement problem. In this chapter, we view the outcome of each system/method as a scoring system A which assigns (a) an object as a class among all objects in D, (b) a score to each object in D, and (c) a rank number to each object in D. These three outcomes were described as the abstract, score, and rank level respectively by Xu et al. (1992). We now construct the system grid H(n, p, q) with n objects in D = {d1, d2, …, dn}, p systems

Figure 2. System space H(n, p, q) tq t1 d1 d2 SYSTEM SPACE dn t2 A1 A2 Ap

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

39

in H = {A1, A2, …, Ap}, and possibly, q temporal traces in T = {t 1, t 2, …, t q}. We call this three dimensional grid the system space for the multiple scoring systems (see Figure 2). In the next section, we will define score function, rank function and the rank/score function for each scoring system A. In the section following the next, rank and score combination are defined and studied. Section “Method of Combinatorial Fusion” deals with performance evaluation criteria and diversity between and among different scoring systems.

Score Function, Rank Function and the Rank/Score Graph
Let D = {d1, d2, ..., dn} be a set of n objects and N = {1, 2, 3, …, n} be the set of all positive integers less than or equal to n. Let R be the set of real numbers. We now state the following three functions that were previously defined and studied by Hsu, Shapiro and Taksa (2002) and Hsu and Taksa (2005).

Definition 1
(a) Score Function: A score function s is a function from D to R in which the function s assigns a score (a real number) to each object in D. In a more formal way, we write s: D → R such that for every di in D, there exists a real number s(di) in R corresponding to di. Rank Function: A rank function r is a function from D to N such that the function r : D → N maps each element di in D to a natural number r(di) in N. The number r(di) stands for the rank number r(di) assigned to the object di. Rank/Score Function: Given r and s as rank and score function on the set D of objects respectively, the rank/score function f is defined to be f : N → R such that f(i) = ( s o r −1 )(i) = s(r 1(i)). In other words, the score function s = f composite function of the rank/score function and the rank function. (d)

(b)

(c)

o r is the

Rank/Score Graph: The graph representation of a rank/score function.

We note that in several application domains, one has to normalize the score function values before any combination can be performed. Hence it is quite natural to define the two functions s and f in the way that each of them has [0, 1] = {x | x in R, 0 ≤ x ≤ 1} instead of R as their function range. Other intervals of real numbers can be also used depending on the situation and environment. We also note that since the rank function r' defined by Hsu, Shapiro and Taksa (see Hsu et al., 2002; Hsu & Taksa, 2005) is the inverse of r defined above, the rank/score function f would be such that f = s°r' instead of f = s°r'–1 . At this point, we would like to comment on some perspectives regarding rank vs. score function. Although these two functions both deal with the set of objects under study (in the case of PR, IR, VS and PSP, these would be classes, documents, chemical

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

40 Hsu, Chung, & Kristal

compounds, and classes or folding patterns, respectively), their emphases are different. The Score function deals more with the detailed data level while Rank function is more relevant for or related to the decision level. In theory, the Score function depends more on the variate data in the parametric domain while the Rank function depicts more on the ordinal data in the non-parametric fashion. The comparison can go on for a long time as score vs. rank, data level vs. decision level, variate data vs. ordinal data, and parametric vs. non-parametric. Historically and from the discipline perspective, scores are used in sciences, engineering, finance, and business, while ranks are used in social choices, ordinal data analysis and decision science. However, in biomedical informatics, since the data collected is large (and of multiple dimension) and the information we are seeking from biological and physiological systems is complex (and multi-variable), the information we find (or strive to find) from the relation between score and rank function would become valuable in biological, physiological, and pharmaceutical study. The concept of a rank/score graph which depicts the graph representation of a rank/score function has at least three characteristics and advantages:

Remark 1
(a) Efficiency: When a score function s A is assigned resulting from scoring system A by either lab work or field study (conducted in vivo or in vitro), treating s A as an array and sorting the array of scores into descending order would give rise to the rank function rA. The rank/score function can be obtained accordingly. If there are n objects, this transformation takes O(n log n) steps. Neutrality: Since the rank/score function f is defined from N to R or from N to [0, 1], it does not depend on the set of objects D = {d1, d2, …, dn}. Hence the rank/score function fA of a scoring system A exhibits the behavior of the scoring system (scorer or ranker) A and is independent of who (or which object) has what rank or what

(b)

Figure 3. Score function, Rank function and Rank/Score function of A and B

D d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 sA(di) 4 10 4.2 3 6.4 6.2 2 7 0 1 rA(di) 6 1 5 7 3 4 8 2 10 9 (a) Score and Rank function for A D d1 sB(di) 4 rB(di) 7 N fA(i) fB(i) d2 d3 d4 d5 d6 d7 d8 d9 7 3 1 10 8 5 6 9 4 8 10 1 3 6 5 2 (b) Score and Rank function for B d10 2 9

4 5 6 7 8 9 1 2 3 10 7 6.4 6.2 4.2 4 3 2 1 10 9 8 7 6 5 4 3 2 (c) Rank/Score function for A and B

10 0 1

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

41

Figure 4. Rank/Score graphs of fA and f B
12 10 8

score 6
4 2 0 1 2 3 4 5 6 7 8 9 10 rank
f

fB(i) fA(i)

score. The rank/score function f also fills the gap of relationship between the three sets D, N and R. (c) Visualization: The graph of the rank/score function f A can be easily and clearly visualized. From the graph of fA, it is readily concluded that the function fA is a nonincreasing monotonic function on N. The thrust of this easy-to-visualize property is that comparison (or difference) on two functions fA and fB can be recognized by drawing the graph of f A and f B on the same coordinate system.

Two examples of score functions, rank functions (derived from score function), rank/ score functions with respect to scoring systems A and B are illustrated in Figure 3 and the rank / score graphs of fA and fB are included in Figure 4, where D = {di | i = 1 to 10} and s(di) is in [0, 10].

Rank and Score Combination
As mentioned earlier, the combinations (or fusions) of multiple classifiers, multiple evidences, or multiple scoring functions in the PR, IR, VS, and PSP domain has gained tremendous momentum in the past decade. In this section, we deal with combinations of two functions with respect to both score and rank combinations. The following definitions were used by Hsu, Shapiro, and Taksa (2002) and Hsu and Taksa (2005).

Definition 2
(a) Score Combinations: Given two score functions sA and sB, the score function of the score combined function s F is defined as s F(d) = 1 [ s A (d ) + s B (d )] for every object 2 d in D.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

42 Hsu, Chung, & Kristal

Figure 5. Score and Rank function of E and F
D d1 sE(di) 6.5 rE(di) 6 d2 2.5 2 d3 6.5 4 d4 8.5 9 d5 2 1 d6 3.5 3 d7 7 8 d8 3.5 7 d9 6 5 d10 9 10

(a) Score and rank function of E d1 D sF(di) 4.0 rF(di) 6 d2 8.5 1 d3 3.6 7 d4 2.0 9 d5 8.2 2 d6 7.1 3 d7 3.5 8 d8 6.5 4 d9 4.5 5 d10 1.5 10

(b) Score and rank functions of F

(b)

Rank Combinations: Given two rank functions rA and rB, the score function of the rank combined function s E is defined as s E (d) = 1 [rA (d ) + rB (d )] for every object d 2 in D.

Since each of the scoring systems A and B has their score and rank function s A, rA and s B, r B respectively, each of the combined scoring systems E and F (by rank and by score combination) has sE, rE and s F, r F, respectively. These functions can be obtained as follows. The score function of the rank combination s E is obtained from rA and rB using rank combination. Sorting sE into ascending order gives rise to rE. The score function of the score combination s F is obtained from sA and s B using score combination. Sorting sF into descending order gives rise to r F. Hence for scoring systems E and F, we have the score function and rank function sE, rE and s F, r F respectively. We note the difference between converting from s E to r E and that from sF to r F. Since the scoring systems E and F are rank and score combination of A and B respectively, the transformation from s E to r E is by sorting into ascending order while that from s F to r F is by sorting into descending order. The fusion architecture given by Hsu, Shapiro and Taksa (Figure 5 in Hsu & Taksa, 2005) depicts the framework for the fusion method we use. Figure 5(a) and (b) show the rank and score function of the rank and score combination E and F (both related to the scoring systems A and B in Figure 3) respectively. The reader might have noticed that in the combination (rank or score), a simple average combination was used. Combination using weighted proportion on A and B is studied in Hsu and Palumbo (2004). Recall that the main purpose of doing fusion/combination is whether or not the fused scoring system can outperform each individual scoring system in isolation. The concept of “performance” has to be defined for a given study (or, arguably, a given class of studies), so that it is meaningful to say “outperform”. Recall also that our fusion framework is for application domains such as PR, IR, VS and PSP. In PR, each classifier

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

43

produces a ranking of a set of possible classes. When given an image, each of the classifiers including the combined gives rise to a rank function and the class that was ranked at the top is predicted by the classifier as the identity of the image. So the performance (or accuracy) of the classifier A, written P(A), is the percentage of times that this classification gives a correct prediction. From the perspective of biology and medicine, P(A) may be defined as the reduction of false negatives (e.g., in cancer diagnostic) or the reduction of false positives (e.g., in screens of related compounds where follow-up is expensive). In IR, a query Q is given. Then each of the ranking algorithms calculates similarity between the query and the documents in the database of n documents D = {d1, d2 . . ., dn}. A score function s A for algorithm A is assigned and a rank function rA is obtained. The performance of the algorithm for the query, written Pq(A), is defined as the precision of A at q with respect to the query Q. More specifically, the following is defined and widely used in the information retrieval community.

Definition 3
(a) Let Rel(Q) be the set of all documents that are judged to be relevant with respect to the query Q. Let |Rel(Q)| = q for some q, 0 ≤ q ≤ n. On the other hand, let A(k) = {d | d in D and r A(d) ≤ k}. Precision of A at q. The performance of the scoring system A with respect to the query Q is defined to be Pq(A) = |Rel(Q) ∩ A(q) | / q, where q = |Rel(Q)|.

(b)

In VS, molecular compound libraries are searched for the discovery of novel lead compounds for drug development and/or therapeutical treatments. Let L be the total number of active ligands and T the total number of compounds in the database. Let L h be the number of active ligands among the Th highest ranking compounds (i.e., the hit list). Then the goodness-of-hit (GH) score for a scoring system A is defined as (see Yang et al., 2005):
 L (3L + Th )  Th − Lh  GH ( A) =  h  4T L 1 − T − L  .   h  

The GH score ranges from 0.0 to 1.0, where 1.0 represents a perfect hit list. The GH score as defined in Yang et al. (2005) contains a coefficient to penalize excessive hit list size. We will come back to this topic in section “Virtual Screening and Drug Discovery”. In the protein structure prediction problem (PSP), one wishes to extract structural information from the sequence databases as an alternative to determine the 3-D structure of a protein using the X-ray diffraction or NMR (resource and labor intensive, expensive, and, in practice, often difficult or impossible, particularly when one deals with variably modified proteins). Given a protein sequence, the objective is to predict its secondary structure (class) or its 3-D structures (folding patterns). The standard performance

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

44 Hsu, Chung, & Kristal

evaluation for the prediction of the ni protein sequences T i = {t 1, t 2, ..., tni} for the ith class or ith folding pattern is the percentage accuracy rate Qi = Q(Ti) = (pi / ni) × 100, where ni is the number of testing proteins in the ith class or ith folding pattern and pi is the number of proteins within the ni protein sequences correctly predicted. The overall prediction accuracy rate Q is defined as Q = ∑ik=1 qi Qi , where qi = ni / N, N is the total number of proteins tested (i.e., N = ∑ik=1 ni ) and k is the number of classes or folding patterns. Now we come back to the fundamental issue of when the combined scoring system E or F outperforms its individual scoring system A and B. The following two central questions regarding combination and fusion were asked by Hsu, Shapiro, and Taksa (2002) and Hsu and Taksa (2005):

Remark 2
(a) (b) For what scoring systems A and B and with what combination or fusion algorithm, P(E) (or P(F)) ≥ max{P(A), P(B)}, and For what A and B, P(E) ≥ P(F)?

Four important issues are central to CFA: (1) What is the best fusion algorithm / method to use? (2) Does the performance of E or F depend very much (or how much) on the relationship between A and B? (3) Given a limited number of primary scoring systems, can we optimize the specifics of the fusion? and (4) Can we answer any or all of the previous three issues without resorting to empirical validation? The general issue of combination algorithm / method will be discussed in the next section. In this section, we simply use the average combination regardless of rank or score combination. Arguably, issues (1) and (2) may be considered primary issues, and issues (3) and (4) secondary or derivative. We propose that issue (2) is as, if not more, important as issue (1). It has been observed and reported extensively and intensively that the combined scoring system E or F performs better than each individual scoring system A and B when A and B are “different”, “diverse”, or “orthogonal”. In particular, Vogt and Cottrell (1999) studied the problem of predicting the performance of a linearly combined system and stated that the linear combination should only be used when the individual systems involved have high performance, a large overlap of relevant documents, and a small overlap of non-relevant documents. Ng and Kantor (2000) identified two predictive variables for the effectiveness of the combination: (a) the output dissimilarity of A and B, and (b) the ratio of the performance of A and B. Then Hsu, Shapiro and Taksa (2002) and Hsu and Taksa (2005) suggested using the difference between the two rank/score functions fA and f B as the diversity measurement to predict the effectiveness of the combination. This diversity measurement has been used in microarray gene expression analysis (Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004) and in virtual screening (Yang et al., 2005). We will discuss in more details the use of graphs for rank/ score functions fA and fB in the diversity measurement between A and B in section “Virtual Screening and Drug Discovery”.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

45

Method of Combinatorial Fusion
As defined in section “Score Function, Rank Function and the Rank/Score Graph”, a rank function rA of a scoring system A is an one-one function from the set D = {d1, d2, …, dn} of n objects to the set N of positive integers less than or equal to n. When considering rA as a permutation of N, we have rA(D) = [rA(d1), rA(d2), …, rA(dn)]. Without loss of clarity, we write r instead of r A. Since the set of all permutations of the set N is a group with the composition α°β as the binary operation, called symmetric group Sn, r(D) as a permutation of N is an element in the group Sn. Each element a in Sn has two different ways of representation as [α(1), α(2), ..., α(n)]=[α1, α2, ... ,αn]=[α1 α2 α3 ... αn] called standard representation and as the product of disjoint cycles each consisting of elements from N called cycle representation. The general concept of a Cayley graph (or network) can be found in the book and article (Grammatikakis et al., 2001; Heydemann, 1997).

Definition 4
(a) Example of Permutations: The permutation a(i) = 2i for i = 1, 2, 3 and 2i – 7 for i = 4, 5, 6 in S6 can be written as [2 4 6 1 3 5] and (124) (365). The permutation b(i) = i for i = 1, 4, 5, 6 and b(2) = 3, b(3) = 2 can be written as b = [1 3 2 4 5 6] = (23). Note that in the cycle representation, we ignore the cycles that are singletons. In the group Sn, the set of n – 1 adjacent transpositions such as b= (23) in S6 is denoted as Tn. In other words, Tn consists of all cycles of length 2 which are adjacent transpositions and Tn = {(1 2), (2 3), …, (n – 1 n)} is a subset of Sn. With this in mind, we can define a Cayley network based on Sn and Tn: Cayley network Cay (Sn, Tn): The Cayley network Cay(Sn, Tn) is a graph G(V, E) with the node set V = Sn and arc set E = {(α, α o t ) | α in Sn and t in Tn}. The concept of a Cayley network extends the group structure in Sn to the graph structure in Cay(Sn, Tn). By doing so, a distance measure between any two permutations (and hence any two rank functions) is well defined in the context of applications that will prove to be very useful in biomedical informatics. In fact, it has been mentioned by Hsu, Shapiro and Taksa (2002) and Hsu and Taksa (2005) that the graph distance in Cay(Sn, T n) is the same as Kendall’s tau distance in the rank correlation analysis (RCA) (see e.g., Kendall &Gibbons, 1990; Marden, 1995). This striking coincidence supports the importance and usefulness of using Cayley networks as a framework for fusion and combination. Moreover, we point out that the combinatorial fusion we proposed and the rank correlation studied by many researchers in the past bear similarity but have differences. They are very similar because they all study ranks although one treats ranks as a function and the other treats them as ordinal data or the order of the values of a random variable. On the other hand, they are quite different. The CFA (combinatorial fusion analysis) views the set Sn as a rank space aiming to produce a dynamic process and reasonable

(b)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

46 Hsu, Chung, & Kristal

algorithms to reach a better combined rank function (or in general, combined scoring system). The RCA (rank correlation analysis) views the set Sn as a population space aiming to calculate the static correlation and significant P-value to reach a hypothesis testing result. Suppose we are given the following p rank functions Aj obtained from the data set D = {d1, d2, …, dn}, Aj, j = 1, 2, …, p: Aj = (a1j, a2j, a3j, …, anj)t, where Vt is the transpose of the vector V. Let Mr be the matrix, called rank matrix, with dimension n × p such that Mr(i, j) = M(i, j) = the rank assigned to the object di by scoring system Aj. Now, we describe the rank version of the combinatorial fusion problem.

Definition 5
Combinatorial Fusion Problem (rank version): Given p nodes Aj, j = 1, 2, …, p in the Cayley network Cay(Sn, T n) with respect to n objects D = {d1, d2, …, dn}, find a node A* in Sn which “performs” as good as or better than the best of Aj’s in the sense of performance as defined as accuracy, precision or goodness-of-hit in IR, VS and PSP described previously. There are several ways to find the candidates for the node A* when given the p nodes Aj, j = 1, 2, …, p in Sn. We briefly describe, in Definition 6, the following six types of methods / algorithms to fuse the given p nodes and generate the candidate node. All of these approaches aim to construct a score function which, when sorted, would lead to a rank function.

Definition 6
(a) Voting: Scoring function s*(d), d in D. The score of the object di, s *(di), is obtained by a voting scheme among the p values M(i, j), j = 1, 2, …, p. These include max, min, and median. Linear Combination: These are the cases that s*(di) is a weighted linear combination of the M(i, j)’s, i.e., s * (d i ) = ∑ p=1 w j ⋅ M (i, j ) for some weighted function so that j p ∑ j =1 w j = 1 . When wj = 1/p, s*(di) is the average of the ranks M(i, j)’s, j = 1, 2, . . ., p.

(b)

(c)

Probability Method: Two examples are the Bayes rule that uses the information from the given p nodes Aj, j = 1, 2, …, p to predict the node A*, and the Markov Chain method that calculates a stochastic transition matrix. Rank Statistics: Suppose that the p rank functions are obtained by the p scoring systems or observers who are ranking the n objects. We may ask: what is the true ranking of each of the n objects? Since the real (or true) ranking is difficult to come

(d)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

47

by, we may ask another question: What is the best estimate of the true ranking when we are given the p observations? Rank correlation among the p rank functions 2 can be calculated as W = 12S / [p2(n3 - n)], where S = ∑in=1 Ri − np 2 (n + 1) 2 / 4 and p Ri = ∑ j =1 M (i, j ) . The significance of an observed value of W is then tested in the (n!)p possible sets of rank functions. (e) Combinatorial Algorithm: For each of the n objects and its set of p elements {M(i, j) | j = 1, 2, …, p} = C as the candidate set for s *(di), one combinatorial algorithm considers the power set 2C and explores all the possible combinatorial combinations. Another algorithm treats the n objects as n vectors di = (ai1, ai2, …, aip) where aij = M(i, j), i = 1, 2, …, n and 1 ≤ aij ≤ n. It then places these n vectors in the context of a partially ordered set (Poset) L consisting of all the np vectors (ai1, ai2, …, aip), i = 1, 2, …, n and aij in N. The scores s*(di), i = 1, 2, …, n is then calculated based on the relative position of the vector di in the Poset L. Evolutional Approaches: Genetic algorithms and other machine learning techniques such as neural networks and support vector machines can be used on the p rank functions to process a (large) number of iterations in order to produce a rank function that is closest to the node A*.

(f)

The voting schemes in Definition 6 (a) have been used in social choice functions (Arrow, 1963; Young & Levenglick, 1978). Linear combination and average linear combination in 6(b), due to their simplicity, have been widely used in many application domains (Kendall & Gibbons, 1990; Kuriakose et al., 2004; Hsu & Palumbo, 2004; Hsu et al., 2002; Hsu & Taksa, 2005; Vogt & Cottrell, 1999). In fact, the concept of Borda count, used by JeanCharles de Borda of the L’Academie Royale des Sciences in 1770, is equivalent to the average linear combination. Dwork et al. (2001) used Markov chain method to aggregate the rank functions for the Web. As described in Definition 6(d), the significance of S depends on the distribution of S in the (n!)p possible set of rank functions. Due to the manner that S is defined, it may be shown that the average linear combination gives a “best” estimate in the sense of Spearman’s rho distance (see Kendall & Gibbons, 1990, Chapter 6). Combinatorial algorithms stated in Definition 6(e) have been used in Mixed Group Ranks and in Rank and Combine method by researchers (Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004; Melnik et al., 2004). Although genetic algorithms such as GemDOCK and GOLD were used to study the docking of ligands into a protein, the authors in Yang et al. (2005) use linear combination and the rank/score graph as a diversity measurement. We will discuss the application in more details in next section. Definition 6 lists six different groups of methods/algorithms/approaches for performing combination. Here we return to the second issue raised by Remark 2. That is: What are the predictive variables / parameters / criteria for effective combination? In accordance with Remark 2, we focus on two functions A and B (i.e. p = 2) at this moment although the methods / algorithms / approaches in Definition 6, are able to deal with the multiple functions (p ≥ 2). We summarize, in Definition 7, the two variables for the prediction of effective combination among two scoring systems A and B (Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004; Hsu et al., 2002; Hsu & Taksa, 2005; Ng & Kantor, 2000; Vogt & Cottrell, 1999; Yang et al., 2005).

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

48 Hsu, Chung, & Kristal

Definition 7
(a) The performance ratio, Pl / Ph, measures the relative performance of A and B where Pl and Ph are the lower performance and higher performance among {P(A), P(B)} respectively. The bi-diversity between A and B, d2(A, B), measures the “difference / dissimilarity / diversity” between the two scoring systems A and B.

(b)

We note that in order to properly use diversity d2(A, B) as a predictive parameter for effective combination of functions A and B, d2(A, B) might be defined to reflect different combination algorithms and different domain applications. However, for the diversity measurement to be effective, it has to be universal at least among a variety of data sets in applications domain. Diversity measurement between two scoring systems A and B, d2(A, B) have been defined and used (see Chuang, Liu, Brown, et al., 2004; Chuang, Liu, Chen, et al., 2004; Ng & Kantor, 2000; Yang et al., 2005). We summarize in Definition 8.

Definition 8
Diversity Measure: The bi-diversity (or 2-diversity) measure d2(A, B) between two scoring systems A and B can be defined as one of the following: (a) d2(A, B) = d(s A, sB), the distance between score functions s A and sB. One example of d(sA, sB) is the covariance of s A and s B, Cov(s A, s B), when s A and sB are viewed as two random variables, d2(A, B) = d(rA, rB), the distance between rank functions r A and r B. One example of d(rA, rB) is the Kendall’s tau distance as we defined in Sn, and d2(A, B) = d(fA, f B), the distance between rank/score functions f A and fB.

(b) (c)

We note that diversity measure for multiple classifier systems in pattern recognition and classification has been studied extensively (Kuncheva, 2005).

Definition 9
In the data space G(n, m, q), m = 2, defined in Figure 1, given a temporal step ti in T = {t 1, t 2, …, t q} and the two scoring systems A and B, we define: (a) (b) (c)
d ti ( A, B ) = ∑ j | f A ( j ) − f B ( j ) |, where j is in N = {1, 2, …, n}, as the function value of the diversity score function dx(A, B) for ti;

if we let i vary and fix the system pair A and B, then s(A,B)(x) is the diversity score function, defined as s (A,B)(ti) = d t ( A, B) , from T = {t1, t 2, …, t q} to R;
i

sorting s(A,B)(x) into ascending order leads to the diversity rank function r (A,B)(x) from T to {1, 2, …, q}; and then

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

49

(d) (e)

the diversity rank/score function f(A,B)(j) can be obtained as f(A,B)(j)= ( s( A,B ) o r(−1, B ) )( A )( j ) = s( A,B ) (r(−1,B ) ( j )) , where j is in {1, 2, …, q}; A the diversity rank/score graph (or diversity graph) is the graph representation of the diversity rank/score function f(A,B)(j) from {1, 2, …, q} to R.

We note the difference between the rank/score function and the diversity rank/score function. In the definition of rank/score function fA: N → [0, 1] (see Definition 1(c)), the set N is different from the set D which is in turn the set of objects (classes, documents, ligands, and classes or folding patterns). The set N is used as the index set for the rank function values. The rank/score function fA so defined describes the scoring (or ranking) behavior of the scoring system A and is independent of the objects under consideration. The diversity rank/score function (see Definition 9(d)) f (A,B)(j) is defined from Q = {1, 2, . . ., q} to R (or [0, 1]). The set Q is different from the set T = {t1, t 2, …, tq} which is the set of temporal steps under study. The set Q is used as the index set for the diversity rank function values. The diversity rank/score function f(A,B) so defined describes the diversity trend of the pair of scoring systems A and B and is independent of the specific temporal step t i for some i under study.

Data Mining Using Combinatorial Fusion
In this section, we present three examples of data mining using combinatorial fusion as defined in the previous section. These three examples are from applications in information retrieval (IR) (Hsu et al, 2002; Hsu & Taksa, 2005; Ng & Kantor, 1998, 2000), consensus scoring in virtual screening (VS) (Yang et al., 2005), and protein structure prediction (PSP) (C.-Y. Lin et al., 2005; K.-L. Lin et al., 2005a, 2005b). But before we concentrate on special cases, we will further discuss the relation between rank and score functions as defined in the previous section.

Rank/Score Transfer
Let M r(i, j) be the rank matrix defined before, where M ij in Mr(i, j) is the rank assigned to the object di by scoring system Aj. Let Ms(i, j) be the n × p score matrix defined similarly with respect to the p score functions so that M ij (without ambiguity) in Ms(i, j) is the score value assigned to the object di by scoring system Aj. The algorithms and approaches described in Definition 6 can be applied to the rank matrix M r. However, some of these algorithms have been also applied to the score matrix Ms. Up to this point in this chapter, we have emphasized rank combination algorithms and considered ranks of objects as the basic data of a given situation / experiment / work, regardless of the manner in which they were obtained. However, in many situations, the ranking takes place according to the score values of a variable or variate. It is, therefore, of considerable interest to study the

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

50 Hsu, Chung, & Kristal

relationship between Mr(i, j) and M s(i, j). As we mentioned before, M r(i, j) can be derived from Ms(i, j) by sorting each column, Aj, into descending order and assigning higher value with higher rank (i.e., smaller number). One of the interesting questions is that: Is there any difference between the information represented by Ms(i, j) and that by Mr(i, j)? In 1954, A. Stuart showed the following (see Kendall & Gibbons, 1990, Chapters 9, 10):

Remark 3 (Correlation between Scores and Ranks)
With n = 25, the correlation between scores and ranks for a scoring system (ranker/scorer) A is as high as 0.94 under the assumption of normal distribution and 0.96 for the uniform distribution among the score values. These values increase when the sample size (i.e., the number n) increases and reach the limits of 0.98 and 1, for normal and uniform distribution, respectively. In light of this close relationship between ranks Mr(i, j) and scores Ms(i, j), we might expect that operating on Mr(i, j) and on Ms(i, j) would draw the same conclusion. This appears to be so in a number of special cases. But in general, it has to be approached with certain amount of caution and care. It is clear, for example, that a few points with comparatively high residuals (i.e. poor correlations) would not have major effects on the overall correlation and correlation structure of the dataset, but these outliers may well be the key target of the investigation. We list the special features of transforming from Ms(i, j) to Mr(i, j).

Remark 4 (Rank/Score Transfer)
When transforming from a score function s A to a rank function r A on n objects, we have: (a) (b) the dimension of sample space is reduced from Rn for the score space to Nn (and then N! because of permutation) for the rank space, and the score function values have been standardized to the scale while the mean is fixed for every rank function.

Remark 4(a) states that dimension reduction is obtained by a rank/score transform process that gives rise to the concept of a rank/score function, and the rank/score graph has at least three advantages: efficiency, neutrality, and visualization (see Remark 1). Remark 4(b) states that in M r(i, j), the mean of each column (a rank function on the n objects) is fixed to be (n + 1)/2. The same phenomenon is also true for some score data under certain cases of specific functions and study objectives. However, we note that when non-parametric and ordinal rank data is used, emphasis is not on the mean of the data. Rather it is on the discrete order and position each of the rank data is placed. We recall that fully ranked data on n objects are considered as rank functions on the symmetric group of n elements Sn. Since Sn does not have a natural linear ordering, graphical methods such as histograms and bar graphs may not be appropriate for displaying ranked data in Sn. However, a natural partial ordering on Sn is induced in the Cayley network Cay(Sn, Tn). Moreover, since a polytope is the convex hull of a finite set of points in Rn-1, the n! nodes in Cay(Sn, Tn) constitute a permutation polytope when regarded as vectors in Rn (see Marden, 1995; McCullagh, 1992; Thompson, 1992). In fact,
Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

51

Figure 6. Nodes in Cay(S3, T3) and Cay(S4, T 4), (a) six nodes in Cay(S3, T 3), and (b) 24 nodes in Cay(S4, T4)
123 213

132

231

312

321

(a)
1324 1234 3124 2134 1243 3214 2314 2143 1423 3241 2341 2413 2431 4123 3421 4312 4213 4321 4231 4132 3412 1432 1342 3142

(b)

the n! nodes of Cay(Sn, Tn) lie on the surface of a sphere in Rn-1. The six nodes and twenty four nodes of Cay(S3, T3) and Cay(S4, T4) are exhibited in Figure 6(a) and 6(b), respectively.

Information Retrieval
We now turn to the application of these data mining techniques to the information retrieval domain. We use as an example the study by Ng and Kantor (1998, 2000) (We call this the NK-study). Their exploratory analysis considered data from TREC competition with 26 systems and 50 queries for each system on a large but fixed database consisting of about 1000 documents. The results from these 26 systems are then fused in a paired manner. As such, there are [(26 × 25) / 2] × 50 = 16, 250 cases of data fusion in the training data set. In 3,623 of these cases, the performance measures, as P100, of the combined system is better than the best of the two original systems. We refer to these as positive cases. There are 9,171 negative cases where the performance of the combined system is worse than the best of the two original systems. In order to understand these two outcomes, two predictive variables are used. The first is the ratio of P100, r = Pl / Ph (see Definition 7(a)). The second variable is the normalized dissimilarity z = d(rA, rB) (see

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

52 Hsu, Chung, & Kristal

Definition 8(b)). We summarize the results of the NK-study as follows. See Figure 7 for an illustration.

Remark 5 (NK-study)
The results of the NK-study shows that (a) the positive cases tend to lie above the diagonal line r + z = 1, and (b) the negative cases are more likely to scatter around the line r + z = 1. Remark 5 gives the general trend as to where the positive cases and negative cases should fall. There are very few negative cases with small r and small z and comparatively very few cases with high r and high z. Since the negative cases all spread around the line r + z = 1, z approaches 0 as r approaches 1 and vice versa. This means that for the negative cases, when the performances P100 of the two IR systems are about the same, their rank functions are similar to each other. For the positive cases, it was found that there are very few cases with small r and z and comparatively few cases with large r and z. But as Remark 5(a) indicated, the positive cases are more likely to lie above the diagonal r + z = 1. This indicates that systems with dissimilar (i.e., diverse) rank functions but comparable performance are more likely to lead to effective fusion.

Virtual Screening and Drug Discovery
We now turn to the application of the data mining technique to biomedical informatics. In particular, we discuss in more details the study by Yang et al. (2005) (we call this paper the YCSKH-study). The study explores criteria for a recently developed virtual screening technique called “Consensus Scoring” (CS). It also provides a CS procedure for improving the enrichment factor in CS using combinatorial fusion analysis (CFA) techniques and explores diversity measures on scoring characteristics between individual scoring functions. In structure-based virtual screening, a docking algorithm and a scoring function are involved (see Shoichet, 2004, and its references). The primary purpose for a docking program is to find out the most favorable combination of orientation and conformation (Pose). It also requires a comparison of the best pose (or top few poses) of a given ligand with those of the other ligands in chemical data base such that a final ranking or ordering can be obtained. In essence, VS uses computer-based methods to discover new ligands on the basis of biological structure. Although it was once popular in the 1970s and 1980s, it has since struggled to meet its initial promise. Drug discovery remains dominated by empirical screening in the past three decades. Recent successes in predicting new ligands and their receptor-bound structure have re-invigorated interest in VS, which is now widely used in drug discovery. Although VS of molecular compound libraries has emerged as a powerful and inexpensive method for the discovery of novel lead compounds, its major weakness — the inability to consistently identify true positive (leads) — is likely due to a lack of understanding of the chemistry involved in ligand binding and the subsequently

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

53

Figure 7. The two predictive variables proposed in NK-study — r and z, and the regions that positive and negative cases are most likely to scatter around
1

z

0.5

Positive Cases Negative Cases

0 0 0.5 r 1

imprecise scoring algorithms. It has been demonstrated that consensus scoring (CS), which combines multiple scoring functions, improves enrichment of true positions. Results of VS using CS have largely focused on empirical study. The YCSKH-study is one attempt to provide theoretical analysis using combinatorial fusion (Yang et al., 2005). The YCSKH-study developed a novel CS system that was tested for five scoring systems (A, B, C, D, and E) with two evolutionary docking algorithms (GemDOCK and GOLD) on four targets: thymidine kinase (TK), human dihydrofolate reductase (DHFR), and estrogen receptors (ER) of antagonists and agonists (ERA). Their scoring systems consist of both rank-based and score-based CS systems (RCS and SCS). They used the GH (goodness-of-hit) score to evaluate the performance of each individual and combined systems. That is, P(A) = GH score of the system A. Two predicative variables are used: (a) the performance ratio PR(A, B) = Pl/Ph and (b) the diversity measure d2(fA, fB) as defined in Definitions 7 and 8 (see Yang et al., 2005). PR(A, B) = Pl / Ph = min{P(A), P(B)} / max{P(A), P(B)}, and
2 n  d 2 ( f A , f B ) = ∑ f A ( j ) − f B ( j ) / n  j =1  

(

)

1/ 2

,

where P(A) and P(B) are the performances of the two scoring systems A and B to be combined.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

54 Hsu, Chung, & Kristal

Figure 8. Positive and negative cases w.r.t. P l / P h and d 2(f A, f B)
1.00 0.90 0.80 0.70
g(d 2(f A, f B))

0.60 0.50 0.40 0.30 0.20 0.10 0.00 0.00 0.20 0.40 g(P l/P h ) 0.60 0.80 1.00

Let g(x) denote the normalization function for the two predictive variables PR(A, B) and d2(fA, fB) so that g(x) is in [0, 1]. Their results regarding bi-diversity and combination of two scoring systems are summarized in the following remark where we use x and y as the coordinates for g(P l / P h) and g(d 2(f A, f B)) respectively (see Figure 8).

Remark 6 (YCSKH-study)
The YCSKH-study shows that numbers of positive and negative cases split into roughly half and (a) most of the positive cases are located above the line x + y = 1 while none of the few cases below the line have both x ≤ 0.30 and y ≤ 0.30., and (b) most of the negative cases tend to be located below the line x + y = 1 while only one of the few cases above the line have both x ≥ 0.50 and y ≥ 0.50. The exceptional case has g(d2(fA, fB)) ≈ 0.60 and g(PR(A, B))≈ 0.95 but both Pl and Ph are very small. Remark 6 reconfirms that combining two scoring systems (rank function or score function) improves performance only if (a) each of the individual scoring systems has relatively high performance and (b) the scoring characteristics of each of the individual scoring systems are quite different. This suggests that the two systems to be combined have to be fairly diverse so that they can complement each other, and the performance of each system has to be good, although we cannot yet quantitate/constrain the quality of “good” outside of our specific study.

Protein Structure Prediction
Following their previous work establishing a hierarchical learning architecture (HLA), two indirect coding features, and a gate function to differentiate proteins according to their classes and folding patterns, C.-Y. Lin et al. (2005) and K.-L. Lin et al. (2005a, 2005b) have used combinatorial fusion to improve their prediction accuracy on the secondary

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

55

class structure and/or 3-D folding patterns. Using 8 and 11 features respectively (i.e., scoring systems) and neural networks as a multi-class classifier to build HLA, they adopted the radical basis function network (RBFN) model to predict folding pattern for 384 proteins. In other words, in the system space M(n, p, q) defined in Figure 2, the number of scoring systems p = 8 or 11 and the number of temporal steps q = 384. The work by C.-Y. Lin et al. (2005) using 8 features has an overall prediction rate of 69.6% for the 27 folding categories, which improves previous results by Ding and Dubchak (2001) of 56% and by Huang et al. (2003) of 65.5%. The work by K.-L. Lin et al. (2005a, 2005b), using CFA to facilitate feature selection using 11 features, achieves a prediction accuracy of 70.9% for 27 folding patterns. Both works utilize the concept of diversity rank/score graph (Definition 9(e)) to select features to combine. In C.-Y. Lin et al. (2005), the scoring systems (features in this case) E, F, G, H are selected from the eight features {A, B, C, D, E, F, G, H}. Then the diversity rank/score functions for the six pairs of the four scoring systems E, F, G, H, are calculated (see Figure 9), where the diversity rank/score graph for the pair (E, H) is found to have the highest overall value across the q = 384 protein sequences tested. Hence E and H are considered to have the highest diversity among the six pairs of scoring systems. The best result was obtained by combining these two scoring systems E and H. The work by K.-L. Lin et al. (2005a, 2005b) uses 11 features and has selected H, I, K out of 11 features {A, B, C, D, E, F, G, H, I, J, K} because of their higher individual performance. The diversity rank/score function is then calculated for any pair among H, I, K (see Figure 10). From the graphs of these three functions, they conclude that the pair H, I has the highest diversity across the q = 384 protein sequences tested. This pair of scoring systems H and I are then used to perform combination to achieve the desired result.

Conclusion and Discussion
In this chapter, we have described a method, called Combinatorial Fusion Analysis (CFA), for combining multiple scoring systems (MSS) each of which is obtained from a set of homogeneous or heterogeneous features/attributes/indicators/cues. The method (CFA) is based on information obtained from multi-variable (multi-criterion/multiobjective) classification, prediction, learning or optimization problems, or collected from multi-sensor / multi-source environments or experiments. We distinguished between the data space (see Figure 1) which consists of using features/attributes/ indicators/cues to describe objects (e.g., pattern classes / documents / molecules / folding patterns), and the system space (see Figure 2), which consists of using different scoring systems (statistical methods, learning systems, combinatorial techniques, or computational algorithms) to assign a score and a rank to each of the objects under study. In the extreme case when each scoring system is a feature / attribute / indicator / cue, the system space coincides with the data space. We use the concepts of score functions, rank functions and rank/score functions as defined by Hsu, Shapiro and Taksa (2002) and Hsu and Taksa (2005) to represent a scoring

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

56 Hsu, Chung, & Kristal

Figure 9. Diversity graphs for the six pairs of scoring systems E, F, G and H
1.8 1.6 1.4 1.2
Diversity Score
EF EG EH FG FH GH

1 0.8 0.6 0.4 0.2 0

1 14 27 40 53 66 79 92 105 118 131 144 157 170 183 196 209 222 235 248 261 274 287 300 313 326 339 352 365 378 Diversity Rank

Figure 10. Diversity graphs for the three pairs of scoring systems H, I and J.
3.5 HI 3 2.5 Diversity Score 2 1.5 1 0.5 0 1 17 33 49 65 81 97 113 129 145 161 177 193 209 225 241 257 273 289 305 321 337 353 369 385 Diversity Rank HK IK

system. Rank / score transfer and correlation between scores and ranks are described and examined. We also described various performance measurements with respect to different application domains. Various combination/fusion methods/algorithms of combining multiple scoring systems have been explored. Theoretical analysis that gives insights into system selection and methods of combination/fusion has been provided. In particular, we observe that combining multiple scoring systems improves the performance only if (a) each of the individual scoring systems has relatively high performance, and (b) the individual scoring systems are distinctive (different, diverse or orthogonal). We have initiated study on these two issues (a) and (b) for the special case of two scoring systems A and B. Two predictive parameters are used. The first parameter is the

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

57

performance ratio, Pl/Ph, which measures the relative performance of A and B where Pl and Ph are the lower performance and higher performance respectively. The second parameter deals with the bi-diversity between A and B, d2(A, B), which measures the degree of difference/dissimilarity/diversity between the two scoring systems A and B. The bi-diversity (or 2-diversity) measure d2(A, B) between two scoring systems A and B is defined as one of the following three possibilities: (1) d2(A, B) = d(sA, sB), the distance between the score functions sA and s B of scoring system A and B; (2) d2(A, B) = d(rA, rB), the distance between the rank functions rA and r B; and (3) d2(A, B) = d(fA, fB), the distance between rank/score functions fA and fB. Diversity measures have been studied extensively in pattern recognition and classification (Kuncheva, 2005; Brown et al., 2005). Diversity measure defined in the form of rank function was used in information retrieval (Ng & Kantor, 1998, 2000). The work of Hsu and Taksa (2005) and Yang et al. (2005) used rank/ score functions to measure diversity between two scoring systems in their study of comparing rank vs. score combination and consensus scoring criteria for improving enrichment in virtual screening and drug discovery. For the protein structure prediction problem, the rank/score functions of A and B, fA and f B, are used for each protein sequence pi, where d p ( A, B) = ∑ j | f A ( j ) − f B ( j ) |, j in N = {1, 2, …, n}, is the diversity score function for pi (C.-Y. Lin et al., 2005; K.-L. Lin et al., 2005a, 2005b).
i

Considering all protein sequences pi in P = {p1, p2, …, pq}, the diversity score function, s (A,B)(x) written as s (A,B)(pi) = d p ( A, B) , is a function from P to R. Consequently, sorting s (A,B)(x) into descending order leads to a diversity rank function r (A,B)(x) from P to Q = {1, 2, …, q}. Hence the diversity rank/score function (or diversity function) f (A,B)(j) defined as f ( A, B ) ( j ) = ( s( A,B ) o r(−1, B ) )( j ) = s( A,B ) ( r(−1, B ) ( j )), where j is in Q, is a function from Q to R. A A The diversity function and its graph play important roles in system selection and method combination in the PSP problem. We note that the diversity function so defined for PSP problem can be applied to other classification or prediction problems as well. We illustrate the method of combinatorial fusion using examples from three different domains IR, VS, and PSP. In all three applications, multiple scoring systems are used. The issue of bi-diversity was discussed. The diversity rank/score function was calculated in the protein structure prediction problem.
i

In summary, we have discussed the method of combinatorial fusion analysis developed and used recently in pattern recognition (PR), information retrieval (IR), virtual screening (VS), and protein structure prediction (PSP). Our current work has generated several issues and topics worthy of further investigation. Among them, we list four: 1. We have so far emphasized more on bi-diversity (i.e., 2-diversity). How about tridiversity (i.e., 3-diversity)? How about higher level diversity measurement? Can this be (or is this best) treated as a single optimization or a sequential series of bidiversity problems? Our diversity score function d t ( A, B ) for the feature pair or scoring systems A and B with respect to temporal step t i is defined using the variation of the rank/ score functions between A and B (i.e., d(f A, f B)). In general, the variation of the score functions d(sA, sB) or the rank functions d(r A, r B) could be used to define the diversity score function d t ( A, B ).
i i

2.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

58 Hsu, Chung, & Kristal

3.

There have been several results concerning the combination of multiple scoring systems in the past few years. Three important issues we would like to study are: (a) selecting the most appropriate scoring systems to combine, (b) finding the best way to combine (Definition 6), and (c) establishing the predictive variables for effective combination. But due to page limitation and chapter constraint, we have included only three examples in IR, VS and PSP with respect to all three issues (a), (b,) and (c) described above. We will explore more examples combining multiple heterogeneous scoring systems in the future. For example, we are working on multiple scoring systems which are hybrid of classifier systems, prediction systems, and learning systems (such as neural networks, support vector machines, or evolutionary algorithms).

4.

Acknowledgments
D.F. Hsu thanks Fordham University, National Tsing Hua University, and Ministry of Education of Taiwan, for a Faculty Fellowship and for support and hospitality during his visit to NTHU in Spring 2004. B.S. Kristal acknowledges support from NIH and a NY State SCORE grant.

References
Arrow, K.J. (1963). Social choices and individual values. New York: John Wiley. Aslam, J.A, Pavlu, V., & Savell, R. (2003). A unified model for metasearch, pooling, and system evaluation. In O. Frieder (Ed.), Proceedings of the Twelfth International Conference on Information and Knowledge Management (pp. 484-491). New York: ACM Press. Belkin, N.J., Kantor, P.B., Fox, E.A., & Shaw, J.A. (1995). Combining evidence of multiple query representation for information retrieval. Information Processing & Management, 31(3), 431-448. Biggs, N.L., & White, T. (1979). Permutation groups and combinatorial structures (LMS Lecture Note Series, Vol. 33). Cambridge: Cambridge University Press. Brown, G., Wyatt, J., Harris, R., & Yao, X. (2005). Diversity creation methods: a survey and categorization. Information Fusion, 6, 5-20. Chuang, H.Y., Liu, H.F., Brown, S., McMunn-Coffran, C., Kao, C.Y., & Hsu, D.F. (2004). Identifying significant genes from microarray data. In Proceedings of IEEE BIBE’04 (pp. 358-365). IEEE Computer Society. Chuang, H.Y., Liu, H.F., Chen, F.A., Kao, C.Y., & Hsu, D.F. (2004). Combination method in microarray analysis. In D.F. Hsu et al. (Ed.), Proceedings of the 7th International

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

59

Symposium on Parallel Architectures, Algorithms and Networks (I-SPAN’04) (pp. 625-630). IEEE Computer Society. Collins, R.T., Lipton, A.J., Fujiyoshi, H., & Kanade, T. (2001). Algorithms for cooperative multisensor surveillance. Proceedings of the IEEE, 89 (10), 1456-1477. Corne, D.W., Deb, K., Fleming, P.J., & Knowles, J.D. (2003). The good of the many outweighs the good of the one: evolutional multi-objective optimization [Featured article]. IEEE Neural Networks Society, 9-13. Dasarathy, B.V. (2000). Elucidative fusion systems—an exposition. Information Fusion, 1, 5-15. Diligenti, M., Gori, M., & Maggini, M. (2004). A unified probabilistic framework for web page scoring systems, IEEE Trans. on Knowledge and Data Engineering, 16(1), 4-16. Ding, C.H.Q., & Dubchak, I. (2001). Multi-class protein fold recognition using support vector machines and neural networks. Bioinformatics, 17 (4), 349-358. Duerr, B., Haettich, W., Tropf, H., & Winkler, G. (1980). A combination of statistical and syntactical pattern recognition applied to classification of unconstrained handwritten numerals. Pattern Recognition, 12(3), 189-199. Dwork, C., Kumar, R., Naor, M., & Sivakumar, D. (2001). Rank aggregation methods for the web. In Proceedings of the Tenth International World Wide Web Conference, WWW 10 (pp. 613-622). New York: ACM Press. Fagin, R., Kumar, R., & Sivakumar, D. (2003). Comparing top k-lists. SIAM Journal on Discrete Mathematics, 17, 134-160. Freund, Y., Iyer, R., Schapire, R.E., & Singer, Y. (2003). An efficient boosting algorithm for combining preferences. Journal of Machine Learning Research, 4, 933-969. Garcia-Pedrajas, N., Hervas-Martinez, C., & Ortiz-Boyer, D. (2005). Cooperative coevolution of artificial neural network ensembles for pattern classification. IEEE Trans. on Evolutional Computation, 9(3), 271-302. Ginn, C. M. R., Willett, P., & Bradshaw, J. (2000). Combination of molecular similarity measures using data fusion [Perspectives]. Drug Discovery and Design, 20, 1-15. Grammatikakis, M.D., Hsu, D.F., & Kraetzl, M. (2001). Parallel system interconnections and communications. Boca Raton, FL: CRC Press. Heydemann, M.C. (1997). Cayley graphs and interconnection networks. In G. Hahn & G. Sabidussi (Eds.), Graph symmetry (pp. 161-224). Norwell, MA: Kluwer Academic Publishers. Ho, T.K. (2002). Multiple classifier combination: Lessons and next steps. In H. Bunke & A. Kandel (Ed.), Hybrid methods in pattern recognition (pp. 171-198). Singapore: World Scientific. Ho, T.K., Hull, J.J., & Srihari, S.N. (1992). Combination of decisions by multiple classifiers. In H.S. Baird, H. Burke, & K. Yamulmoto (Eds.), Structured document image analysis (pp. 188-202). Berlin: Springer-Verlag. Ho, T.K., Hull, J.J., & Srihari, S.N. (1994). Decision combination in multiple classifier system. IEEE Trans. on Pattern Analysis and Machine Intelligence, 16(1), 66-75.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

60 Hsu, Chung, & Kristal

Hsu, D.F., & Palumbo, A. (2004). A study of data fusion in Cayley graphs G(Sn, Pn). In: D.F. Hsu et al. (Ed.), Proceedings of the 7 th International Symposium on Parallel Architectures, Algorithms and Networks (I-SPAN’04) (pp. 557-562). IEEE Computer Society. Hsu, D.F., Shapiro, J., & Taksa, I. (2002). Methods of data fusion in information retrieval: Rank vs. score combination (Tech. Rep. 2002-58). Piscataway, NJ: DIMACS Center. Hsu, D.F., & Taksa, I. (2005). Comparing rank and score combination methods for data fusion in information retrieval. Information Retrieval, 8(3), 449-480. Hu, W., Tan, T., Wang, L., & Maybank, S. (2004). A survey on visual surveillance of object motion and behaviors. IEEE Trans. on Systems, Man, and Cybernetics— Part C: Applications and Review, 34(3), 334-352. Huang, C.D., Lin, C.T., & Pal, N.R. (2003). Hierarchical learning architecture with automatic feature selection for multi-class protein fold classification. IEEE Trans. on NanoBioscience, 2(4), 503-517. Ibraev, U., Ng, K.B., & Kantor, P.B. (2001). Counter intuitive cases of data fusion in information retrieval (Tech. Rep.). Rutgers University. Jin, X., & Branke, J. (2005). Evolutional optimization in uncertain environments—a survey. IEEE Trans. on Evolutional Computation, 9(3), 303-317. Kantor, P.B. (1998, Jan). Semantic dimension: On the effectiveness of naïve data fusion methods in certain learning and detection problems. Paper presented at the meeting of the Fifth International Symposium on Artificial Intelligence and Mathematics, Ft. Lauderdalee, FL. Kendall, M., & Gibbons, J.D. (1990). Rank correlation methods. London: Edward Arnold. Kittler, J., & Alkoot, F.M. (2003). Sum versus vote fusion in multiple classifier systems. IEEE Transactions on Pattern Analysis and Machine Intelligence, 25(1), 110-115. Kuncheva, L.I. (2005). Diversity in multiple classifier systems [Guest editorial]. Information Fusion, 6, 3-4. Kuriakose, M.A., Chen, W.T., He, Z.M., Sikora, A.G., Zhang, P., Zhang, Z.Y., Qiu, W.L., Hsu, D.F., McMunn-Coffran, C., Brown, S.M., Elango, E.M., Delacure, M.D., & Chen, F.A.. (2004). Selection and Validation of differentially expressed genes in head and neck cancer. Cellular and Molecular Life Sciences, 61, 1372-1383. Lee, J.H. (1997). Analyses of multiple evidence combination. In N.J. Belkin, A.D. Narasimhalu, P. Willett, W. Hersh (Ed.), Proceedings of the 20th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval (pp. 267-276). New York: ACM Press. Lin, C.-Y., Lin, K.-L., Huang, C.-D., Chang, H.-M., Yang, C.-Y., Lin, C.-T., & Hsu, D.F. (2005). Feature selection and combination criteria for improving predictive accuracy in protein structure classification. In Proceedings of IEEE BIBE’05 (pp. 311315). IEEE Computer Society. Lin, K.-L., Lin, C.-Y., Huang, C.-D., Chang, H.-M., Lin, C.-T., Tang, C.Y., & Hsu, D.F. (2005a). Improving prediction accuracy for protein structure classification by

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Combinatorial Fusion Analysis

61

neural networks using feature combination. Proceedings of the 5 th WSEAS International Conference on Applied Informatics and Communications (AIC’05)(pp. 313-318). Lin, K.-L., Lin, C.Y., Huang, C.-D., Chang, H.-M., Lin, C.-T., Tang, C.Y., & Hsu, D.F. (2005b). Methods of improving protein structure prediction based on HLA neural networks and combinatorial fusion analysis. WSEAS Trans. on Information Science and Application, 2, 2146-2153. Marden, J.I. (1995). Analyzing and modeling rank data. (Monographs on Statistics and Applied Probability, No. 64). London: Chapman & Hall. McCullagh, P. (1992). Models on spheres and models for permutations. In Probabality Models and Statistical Analysis for Ranking Data (M.A. Fligner, & J.S. Verducci, Ed., pp. 278-283). (Lecture Notes in Statistics, No. 80). Berlin: Springer-Verlag. Melnik, D., Vardi, Y., & Zhang, C.U. (2004). Mixed group ranks: preference and confidence in classifier combination. IEEE Trans. on Pattern Analysis and Machine Intelligence, 26(8), 973-981. Ng, K.B., & Kantor, P.B. (1998). An investigation of the preconditions for effective data fusion in information retrieval: A pilot study. In C.M. Preston (Ed.), Proceedings of the 61st Annual Meeting of the American Society for Information Science (pp. 166-178). Medford, NJ: Information Today. Ng, K.B., & Kantor, P.B. (2000). Predicting the effectiveness of naïve data fusion on the basis of system characteristics. Journal of the American Society for Information Science. 51(13), 1177-1189. Paolucci, U., Vigneau-Callahan, K. E., Shi, H., Matson, W. R., & Kristal, B. S. (2004). Development of biomarkers based on diet-dependent metabolic serotypes: Characteristics of component-based models of metabolic serotype. OMICS, 8, 221-238. Patil, G.P., & Taillie, C. (2004). Multiple indicators, partially ordered sets, and linear extensions: multi-criterion ranking and prioritization. Environmental and Ecological Statistics, 11, 199-288. Perrone, M.P., & Cooper, L.N. (1992). When networks disagree: Ensemble methods for hybrid neural networks (Report AF-S260 045). U.S. Dept. of Commerce. Shi, H., Paolucci, U., Vigneau-Callahan, K. E., Milbury, P. E., Matson, W. R., & Kristal, B. S. (2004). Development of biomarkers based on diet-dependent metabolic serotypes: Practical issues in development of expert system-based classification models in metabolomic studies. OMICS, 8, 197-208. Shi, H., Vigneau-Callahan, K., Shestopalov, I., Milbury, P.E., Matson, W.R., & Kristal B.S. (2002a). Characterization of diet-dependent metabolic serotypes: Proof of principle in female and male rats. The Journal of Nutrition, 132, 1031-1038. Shi, H., Vigneau-Callahan, K., Shestopalov, I., Milbury, P.E., Matson, W.R., & Kristal, B.S. (2002b). Characterization of diet-dependent metabolic serotypes: Primary validation of male and female serotypes in independent cohorts of rats. The Journal of Nutrition, 132, 1039-1046. Shoichet, B.K (2004). Virtual screening of chemical libraries. Nature, 432, 862-865.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

62 Hsu, Chung, & Kristal

Thompson, G. L. (1992). Graphical techniques for ranked data. In Probabality Models and Statistical Analysis for Ranking Data (M.A. Fligner, & J.S. Verducci, Ed., pp. 294-298). (Lecture Notes in Statistics, No. 80). Berlin: Springer-Verlag. Triesch, J., & von der Malsburg, C. (2001). Democratic integration: self-organized integration of adaptive cues. Neural Computation, 13, 2049-2074. Tumer, K., & Ghosh, J. (1999). Linear and order statistics combinations for pattern classification. In: Amanda Sharkey (Ed.), Combining artificial neural networks (pp. 127-162). Berlin: Springer-Verlag. Vogt, C. C., & Cottrell, G. W. (1999). Fusion via a linear combination of scores. Information Retrieval, 1(3), 151-173. Xu, L., Krzyzak, A., & Suen, C.Y. (1992). Methods of combining multiple classifiers and their applications to handwriting recognition. IEEE Transactions on Systems, Man, and Cybernetics, 22(3), 418-435. Yang, J.M., Chen, Y.F., Shen, T.W., Kristal, B.S., & Hsu, D.F. (2005). Consensus scoring for improving enrichment in virtual screening. Journal of Chemical Information and Modeling, 45, 1134-1146. Young, H.P. (1975). Social choice scoring functions. SIAM Journal on Applied Mathematics, 28(4), 824-838. Young, H. P., & Levenglick, A. (1978). A consistent extension of Condorcet’s election principle. SIAM Journal on Applied Mathematics, 35(2), 285-300.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 63

Chapter IV

DNA Sequence Visualization
Hsuan T. Chang, National Yunlin University of Science and Technology, Taiwan

Abstract
This chapter introduces various visualization (i.e., graphical representation) schemes of symbolic DNA sequences, which are basically represented by character strings in conventional sequence databases. Several visualization schemes are reviewed and their characterizations are summarized for comparison. Moreover, further potential applications based on the visualized sequences are discussed. By understanding the visualization process, the researchers will be able to analyze DNA sequences by designing signal processing algorithms for specific purposes such as sequence alignment, feature extraction, and sequence clustering, etc.

Introduction
Recently, the great progress of biotechnology makes the deoxyribonucleic acid (DNA) sequencing more efficient. Huge amounts of DNA sequences of various organisms have been successfully sequenced with higher accuracies. By analyzing DNA sequences, the biological relationships such as homologous and phylogeny of different species can be

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

64 Chang

investigated. However, the analysis of DNA sequences by the use of biological methods is too slow for processing huge amount of DNA sequences. Therefore, the assistance of computers is necessary and thus bioinformatics is extensively developed. Efficient algorithms and implemented computer-based tools are desired to deal with the considerable and tedious biomolecular data. In general, DNA sequences are stored in the computer database system in the form of character strings. In a human somatic cell, its haploid nuclear DNA contains 2.85 billion base pairs (bps), in which a tremendous wealth of genetic information resides (Collins et al., 2004). Distinguishing the differences and similarities among DNA sequences has been a major task for biologists. Most of the sequences in their character strings are too long to be displayed on the computer screen and, therefore, are very hard to be extracted for any feature or characteristic. Development of visualization techniques for presenting biological sequences has been widely attempted (Roy, Raychaudhury, & Nandy, 1998; Loraine & Helt, 2002). Mehta & Sahni (1994) proposed some efficient algorithms that make use of the compact symmetric directed acyclic word graph (csdawg) data structure. Blumer, Blumer, Haussler, McConnell, and Ehrenfeucht (1987) proposed the analysis and visualization of patterns in long string. Some previous studies (Anastassiou, 2001; Berger, Mitra, Carli, & Neri, 2002; Wang & Johnson, 2002) have shown various methods (such as discrete Fourier transform or wavelet transform) of transforming the symbolic DNA sequences to numeric sequences for further processing. With the methods described above, the periodic patterns existed in DNA sequences can be observed from the determined scalograms or spectrograms. On the other hand, some methodologies (Cheever & Searls, 1989; Cork & Wu, 1993; Wu, Roberge, Cork, Nguyen, & Grace, 1993) were proposed to depict symbolic sequences by two-dimensional (2-D) images, three-dimensional (3-D) curves, or graphs. The calculation in some methods was troublesome and required intensive computation. Efficient and direct mapping methods are desired to convert the symbolic sequences into the numeric sequences, and have them displayed in graphs. Visualization (i.e., graphical representation) of DNA sequences provides corresponding pseudo shapes in a global view, which makes the sorting, comparison, and feature extraction based on the pseudo shape available. Visual recognition of differences among related DNA sequences by inspection can be made through sequence visualization. The graphical form can be viewed on a computer display or be printed on a piece of paper. Therefore, global and local characterizations/features of sequences can be quickly grasped in a perceivable form. Moreover, numerical characterizations (or features) of sequences can be determined from the visualized data (Chang, Xiao, & Lo, 2005). The extracted characterizations or features make the sequence data in a much more manageable fashion. Visualization is an alternative for DNA sequence representations. In addition to complementing the limitations of conventional symbolic-based methods, more powerful application tools would be expected in the near future. There have been many researchers around the world working on this topic. The related bioinformatics tools and databases of visualized DNA sequence also have been accessible over the Internet. Therefore, the objective of this chapter is a literature review and summarization of the visualization methods for DNA sequences. Further applications based on the visualization methods will also be mentioned.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 65

Background
A DNA strand is a biomolecular polymer characteristic of four different bases, i.e., adenine (A), guanine (G), cytosine (C), and thymine (T). The length unit of a DNA sequence is in base pair (bp) for a double-stranded DNA, or in nucleotide (nt) for a single strand. With the rapid development and progress in bioinformatics and the completion of more genome sequencing projects, many sequence databases have been constructed and will be continuously constructed for sequence query. It is not easy to directly access large amount of genomic DNA sequence data to perform mathematical analysis. That is, character-based representation of DNA sequences cannot provide immediately useful nor informative characterizations. To perform visualization, symbolic-based sequences should be transformed into numeric-based versions. Different transformation will provide various characterizations of the visualized sequences. Therefore, the transformation (or mapping, simply saying) is a critical issue in sequence visualization. There are many transformation methods for mapping the symbolic characters A, T, C, G, to numerical values (Almeida & Vinga, 2002; Chen, Li, Sun, & Kim, 2003; Wang & Johnson, 2002; Zhang et al., 2002). Those methods transformed DNA sequences into one-dimensional sequence, 2-D, 3-D, higher dimensional, or some graphical/image-like data. The data values can be real, imaginary, complex, or quaternion numbers. Therefore, the resulting numerical characterizations of transformed sequences are model dependent. The simplest way to transform the symbolic sequence to a numerical one is to directly assign an integer (or real value) for each nucleotide. For example, one can select the integers 1, 2, 3, and 4 for representing A, T, C, and G, respectively. On the other hand, more complicated transformations such as a complex assignment or a statistical calculation were also proposed to derive different graphical representation of DNA sequences. In addition to providing a global view and to directly perform sequence comparison, further analyses based on the visualized data, such as feature extraction for concise data representation and data retrieval, and phylogenetic clustering, are all the possible objectives. Therefore, the significance of the studies on DNA sequence visualization is quite obvious.

Sequence Visualization Methods
The studies of DNA sequence visualization were initiated more than 20 years ago. From the literature survey, Hamori & Ruskin (1983), Gates (1986), Jeffery (1990), Peng et al. (1992), Zhang & Zhang (1994), and Roy & Nandy (1994) could be the pioneers in this research area during the 1980s and 1990s. Roy, Raychaudhury, and Nandy (1998) gave a comprehensive survey on the graphical representation methods and their applications in viewing and analyzing DNA sequences. Randic’s group (Randic, 2000a; Randic & Vracko, 2000; Randic et al., 2000; Guo, Randic, & Basak, 2001; Randic & Basak, 2001; Randic & Balaban, 2003; Randic et al., 2003a; 2003b; 2003c; Randic, 2004; Randic, Zupan,

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

66 Chang

Figure 1. 3-D H-curves: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively

& Balaban, 2004; Zupan & Randic, 2005) proposed various visualization methods after 2000. Many new perspectives and practical applications based on the visualized DNA sequences are blossoming. In this section, we will briefly and historically review most of the published visualization methods. Their methodologies, characterizations, and their applications on bioinformatics will be discussed as well.

H-Curves
Most recent studies have referred to the first visualization method for DNA sequences as the H-curves proposed by Hamori and Ruskin (1983). The authors claimed that the important global features of long symbolic sequences, such as characteristic nucleotide ratios of certain sections, repetition of longer fragments, sudden changes in prevailing nucleotide compositions at certain locations, are not readily conveyed. The analysis, recognition, comparison, mental recollection, and so forth, of long sequences without long range features serving as visual clues become nearly impossible tasks for most people. In this method, a vector function g(z) is defined as:

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 67

i + j − k ,  i − j − k,  g ( z) =  − i − j − k, − i + j − k , 

if z = A if z = T if z = C if z = G

(1)

where i, j, and k are unit vectors pointing in the direction of the Cartesian x, y, and z axes, respectively. The 3-D curve (H-curve) consisting of a series of n joined base vectors is defined as
n 1

H1,n = h( z ) = ∑ g ( z ).

(2)

As shown in Eq. (1), four bases are represented by four directions in 2-D x-y plane. The H-curve is constructed by moving one unit in the corresponding direction and another for each unit in z direction. H-curve can uniquely represent a DNA sequence. In addition, more advantages H-curves offer include: (1) H-curve preserves all the important characteristics of the long DNA sequence; (2) The average nucleotide composition of a certain fragment is an important sequence property, which is not directly evident from the

Figure 2(a). 2-D DNA walks: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

68 Chang

Figure 2(b). 2-D DNA walks: Human dihydrofolate reductase gene (AC: J00140, 979 bp)

symbolic sequence; (3) Visual comparisons and matching between different DNA sequences are facilitated; (4) The information associated with the location of the end point of an H-curve is provided. Figure 1 shows the H-curves of Homo sapiens B-cell CLL/ lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively. The characterizations of two curves corresponding to the two sequences are obviously quite different.

DNA Walks
DNA walks for representing the DNA sequence have been widely utilized since 1992 (Peng et al., 1992). The first work is the 1-D DNA walk, which uses binary alphabets. Let a DNA sequence of length Ns be denoted as {x[i], i=1,2,3...,Ns.}. The presences of purines (A, G) and pyrimidines (C, T) in DNA sequences correspond to the x[k] values +1 and -1, respectively, where k denotes the position in the sequence. Then a DNA walk sequence s[k] is defined as the cumulative sum of x[i], i.e.,
k

s[k ] =

∑ x[i].
i =1

(3)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 69

Similarly, other two letter alphabets such as S-W and K-M can be employed to obtain the 1-D DNA walks. Note that the symbols S (strong), W (weak), K (keto), and M (amino) are defined as follow: S ∈ {C , G},W ∈ { A, T }, R ∈ { A, G}, Y ∈ {C , T } . The dimensionality of the numerical DNA sequence can be more than one for a better representation. For example, the 3-D vector notation for mapping A, T, C, and G, is similar to Eq. (1). Furthermore, the complex representation for DNA walk can be defined as follows:

 1,  − 1,  x (k ) =   j, − j , 

for A for T for C . for G

(4)

This complex DNA walk can be plotted in a 3-D Cartesian coordinate system by treating the accumulated values of the real part and imaginary part, and the variable k as the values for x, y, and z axes, respectively. Some repeat sequence can be found by projecting the DNA walk down to the x-y plane (Berger et al., 2004). DNA walk representations can be used to extract useful information, such as the long-range correlation information and sequence periodicities, from DNA sequences. To elucidate further information, the

Figure 3. 3-D DNA walks: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

70 Chang

wavelet transform analysis can be applied to 1-D or 2-D walks for observing dependencies of nucleotide arrangement in long sequences (Arneodo, Bacry, Graves, & Muzy, 1995; Berger et al., 2004). Figures 2(a) and 2(b) show the 2-D DNA walks of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp), respectively. On the other hand, Figure 3 shows the corresponding 3-D DNA walks of two sequences.

Z-Curves
Zhang and Zhang (1994) proposed the Z-curve representation to visualize DNA sequences in 1994. Consider a DNA sequence of N bases and let the accumulated numbers of the bases A, T, C, and G be four positive integers An, Tn, Cn, and Gn, respectively. The Z-curve consists of a series of nodes Pn (n = 0, 1, 2,…, N), whose coordinates are denoted by xn, yn, and z n. Then these three coordinates are determined by the use of the four integers An, Tn, Cn, and Gn. Their relationships are called the Z transform and are expressed as below:

 x n = ( An + Gn ) − (C n + Tn )   y n = ( An +C n ) − (C n + Tn ) , x n , y n , z n ∈ [− N , N ], n = 0,1,..., N ,  z = ( A + T ) − (C + G ) n n n n  n

(5)

Figure 4. 3-D Z-curves: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 71

where A0= T0= C0=G0=0 and thus xn=yn=zn=0. Given the coordinates of a Z-curve, the corresponding DNA sequence can be reconstructed by the use of inverse Z-transform, which is expressed as

1 1  An  1  1       x n   C n  n 1 1  − 1 1 − 1   G  = 4 1 + 4  1 − 1 − 1 y n ,  n      T  1   − 1 − 1 1  z n       n

n = 0,1,..., N ,

(6)

where the relation An+Tn+Cn+Gn=n is used. Figure 4 shows the smoothed Z-curves of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp). As shown in Eq. (5), some statistical characterizations of the DNA sequences can be obtained directly from the Z-curves. For example, the distributions of purine/pyrimidine, amino/keto, and strong-H bond/weak-H bond bases along the sequences correspond to the three components of the Z-curve: xn, yn, and z n, respectively. Moreover, algorithms for exons identification, gene finding, prediction, or recognition using the Fourier transform performed on xn, yn, and z n components of the Z-curve are also possible (Guo,

Figure 5. Randic’s 3-D curves: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

72 Chang

Ou, & Zhang, 2003; Zhang & Zhang, 2004). Identification of replication origins in genomes based on the Z-curve method is also reported by Zhang and Zhang (2005). The Z-curve database now is also available on the Internet (Zhang, Zhang, & Ou, 2003). In additional to draw and manipulate the Z-curve of a user’s input sequence online, several software services and archives are accessible in the Web site: http:// tubic.tju.edu.cn/zcurve/.

Randic’s Visualization Methods
Since 2000, Randic’s research group had proposed several visualization schemes for DNA sequences (Randic, 2000a; Randic & Vracko, 2000; Randic et al., 2000; Guo, Randic, & Basak, 2001; Randic & Basak, 2001; Randic & Balaban, 2003; Randic et al., 2003a; 2003b; 2003c; Randic 2004; Randic, Zupan, & Balaban, 2004; Zupan & Randic, 2005). A 3-D graphical representation method was first proposed (Randic et al., 2000). Then the sequences can be analyzed based on the matrix characteristics (Randic, Kleiner, & DeAlba, 1994; Randic 2000; Randic & Basak, 2001) extracted from the original DNA sequences. In this method, the four vertices associated with a regular tetrahedron are assigned to four nucleotides. The mapping between four nucleotides and corresponding 3-D coordinates is shown below:
( +1, ( −1, ( −1, ( +1, − 1, + 1, − 1, + 1,

− 1) − 1) + 1) + 1)

→A →G →C →T

(7)

For a sequence, a 3-D curve is plotted by connecting all the points determined by sequentially adding the (x, y, z) coordinates assigned for the nucleotides. Figure 5 shows the 3-D curves of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp). Note that the 2-D representations in Nandy’s (1994) and Leong’s (1995) methods can be considered as the projections on (x, y) and (x, z) plane, respectively. The problems of degeneracy and overlap in graphical representation of DNA sequence may result in identical graphs for different sequences. Therefore, a 2-D graphical representation of low degeneracy was proposed to solve the mentioned problems (Guo & Basak, 2001). The basic idea is to introduce a positive integer d while assigning the four special vectors in 2-D Cartesian (x, y) coordinates for nucleotides. One of the possible axes systems for this 2-D graphical representation can be

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 73

1 (−1, + ) → A d 1 (+ , − 1) → T d 1 (+1, + ) → G d 1 (+ , + 1) → C d

(8)

The mathematical derivation for calculating the minimum length of the DNA sequence that can form a loop in the graphical representation was performed. It shows that if d is a larger even number, the corresponding graphical representation has a lower degeneracy. Figure 6 shows the 2-D curves of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp). The degeneracy problem is obviously reduced and much less than that shown in Figure 2. Liu, Guo, Xu, Pan, and Wang (2002) gave some notes on 2-D graphical representation with lower or no degeneracy. A 2-D graphical representation (Randic et al., 2003a), which does not consider four directions along the Cartesian coordinate axes, was then proposed in 2003. Four

Figure 6. 2-D curves with low degeneracy: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp) shown in blue/dark and green/light lines, respectively

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

74 Chang

horizontal lines separated by unit distance are used to represent four nucleotides and the nucleotides constituting the considered sequence are denoted as dots and placed on the corresponding lines. By connecting the adjacent dots, we can obtain a zigzag like curve for sequence visualization. Figure 7 shows the zigzag-like curve of a given sequence: “aggctggagagcctgctgcccgcccgcccgtaaaatggtcccctcggctggacagctcgccctgttcgct ctgggtattgtgttggctgcg.” There is no degeneracy problem with this representation. Another very compact 2-D visualization scheme (Randic et al., 2003c; Randic, 2004) based on a template curve was proposed to inspect lengthy DNA sequences without requiring large space. A zigzag spiral representing the worm curve is used as the template for constructing compact graphical representation. Then four binary codes for the four nucleotides are assigned as A=00, G=01, C=10, and T=11. Starting from the center of the template, a binary code sequence is drawn by putting dark spots for ones and nothing for zeros on the vertices of template. There is no degeneracy problem from this graphical representation. On the other hand, only a square space with side approximately n is required to visualize a DNA sequence of length n. Figures 8(a) and 8(b) show the 2-D spiral worm curves of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence

Figure 7. 2-D zigzag like curve

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 75

Figure 8(a). The 2-D spiral worm curves: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp)

Figure 8(b). The 2-D spiral worm curves: Human dihydrofolate reductase gene (AC: J00140, 979 bp)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

76 Chang

(AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp), respectively. They demonstrate a quite different visualization form from those demonstrated in Figures 1-7.

Chaos Game Representation and Fractals
In addition to the curve form representation, more complicated patterns can be utilized for DNA sequence visualization. Jeffrey (1990) developed the chaos game representation (CGR) method, which uses an iterated function system (IFS) (Barnsley, 1988) to map the character-based DNA sequence to a set of points in R2. The result points are not connected by line segments but rather are displayed in a 2-D pattern image, which is a picture of fractal structure. On the other hand, the fractal dimension of a DNA sequence can be measured as one of sequence characterizations (Berthelsen, Glazier, & Skolnik, 1992). Sequence visualization through the iterated function systems (Tino, 1999) and fractals (Hao, Lee, & Zhang, 2000; Ichinose, Yada, & Takagi, 2001) are also available. The properties of the corresponding DNA sequence can be revealed because the sequence basically is non-random and thus an attractor is visually observable. Figures 9 and 10 show the CGR and fractals (square), respectively, of Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp) and Human dihydrofolate reductase gene (AC: J00140, 979 bp). With the CGR, different fractal patterns can be plotted from groups of genes. The most significant property of the CGR different from the curve form is that the adjacent bases

Figure 9(a). Chaos Game Representation (CGR): Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 77

Figure 9(b). Chaos Game Representation (CGR):Human dihydrofolate reductase gene (AC: J00140, 979 bp)

Figure 10(a). Fractals: Homo sapiens B-cell CLL/lymphoma 2 (BCL2) mRNA sequence (AC: NM_000657, 911 bp)

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

78 Chang

Figure 10(b). Fractals: Human dihydrofolate reductase gene (AC: J00140, 979 bp)

in the sequence are not always plotted neighboring to each other. Therefore, a new metric should be developed for measuring the similarity between two sequences. One of the applications of the CRG for a DNA sequence is to discriminate the random and natural DNA sequences (Jeffery, 1990). By measuring the histogram entropy of a CRG image, the entropic profiles of DNA sequences can be constructed. On the other hand, a more generalized visualization model based on IFS was proposed by Wu et al. (1993). Three visual models based on the IFS were introduced: (1) H-curve; (2) Chaos game representation; (3) W-curve. By controlling two parameters in the proposed model, one of the three visual models can be selected.

Other Visualization Methods
A more detailed discussion on the 2-D graphical representation shown in Figure 8 is given by Randic et al. (2003b). Yau et al. (2003) proposed a visualization method in which the 2-D graphical representation is shown without degeneracy. Li and Wang (2004) proposed a 3-D representation of DNA sequences. The elements in the 3-D vectors assigned for the four bases are all positive such that no overlap and intersection appear. Yuan, Liao, and Wang (2003) proposed the 3-D representation of DNA sequences that can avoid overlaps and intersect. The basic concept is that the z-axis coordinates are the accumulated length of the bases. Chang et al. (2003) proposed a 3-D trajectory method based on

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 79

a regular tetrahedron, which is similar to Randic’s 3-D graphical representation method. Liao, Tan, and Ding (2005) proposed a unique 4-D representation of DNA sequences, which is different with Randic’s 4-D representation method (Randic & Balaban, 2003). The studies on DNA sequence visualization are obviously flourishing.

Discussion and Future Trends
The most important issue in investigating various visualization methods is “what the direct applications are.” In addition to some direct curve features, such as the geometrical center and end points (Liao, Tan, & Ding, 2005), many methods employ the distance matrix and its invariants (Randic, Kleiner, & DeAlba, 1994; Randic & Basak, 2001; Yuan, Liao, & Wang, 2003) to extract the eigenvalues as the condensed sequences for comparison. The protein coding measure, identification of replication origins and termination for some bacterial and archaeal genomes based on the Z-curve method was reported (Yan, Lin, & Zhang, 1998; Zhang & Zhang, 2005). As for the chaos game and fractal representation, global distance and local similarity can be determined for sequence comparison (Almeida, Carrico, Maretzek, Noble, & Fletcher, 2001) and for measuring phylogenetic proximity (Deschavanne, Giron, Vilain, Fagot, & Fertil, 1999). Finally, the possible further studies and future work based on the visualized DNA sequences are summarized as follows: 1. Apply mathematical analysis or signal-processing algorithms such as the Fourier and Wavelet transforms to the visualized sequence data for further sequence analysis, clustering, and annotation (Bernaola-Galvan, Carpena, Roman-Roldan, & Oliver, 2002; Dodin, Vandergheynst, Levoir, Cordier, & Marcourt, 2000; Issac et al., 2002). Develop better human machine interface for scientists in operating the bioinformatics tools based on graphical representation of sequences (Ovcharenko, Boffelli, & Loots, 2004). Cooperate with computer graphics techniques for better graphical representation of DNA sequences (Ghai, Hain, & Chakraborty, 2004; Montgomery et al., 2004). Extract the features from the visualized/numerical sequences and then develop feature databases for fast and efficient database retrieval. (Chang et al., 2005) The investigation of the effects of insertion, deletion, substitution, reverse, and complementary in sequences (Chang et al., 2003). Find more biological applications and develop various visualization tools such as characterization and classifications of species, visualizing regular pattern in sequences (Loraine & Helt, 2002). Adopt the existing visualization methods to protein sequences (Basu, Pan, Dutta, & Das, 1997; Bayley, Gardiner, Willett, & Artymiuk, 2005; Randic & Krilov, 1997; Randic, Zupan, & Balaban, 2004).

2.

3. 4. 5.

6.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

80 Chang

Summary
The aids of computer and network technologies provide better data access, acquisition, update, and management on huge genomic sequences over the worldwide Internet databases. Through the data visualization methods mentioned in this chapter, various graphical representations of DNA sequences provide alternative observations, which can derivate certain sequence characteristics that cannot be directly obtained from the original character-based sequences. With the rapid increase of genomic sequences and databases, the development of new techniques for sequence visualization, analysis, characterization, comparison, and annotation is more and more important in a bioinformatics scenario. Most of recent researches on DNA sequence visualization/ graphical representation have been briefly reviewed in this chapter. Based on the visualized data formats, well known graphic/image processing and pattern recognition techniques for exploring the intra- and inter-sequence relationships in genomic research would be a significant trend.

References
Almeida, J. S., Carrico, J. A., Maretzek, A., Noble, P. A., & Fletcher, M. (2001). Analysis of genomic sequences by Chaos Game Representation. Bioinformatics, 17(5), 429437. Almeida, J. S., & Vinga, S. (2002). Universal sequence map (USM) of arbitrary discrete sequences. BMC Bioinformatics, 3(6). Anastassiou, D. (2001). Genomic signal processing. IEEE Signal Processing Magazine, 18, 8-20. Arneodo, A., Bacry, E., Graves, P. V., & Muzy, J. F. (1995). Characterizing long-range correlations in DNA sequences from wavelet analysis. Physics Review Letters, 74(16), 3293-3296. Barnsley, M. F. (1988). Fractals everywhere. New York: Springer-Verlag. Basu, S., Pan, A., Dutta, C., & Das, J. (1997). Chaos game representation of proteins. Journal of Molecular Graphics and Modelling, 15, 279-289. Bayley, M. J., Gardiner, E. J., Willett, P., & Artymiuk, P. J. (2005). A Fourier fingerprintbased method for protein surface representation. Journal of Chemical Information Model, 45(3), 696-707. Bernaola-Galvan, P., Carpena, P., Roman-Roldan, R., & Oliver, J. L. (2002). Study of statistical correlations in DNA sequences. Gene, 300, 105-115. Berger, J., Mitra, S., Carli, M., & Neri, A. (2002). New approaches to genome sequence analysis based on digital signal processing. Proceedings of IEEE Workshop on Genomic Signal Processing and Statistics (GENSIPS), CP2-08.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 81

Berger, J., Mitra, S., Carli, M., & Neri, A. (2004). Visualization and analysis of DNA sequences using DNA walks. Journal of the Franklin Institute, 341(1-2), 37-53. Berthelsen, C. L., Glazier, J. A., & Skolnik, M. H. (1992). Global fractal dimension of human DNA sequences treated as pseudorandom walks. Physics Review A, 45, 8902-8913. Blumer, A., Blumer, J., Haussler, D., McConnell, R., & Ehrenfeucht, A. (1987). Complete inverted files for efficient text retrieval and analysis. Journal of ACM, 34, 578-595 Chang, H. T., Lo, N. W., Lu, W. C., & Kuo, C. J. (2003). Visualization and comparison of DNA sequences by use of three-dimensional trajectory. Proceedings of The First Asia-Pacific Bioinformatics Conference (pp. 81-85). Chang, H. T., Xiao, S. W., & Lo, N. W. (2005). Feature extraction and comparison of TDTs: an efficient sequence retrieval algorithm for genomic databases. In Abstract Book of The 3rd Asia Pacific Bioinformatics Conference (APBC2005) (pp. 86). Cheever, E. A., & Searls, D. B. (1989). Using signal processing techniques for DNA sequence comparison. Proceedings of the 1989 Fifteenth Annual Northwest Bioengineering Conference (pp. 173-174). Chen, J., Li, H., Sun, K., & Kim, B. (2003). Signal processing applications — how will bioinformatics impact signal processing research? IEEE Signal Processing Magazine, 20(6), 16-26. Collins, F. S., Lander, E. S., Rogers, J., Waterston, R. H., et al. (2004). Finishing the euchromatic sequence of the human genome, Nature, 431, 931-945. Cork, D. J., & Wu, D. (1993). Computer visualization of long genomic sequences. Proceedings of the 4th Conference on Visualization, (pp. 308-315). Deschavanne, P. J., Giron, A., Vilain, J., Fagot, G., & Fertil, B. (1999). Genomic signature: Characterization and classification of species assessed by Chaos Game Representation of sequences. Molecular Biology Evolution, 16(10), 1391-1399. Dodin, G., Vandergheynst, P., Levoir, P., Cordier, C., & Marcourt, L. (2000). Fourier and wavelet transform analysis, a tool for visualizaing regular patterns in DNA sequences. Journal of theoretical Biology, 206, 323-326. Gates, M. (1986). A simple way to look at DNA. Journal of Theoretical Biology, 119(3), 319-328. Ghai, R., Hain, H., & Chakraborty, T. (2004). GenomeViz: visualization microvial genomes. BMC Bioinformatics, 5, 198. Guo, F.-B., Ou, H.-Y., & Zhang, C.-T. (2003). Z-CURVE: A new system for recognizing protein-coding genes in bacterial and archaeal genomes. Nucleic Acids Research, 31(6), 1780-1789. Guo, X., Randic, M., & Basak, S. C. (2001). A novel 2-D graphical representation of DNA sequences of low degeneracy. Chemical Physics Letters, 350, 106-112. Hamori, E., & Ruskin, J. (1983). H curves, A novel method of representation of nucleotide series especially suited for long DNA sequences. The Journal of Biological Chemistry, 258(2), 1318-1327. Hao, B.-L., Lee, H. C., & Zhang, S.-Y. (2000). Fractals related to long DNA sequences and complete genomes. Chaos, Solitons and Fractals, 11, 825-836.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

82 Chang

Ichinose, N., Yada, T., & Takagi, T. (2001). Quadtree Representation of DNA Sequences. Genome Informatics, 12, 510-511. Issac, B., Singh, H., Kaur, H., & Raghave, G.P.S. (2002). Locating probable genes using Fourier transform approach. Bioinformatics, 18(1), 196-197. Jeffrey, H. J. (1990). Chaos game representation of gene structure. Nucleic Acids Research, 18(8), 2163-2170. Leong, P. M., & Morgenthaler, S. (1995). Random walk and gap plots of DNA sequence. Cabios, 11, 503-507. Li, C., & Wang, J. (2004). On a 3-D representation of DNA primary sequences. Combinatorial Chemistry and High Throughput Screening, 7, 23-27. Liao, B., Tan, M., & Ding, K. (2005). A 4D representation of DNA sequences and its application. Chemical Physics Letters, 402, 380-383. Liu, Y., Guo, X., Xu, J., Pan, L., & Wang, S. (2002). Some notes on 2-D graphical representation of DNA sequence. Journal of Chemical Information and Computer Sciences, 42(3), 529-533. Loraine, A. E., & Helt, G. A. (2002). Visualizing the genome: techniques for presenting human genome data and annotations. BMC Bioinformatics, 3(19). Mehta, D. P., & Sahni, S. (1994). Computing display conflicts in string visualization, IEEE Transaction on Computers, 43, 350-361. Montgomery, S. B., Astakhova, T., Bilenky, M, Birney, E., Fu, T., Hassel, M., et al. (2004). Sockeye: a 3D environment for comparative genomics. Genome Research, 14, 956962. Nandy, A. (1994). A new graphical representation and analysis of DNA sequence structure: I. Methodology and application to globin genes. Current Science, 66(4), 309-314. Ovcharenko, I., Boffelli, D., & Loots, G. G. (2004). eShadow: A tool for comparing closely related sequences. Genome Research, 1191-1198. Peng, C. K., Buldyrev, S. V., Goldberger, A. L., Havlin, S., Sciortino, F., Simons, M., et al. (1992). Longrange correlations in nucleotide sequences. Nature, 356, 168-170. Randic, M. (2000) On characterization of DNA primary sequences by a condensed matrix. Chemical Physics Letters, 317, 29-34. Randic, M. (2004) Graphical representations of DNA as 2-D map. Chemical Physics Letters, 386, 468-471. Randic, M., & Balaban, A. T. (2003). On a four-dimensional representation of DNA primary sequences. Journal of Chemical Information and Computer Sciences, 43(2), 532-539. Randic, M., & Basak, S.C. (2001). Characterization of DNA primary sequences based on the average distances between bases. Journal of Chemical Information and Computer Sciences, 41(3), 561-568. Randic, M., & Krilov, G. (1997). Characterization of 3-D sequence of proteins. Chemical Physics Letters, 272, 115-119.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

DNA Sequence Visualization 83

Randic, M., & Vracko, M. (2000). On the similarity of DNA primary sequences. Journal of Chemical Information and Computer Sciences, 40(3), 599-606. Randic, M., Kleiner, A. F., & DeAlba L. M. (1994). Distance/Distance matrices. Journal of Chemical Information and Computer Science, 34, 277-286. Randic, M., Vracko, M., Lers, N., & Plavsic, D. (2003a). Novel 2-D graphical representation of DNA sequences and their numerical characterization. Chemical Physics Letters, 368, 1-6. Randic, M., Vracko, M., Lers, N., & Plavsic, D. (2003b). Analysis of similarity/dissimilarity of DNA sequences based on novel 2-D graphical representation. Chemical Physics Letters, 371, 202-207. Randic, M., Vracko, M., Nandy, A., & Basak, S. C. (2000). On 3-D graphical representation of DNA primary sequences and their numerical characterization. Journal of Chemical Information and Computer Science, 40(5), 1235-1244. Randic, M., Vracko, M., Zupan, J., & Novic, M. (2003c) Compact 2-D graphical representation of DNA. Chemical Physics Letters, 373, 558-562. Randic, M., Zupan, J., & Balaban, A. T. (2004) Unique graphical representation of protein sequences based on nucleotide triplet codons. Chemical Physics Letters, 397, 247-252. Roy, A., Raychaudhury, C., & Nandy, A. (1998). Novel techniques of graphical representation and analysis of DNA sequences — a review. Journal of Bioscience, 23(1), 55-71. Tino, P. (1999). Spatial representation of symbolic sequences through iterative function systems. IEEE Transactions on Signal Processing, 29, 386-393. Wang, W., & Johnson, D. H. (2002). Computing linear transforms of symbolic signals. IEEE Transaction on Signal Processing, 50, 628-634. Wu, D., Roberge, J., Cork, D. J., Nguyen, B. G., & Grace, T. (1993). Computer visualization of long genomic sequence. Proceedings of IEEE Conference on Visualization (pp. 308-315). Yan, M., Lin, Z. S., & Zhang, C. T. (1998). A new Fourier transform approach for protein coding measure based on the format of the Z curve. Bioinformatics, 14(8), 685-690. Yau, S. T., Wang, J., Niknejad, A., Lu, C., Jin, N., & Ho, Y. K. (2003). DNA sequence representation without degeneracy. Nucleic Acids Research, 31(12), 3078-3080. Yuan, C., Liao, B., & Wang, T.M. (2003). New 3D graphical representation of DNA sequences and their numerical characterization. Chemical Physics Letters, 379, 412-417. Zhang, C. T., Zhang, R., & Ou, H. Y., (2003). The Z curve database: a graphic representation of genome sequences. Bioinformatics, 19(5), 593–599. Zhang, R., & Zhang, C. T. (1994). Z curves, an intuitive tool for visualizing and analyzing DNA sequences. Journal of Biomolecular Structure Dynamics, 11, 767-782. Zhang, R., & Zhang, C. T. (2005). Identification of replication origins in archaeal genomes based on the Z-curve method. Archaea, 1, 335-346.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

84 Chang

Zhang, X. Y., Chen, F., Zhang, Y. T., Agner, S. C., Akay, M., Lu, Z. H., et al. (2002). Signal processing techniques in genomic engineering. Proceedings of The IEEE, 90(12), 1822-1833. Zupan, J., & Randic, M. (2005). Algorithm for coding DNA sequences into “spectrumlike” and “zigzag” representations. Journal of Chemical Information Model, 45(2), 309-313.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Proteomics with Mass Spectrometry

85

Chapter V

Proteomics with Mass Spectrometry
Simon Lin, Northwestern University, USA Salvatore Mungal, Duke University Medical Center, USA Richard Haney, Duke University Medical Center, USA Edward F. Patz, Jr., Duke University Medical Center, USA Patrick McConnell, Duke University Medical Center, USA

Abstract
This chapter provides a rudimentary review of the field of proteomics as it applies to mass spectrometry, data handling, and analysis. It points out the potential significance of the field suggesting that the study of nuclei acids has its limitations and that the progressive field of proteomics with spectrometry in tandem with transcription studies could potentially elucidate the link between RNA transcription and concomitant protein expression. Furthermore, we describe the fundamentals of proteomics with mass spectrometry and expound the methodology necessary to manage the vast amounts of data generated in order to facilitate statistical analysis. We explore the underlying technologies with the intention to demystify the complexities of the nascent field and to fuel interest by readers in the near future.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

86 Lin, Mungal, Haney, Patz, & McConnell

Introduction
The science of proteomics seeks to identify and characterize protein expression in biological systems. It leverages technologies that have been around for decades, such as mass spectrometry, liquid chromatography, and electrophoresis. Though the basic science is mature, proteomics technology has made much progress over the last decade (Aebersold & Mann, 2003). Proteomics has been gaining momentum as the limitations of studying DNA and RNA alone have been documented (Greenbaum, Colangelo, Williams, & Gerstein, 2003). Gene sequences themselves yield little information about how much of its transcribed protein will be expressed and in what cellular states. Furthermore, the nature and prevalence of alternative splicing has shown that studying gene expression at the protein level can yield complementary knowledge at the nuclei acid level. Proteomics is a vast and complex field consisting of a variety of platforms. In this chapter, we focus on mass spectrometry technology and data because of its wide use in the field for protein identification and profiling experiments. The goal of identification is to find out the amino acid sequence of extracted proteins; whereas the goal of profiling is to quantify the expression level of proteins. Proteomics data is measured in mass-to-charge ratios, termed m/z values. Peaks can be identified when we plot measured intensities against m/z values. The location of a peak corresponds to the chemical composition of the protein and thus can be used for protein identification, and the amplitude of a peak carries information on the protein abundance, which is the basis of profiling. Such data provides a unique challenge both to encode and to analyze. Firstly, even modest-sized experiments provide gigabytes worth of data. Encoding and exchanging data of this size is quite a technical challenge without mention of the problem of analyzing such a large dataset. Secondly, the data itself has intrinsic properties that make it particularly challenging to analyze and interpret. For example, one common task in analyzing spectra data is to locate data peaks. However, what characteristics of the peaks are most important: height, area under the peak, or some ratio thereof? Furthermore, noise in a single spectrum and aggregating multiple spectra provide unique statistical challenges. There has been some work towards standardization of proteomics data. The Proteomics Standards Initiative (PSI) has been created under the auspices of the Human Proteome Organization (HUPO). PSI has working groups to develop data standards for proteinprotein interaction and mass spectrometry (Orchard et al., 2004). Though good intentioned, the PSI mass spectrometry data standards are still in an abstract form. The Minimum Information About Proteomics Experiments is a document describing the types of data items needed to fully described proteomics experiments, but no data standard exists. The PSI Object Model (PSI-OM) and PSI Markup Language (PSI-ML) have defined a set of concepts and the relationships of those concepts, but not concrete data formats. Finally, the PSI Ontology (PSI-Ont) is being developed as an extension to the Microarray and Gene Expression Data Ontology (MGED Ontology) with the ‘PSI’ namespace, but is not yet complete. Proteomics data standardization is far from complete, and there is much work to be done to define data formats and ontologies.

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Proteomics with Mass Spectrometry

87

Data
Production of Proteomics Data
Proteomics data is produced from mass spectrometry experiments, which measures the atomic mass of peptides (see Figure 1). Classical proteomics study begins with 2D-gel for protein separation prior to mass spectrometry identification of gel spots. First, a biologic sample containing some proteins of interest is prepared. The proteins are then digested, or split, into peptide fragments. These fragments are ionized just before they enter the mass analyzer and detector, where their masses are measured. There are several techniques for measuring the mass. One popular approach, termed Time-of-Flight or just TOF, measures the amount of time an ion takes to reach a detector after it enters the mass spectrometer. Currently, the most accurate method, Fourier-transform ion cyclotron resonance (FTICR), involves measuring the frequency that ions circle the high magnetic field of a super-conducting magnet. The resulting data from the mass spectrometer is a list of masses and the relative abundance of the ions for that mass, termed the intensity. A secondary, or tandem, mass spectrometry reading is sometimes taken in which the peptide itself is then broken into its components and mass readings are taken. This allows for a much more accurate reading (Steen and Mann, 2004). The fingerprint generated by the mass spectrometry is then matched against a database of known proteins. The peak height information is usually discarded during the database search. Although mass spectrometry is often used to identify proteins first separated by 2D-gel, several recent studies have suggests that direct analysis of intact protein (without gel separation and digestion) with MALDI-TOF or SELDI-TOF can provide a measurement of the protein expression level, as indicated by the peak heights (Rosenblatt et al., 2004). The goal of a proteomics experiment is usually one of two objectives: accurately identify proteins in a sample or create a predictive model from a set of proteomics spectra. These are the protein identification and protein profiling problems, respectively. In protein identification, the goal is to as accurately as possible measure the peptide fragments of proteins of interest. The masses of the high intensity peptides are searched against a

Figure 1. Process flow for a typical proteomics experiment: Different options/ technologies are listed below each step (Steen and Mann, 2004, reprinted with copyright permission from Nature Reviews Molecular Cell Biology)
Sample preparation/ fractionation SDS-Page 2D-gel electrophoresis Protein digestion Trypsin Lys-C Asp-N Glu-C Peptide Peptide seperation HPLC Ion exchange Sample ionization Electrospray ionization MALDI Spray needle Mass spectrum Data Mass analysis spectrometry Quadrupole m/z Time of flight Quadrupole ion traps FTICR
Intensity

Cell culture

Peptise ions

PeptideSearch Sequest Mascot

Nature Reviews

Molecular Cell Biology

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

88 Lin, Mungal, Haney, Patz, & McConnell

database to identify which proteins exist in the sample. In proteomics profiling studies, the mass/intensity spectra of different samples are used to create a predictive model. The data is fed into a machine learning algorithm which can later be used as a model to predict what class a particular spectra falls into, for example diseased and healthy.

Overview of m/z Data
A spectrum collected from a proteomics experiment is a list of peaks that consist of a pair of values. The first value is the mass-to-charge ratio, often referred to as the m/z value. The charge is included because sometimes larger fragments can gain greater than a single charge during the ionization step. The second value is the intensity, or abundance of the peak. That intensity value is relative to a particular run of the mass spectrometer and typically requires statistical normalization to be comparable to other runs. This full list of m/z-intensity values makes up a proteomics spectra (see Figure 2). As noted previously in Figure 1, there can be a third dimension to proteomics experiments, such as when a mass spectrometer is used to analyze data that comes out of a liquid chromatography (LC) data. In that case, each spectrum is associated with a retention time, that is, the time that a sample takes to go through the chromatography column. Successive scans come out at the intervals of several seconds. So, the data has three dimensions overall, involving m/z values, LC retention times, and finally the MS intensity values. In addition to making 2-dimensional (2-D) plots such as the one depicted in Figure 2, systems analyzing this data also make plots in 3-D.

Figure 2. A proteomics spectra has the mass values running along the x-axis and the intensities along the y axis; the mass is actually the mass-to-charge ratio, as peptides can gain more than a single charge when ionized. the intensity is typically measure by counts of ions for each mass value (Steen and Mann, 2004, reprinted with copyright permission from Nature Reviews Molecular Cell Biology)
617.28 617.78 618.28

435.77 800
Intensity (counts)

300 200 100

600 400 200 534.75

0 615

615

m/z 620

716.41 0 400 500 600 700 800 900

m/z

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.

Proteomics with Mass Spectrometry

89

Important Metadata Considerations
In addition to the m/z-intensity values, it is important to keep track of other experimentrelated metadata. In the data modeling world, metadata is simply data about the data of interest. For proteomics, there are some important categories of metadata.

Data Acquisition
It is important to keep track of how the data was acquired, from the biological sample through any lab procedures used, and up to the ionization procedure. There is a class of software called Laboratory Information Management Systems (LIMS) for tracking these sorts of data. LIMS are usually quite large, complex, and expensive systems, and when it comes to analysis, the information stored in a LIMS must be attached to the data for processing. Data acquisition considerations can impact how data is processed, analyzed, and interpreted.

Instrumentation
The equipment used to ionize the peptides and the mass-spectrometry equipment should be tracked with the m/z-intensity data. This instrumentation can be an important consideration when performing data processing and analysis, as the mass spectrometer can have a large impact on the sensitivity and accuracy of the data.

Data Processing
As you will read in the Analysis section of this chapter, there is a full pipeline of processes that can be run on the data. Many of these statistical analyses simply modify or reduce the m/z-intensity values. This is important to keep track of because the data processing can have a large impact on how the data should be interpreted. The Proteomic Standard Initiative (PSI) is a group that is attempting to define the Minimum Information About a Proteomics Experiment (MIAPE) that should be collected (Orchard et al., 2004). At the time of writing, the MIAPE standard is only a draft document outlining some metadata guidelines. However, when the document reaches maturity, it will be an invaluable resource for proteomics metadata standards.

Available Data Standards
As of the writing of this chapter, there are two major efforts underway to provide a standard encoding of proteomics data. The first effort called mzXML is by the Institute for System Biology (ISB) (Pedrioli et al., 2004). The second effort called mzData is by the

Copyright © 2006, Idea Group Inc. Copying or distributing in print or electronic forms without written permission of Idea Group Inc. is prohibited.


Evaluation of VST algorithm in lumi package
Pan Du1∗ Simon Lin1† Wolfgang Huber2‡ Warrren A. Kibbe1§ , , , September 29, 2007

1 Robert H. Lurie Comprehensive Cancer Center Northwestern University, Chicago, IL, 60611, USA 2

EBI/EMBL, Cambridge, UK

Contents
1 Introduction 2 Required packages and data preprocessing 3 Evaluation of the VST algorithm 3.1 Correlation between the technical replicate microarrays . . . . . 3.2 Variance stabilizing between the technique replicate microarrays 3.3 Variation within replicates vs. variation between conditions . . . 3.4 Correlation between the expression proﬁles and dilution proﬁle . 3.5 Evaluation based on the identiﬁcation of diﬀerentially expressed genes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Conclusion 5 Session Info 6 Reference 1 2 4 4 6 6 6 6 12 13 13

1

Introduction

Variance stabilization is critical for the subsequent statistical inference to identify diﬀerentially expressed genes from microarray data. We devised a variancestabilizing transformation (VST) by taking advantages of larger number of technical replicates available on the Illumina microarray. Here we use the Barnes data set, which has been packaged as lumiBarnes data package at the Bioconductor Experiment Data web page, to evaluate the VST algorithm. We will compare VST with popular base-2 logarithm transform and VSN method. To
∗ dupan@northwestern.edu † s-lin2@northwestern.edu ‡ huber@ebi.ac.uk § wakibbe@northwestern.edu

1

facilitate the comparison, we used popular quantile normalization for both VST and log2 transformed data.

2

Required packages and data preprocessing

The evaluation requires the users to install packages: lumi, vsn, geneﬁlter , limma and lumiBarnes (Experiment Data package). First, we need to load these packages: > > > > > > > > > > library("lumi") library("vsn") library("genefilter") library("geneplotter") library("RColorBrewer") library("limma") library("lumiBarnes") set.seed(0xbadbeef) ## Load the Barnes data set data("lumiBarnes")

We select the Barnes data [2] as the evaluation data set. For convenience, we created a Bioconductor experiment data package lumiBarnes. The data is kept in a LumiBatch Object. Because the Barnes data utilized the pre-released version of HumanRef-8 version 1 BeadChip, some probes on the chip do not exist in the public released HumanRef-8 version 1 BeadChip. For annotation consistence, these probes was removed in the lumiBarnes package. For the interested users, the raw data can be downloaded from the paper companion website: http://www.bioinformatics.ubc.ca/pavlidis/lab/platformCompare/. Before preprocessing the data, we ﬁrst compare the methods of ﬁtting the relations between probe standard deviation and mean. The detailed implementation of methods is described in [1]. The results of using ’linear’ and ’quadratic’ method are shown in Figure 1 and Figure 2 respectively. Compare Figure 1 and Figure 2, we can see the ’quadratic’ method over-ﬁts the relations in the high expression range. As a result, VST uses ’linear’ method by default to get more robust results. > > > > > > > > + + + + > > ## Select the blood and placenta samples selChip = !is.na(lumiBarnes$pctBlood) x.lumi <- lumiBarnes[, selChip] presentCount <- detectionCall(x.lumi) ## Since the Barnes data was not background removed, we will do background adjustment fir ## The background estimation will be based on the control probe information. ## As the old version lumiBarnes library does not include controlData slot, we will chec if (nrow(x.lumi@controlData) == 0) { ## We will use the control probe information in the example.lumi in the updated l data(example.lumi) x.lumi@controlData <- example.lumi@controlData } x.lumi <- lumiB(x.lumi, method='bgAdjust') repl1 <- which(x.lumi$replicate=="A") 2

> temp <- lumiT(lumiBarnes[,1], fitMethod='linear', ifPlot=TRUE) 2007-09-29 17:56:13 , processing array
(A) Relations of probe Mean and SD
2000 16

1
(B) Log2 vs. VST

500

VST transformed value 100 200 500 1000 Mean 5000 20000 50000

Standard Deviation

50 100

20

5

10

8

10

12

14

8

10

12

14

16

Log2 transformed value

Figure 1: Estimate the relations between probe standard deviation and mean by linear ﬁtting. The green line in ﬁgure A is the ﬁtted curve

> temp <- lumiT(lumiBarnes[,1], fitMethod='quadratic', ifPlot=TRUE) 2007-09-29 17:56:14 , processing array
(A) Relations of probe Mean and SD
2000 16

1
(B) Log2 vs. VST

500

VST transformed value 100 200 500 2000 Mean 5000 20000 50000

Standard Deviation

100

20

50

5

10

8

10

12

14

8

10

12

14

16

Log2 transformed value

Figure 2: Estimate the relations between probe standard deviation and mean by direct quadratic ﬁtting. The green line in ﬁgure A is the ﬁtted curve; the green dotted line in ﬁgure B represents Log2 = VST.

3

> repl2 <- which(x.lumi$replicate=="B") > stopifnot(sum(selChip)==12L, length(repl1)==6L, length(repl2)==6L) Preprocess: > > > > > > > > > > > > > > + + > > > > > > + + ## VST transform and Quantile normalization x.lumi.vst <- lumiT(x.lumi) x.lumi.vst.quantile <- lumiN(x.lumi.vst, method='quantile') ## log2 transform and Quantile normalization x.lumi.log <- lumiT(x.lumi, method='log2') x.lumi.log.quantile <- lumiN(x.lumi.log, method='quantile') ## VSN normalization: use lts.quantile=0.5 since in the blood/placenta ## comparison more genes are differentially expressed than what is ## expected by the default of 0.9. x.lumi.vsn <- lumiN(x.lumi, method='vsn', lts.quantile=0.5) ## Add the vsn based on technical replicates vsn.pair <- exprs(x.lumi) cor.i <- NULL for(i in 1:length(repl1)) { vsn.pair[, c(i, i+length(repl1))] <- exprs(vsn2(vsn.pair[, c(repl1[i], repl2[i])] } # vsn.quantile <- normalize.quantiles(vsn.pair) # rownames(vsn.quantile) <- rownames(vsn.pair) # colnames(vsn.quantile) <- colnames(vsn.pair)

normDataList <- list('VST-Quantile'=exprs(x.lumi.vst.quantile), 'Log2-Quantile'=exprs(x.lumi.log.quantile), 'VSN'=exprs(x.lumi.vsn)) # , 'VSN-Quantile'=vsn.quantile

3
3.1

Evaluation of the VST algorithm
Correlation between the technical replicate microarrays

A good preprocessing method will improve the correlation between the technical replicate microarrays. Here will calculate the correlation between six pairs of technical replicate chips and plot them as the box plot, as shown in Figure 3. We can see VST improves the consistency between replicates. > > > > > > + + ## Check the correlation between technique replicates tempDataList <- c(normDataList, list(vsn.pair)) names(tempDataList) <- c(names(normDataList), 'VSN-techReplicate') chipCorList <- matrix(as.numeric(NA), nrow=length(repl1), ncol=length(tempDataList)) colnames(chipCorList) <- names(tempDataList) for (i in seq(along= tempDataList)) for (j in seq(along=repl1)) chipCorList[j,i] = cor(tempDataList[[i]][, c(repl1[j], repl2[j])])[1,2]

4

Correlation between technique replicate chips

0.980

0.985

0.990

0.995

Log2 Quantile

VSN

Figure 3: Comparison of the correlation between technical replicate chips after preprocessing. The VSN-techReplicate method performed the VSN within each pair of technical replicate samples and then calculated their correlations.

5

VSN techReplicate

VST Quantile

3.2

Variance stabilizing between the technique replicate microarrays

A good variance stabilizing method should stabilize the variance between the technique replicates. Here we plot the mean and standard deviation relations between a pair of technique replicates, as shown in Figure 4. Users can select other pairs of replicates and plot the pictures.

3.3

Variation within replicates vs. variation between conditions
2 σbetween groups . 2 σwithin groups

To assess the signal to noise ratio, we assess

For n groups, by its generalisation, the F -statistic. > fac <- factor(paste(x.lumi$pctBlood, x.lumi$pctPlacenta, sep=":")) > rf <- lapply(normDataList, function(x) rowFtests(x[presentCount > 0,], fac=fac)) > ef <- sapply( rf, function(x) ecdf(x$p.value)) The result is shown in Figure 5. We can see the diﬀerence among these methods are not big, however, the VST is consistently better than the log2 and VSN methods.

3.4

Correlation between the expression proﬁles and dilution proﬁle

Here we want to compare the correlation between the expression proﬁles and dilution proﬁle. Because these concordant genes are more likely to be related with the dilution process, a good transformation should improve or at least not worsen the correlation of the expression proﬁles and dilution proﬁle. Figure 6 shows, VST transformed data improve this correlation because there are more probes with high correlation (the absolute values of correlation coeﬃcient close to 1). > modelProfile1 <- c(100, 95, 75, 50, 25, 0, 100, 95, 75, 50, 25, 0) > corrList <- lapply(normDataList, function(x) { + x <- x[presentCount > 0, ] + corr1 <- apply(x, 1, cor, y=modelProfile1) + return(corr1) + } )

3.5

Evaluation based on the identiﬁcation of diﬀerentially expressed genes

For better evaluation, we want to evaluate the VST algorithm based on the detection of diﬀerentially expressed genes. First, we want to see the percentage of concordant probes (a probe with a correlation coeﬃcient larger than 0.8 6

VST Quantile

Standard deviation

0.0

0.4

0.8

0

5000

10000 rank(mean)

15000

20000

Log2 Quantile

Standard deviation

0.0

0.4

0.8

0

5000

10000 rank(mean)

15000

20000

VSN

Standard deviation

0.0

0.4

0.8

0

5000

10000 rank(mean)

15000

20000

VSN techReplicate

Standard deviation

0.0

0.4

0.8

0

5000

10000 rank(mean)

15000

20000

Figure 4: Mean and standard deviation relations of the technical replicate microarrays A01 and B01. The VSN-techReplicate method performed the VSN only within the pair of technical replicate samples. 7

Cumulative distribution of F test p value
0.50 Empirical probability 0.25 0.30 0.35 0.40 0.45

0.15

0.20

VST Quantile Log2 Quantile VSN

1e 04

2e 04

5e 04

1e 03

2e 03 F test p value

5e 03

1e 02

2e 02

5e 02

Figure 5: Cumulative distribution functions of p-values obtained from a) reporter-wise F -tests (by factor fac). These are monotonous measures of the ratio between variation within replicates and variation between conditions, or in other words, the signal-to-noise ratio.

8

3000

VST Quantile Log2 Quantile VSN

Frequency

500 0.0

1000

1500

2000

2500

0.2

0.4

0.6

0.8

1.0

Absolute values of correlation coefficients

Figure 6: Compare the histogram of the correlation between the expression proﬁles and dilution proﬁle

9

between the normalized intensity proﬁle and the real dilution proﬁle (six dilution ratios with two replicates at each dilution)) among the most signiﬁcant probes (ranking based on F-test p-values). The result is shown in Figure 7. We can see the VST processed data has obviously higher percentage of concordant probes than the log2 and VSN methods. > > > > + + + + + + + + + + > > topNumList <- seq(50, 3000, by=100) corTh <- 0.8 highCorrNumMatrix <- NULL for (i in 1:length(rf)) { probeList <- names(rf[[i]]$p.value) ordProbe.i <- probeList[order(abs(rf[[i]]$p.value), decreasing=FALSE)] corr1 <- corrList[[i]] matchNum.j <- NULL for (topNum.j in topNumList) { topProbe.j <- ordProbe.i[1:topNum.j] matchNum.j <- c(matchNum.j, length(which(abs(corr1[topProbe.j]) > corTh)) } highCorrNumMatrix <- cbind(highCorrNumMatrix, matchNum.j) } rownames(highCorrNumMatrix) <- topNumList colnames(highCorrNumMatrix) <- names(rf)

The result is shown in Figure 7. We can see the diﬀerence among these methods are not big, however, the VST is consistently better than the log2 and VSN methods. Next, we selected the diﬀerentially expressed genes by comparing two conditions. The p-values will be estimated by the Bioconductor limma package. To better evaluate the overall performance, we ﬁrst ranked the probes with their p-values from low to high, then calculate the percentage of concordant probes among diﬀerent number of most signiﬁcant probes, as shown in Figure 8. The result indicates that VST-quantile outperforms Log2.Quantile in terms of the concordance evaluation. Identify the diﬀerentially expressed genes by using limma package: > > > > > > > > > > + + + + + + ## Select the comparing chip index sampleInfo <- pData(phenoData(x.lumi)) sampleType <- paste(sampleInfo[,'pctBlood'], sampleInfo[,'pctPlacenta'], sep=':') sampleType <- paste('c', sampleType, sep='') ## Comparing index ## used in the paper (the most challenging comparison): compareInd <- c(repl1[1:2], repl2[1:2]) compareType <- sampleType[compareInd] fitList.limma <- NULL for (i in 1:length(normDataList)) { selDataMatrix <- normDataList[[i]] selDataMatrix <- selDataMatrix[presentCount > 0, ] selProbe <- rownames(selDataMatrix) compareMatrix <- selDataMatrix[, compareInd] design <- model.matrix(~ 0 + as.factor(compareType)) 10

Percentage of concordant probes (%)

70

80

90

100

50

60

VST Quantile Log2 Quantile VSN

0

500

1000

1500

2000

2500

3000

Number of most significant probes by ranking their p values (F test)

Figure 7: Cumulative distribution functions of p-values obtained from a) reporter-wise F -tests (by factor fac). These are monotonous measures of the ratio between variation within replicates and variation between conditions, or in other words, the signal-to-noise ratio.

11

+ colnames(design) <- c('A', 'B') + fit1 <- lmFit(compareMatrix, design) + contMatrix <- makeContrasts('A-B'=A - B, levels=design) + fit2 <- contrasts.fit(fit1, contMatrix) + fit <- eBayes(fit2) + fitList.limma <- c(fitList.limma, list(fit)) + } > names(fitList.limma) <- names(normDataList) Estimate the number of concordance probes (a probe with a correlation coeﬃcient larger than 0.8 between the normalized intensity proﬁle and the real dilution proﬁle (six dilution ratios with two replicates at each dilution)) among the top diﬀerentially expressed genes (ranked based on p-values estimated by limma).: > > > > > > > + + + + + + + + + + + + + + > > ## Check the correlation of the top differentiated probes based on the limma results ## rank the probes based on the p-values of limma result fitList <- fitList.limma topNumList <- c(30, seq(35, 1000, by=30)) corTh <- 0.8 highCorrNumMatrix <- NULL for (i in 1:length(fitList)) { probeList <- rownames(fitList[[i]]$p.value) ordProbe.i <- probeList[order(abs(fitList[[i]]$p.value[,1]), decreasing=FALSE)] profileMatrix <- normDataList[[i]][ordProbe.i, ] modelProfile1 <- c(100, 95, 75, 50, 25, 0, 100, 95, 75, 50, 25, 0) corr1 <- apply(profileMatrix, 1, cor, y=modelProfile1) names(corr1) <- ordProbe.i matchNum.j <- NULL for (topNum.j in topNumList) { topProbe.j <- ordProbe.i[1:topNum.j] matchNum.j <- c(matchNum.j, length(which(abs(corr1[topProbe.j]) > corTh)) } highCorrNumMatrix <- cbind(highCorrNumMatrix, matchNum.j) } rownames(highCorrNumMatrix) <- topNumList colnames(highCorrNumMatrix) <- names(fitList)

4

Conclusion

The users can select diﬀerent samples for the comparison and change the cutoﬀ thresholds in the evaluation. The results should be similar, i.e., the VST algorithm is better than the log2 transformation and VSN for this evaluation data set because it utilizes the mean and standard deviation information at the bead-level.

12

Percentage of concordant probes (%)

60

80

100

VST Quantile Log2 Quantile VSN

0 0

20

40

200

400

600

800

1000

Number of most significant probes by ranking their p values

Figure 8: The concordance between the expression and dilution proﬁles of the selected diﬀerentially expressed genes

5

Session Info
• R version 2.6.0 alpha (2007-09-05 r42787), i386-apple-darwin8.10.1 • Locale: en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF8 • Base packages: base, datasets, grDevices, graphics, methods, splines, stats, tools, utils • Other packages: AnnotationDbi 0.1.13, Biobase 1.15.33, DBI 0.2-3, RColorBrewer 1.0-1, RSQLite 0.6-2, aﬀy 1.15.7, aﬀyio 1.5.8, annotate 1.15.7, geneﬁlter 1.15.11, geneplotter 1.15.9, lattice 0.16-4, limma 2.11.12, lumi 1.3.37, lumiBarnes 1.3.2, mgcv 1.3-26, preprocessCore 0.99.12, survival 2.32, vsn 3.0.22 • Loaded via a namespace (and not attached): KernSmooth 2.22-21, grid 2.6.0

> toLatex(sessionInfo())

6

Reference

1. Lin, S.M., Du, P., Kibbe, W.A., ”Model-based Variance-stabilizing Transformation for Illumina Mi-croarray Data”, under review

13

2. Barnes, M., Freudenberg, J., Thompson, S., Aronow, B. and Pav-lidis, P. (2005) ”Experimental comparison and cross-validation of the Aﬀymetrix and Illumina gene expression analysis platforms”, Nucleic Acids Res, 33, 5914-5923.

14

